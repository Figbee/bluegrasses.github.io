<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bluegrasses.github.io</id>
    <title>罗亭的技术博客</title>
    <updated>2020-03-21T13:07:18.758Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bluegrasses.github.io"/>
    <link rel="self" href="https://bluegrasses.github.io/atom.xml"/>
    <subtitle>以梦为马, 诗酒趁年华</subtitle>
    <logo>https://bluegrasses.github.io/images/avatar.png</logo>
    <icon>https://bluegrasses.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 罗亭的技术博客</rights>
    <entry>
        <title type="html"><![CDATA[go 通道]]></title>
        <id>https://bluegrasses.github.io/post/go-tong-dao/</id>
        <link href="https://bluegrasses.github.io/post/go-tong-dao/">
        </link>
        <updated>2020-03-21T12:42:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="go通道基本用法">go通道基本用法</h2>
<p>//声明通道<br>
var 通道名 chan 数据类型<br>
//创建通道：如果通道为nil(就是不存在)，就需要先创建通道<br>
通道名 = make(chan 数据类型)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[go 语言杂项]]></title>
        <id>https://bluegrasses.github.io/post/go-yu-yan-za-xiang/</id>
        <link href="https://bluegrasses.github.io/post/go-yu-yan-za-xiang/">
        </link>
        <updated>2020-03-19T15:03:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="defer-panic-recover">defer panic recover</h2>
<pre><code class="language-go">func main() {
	defer func() {
		err := recover()
		fmt.Println(&quot;异常信息是:&quot;, err)
	}()
	panic(&quot;it is panic&quot;)
}
</code></pre>
<h2 id="go键盘输入">go键盘输入</h2>
<p>Scanln和Scanf类似于println和printf</p>
<pre><code class="language-go">func main() {
	var x int
	var y float64
	fmt.Println(&quot;请输入一个整数，一个浮点类型：&quot;)
	fmt.Scanln(&amp;x, &amp;y) //读取键盘的输入，通过操作地址，赋值给x和y   阻塞式
	fmt.Printf(&quot;x的数值：%d，y的数值：%f\n&quot;, x, y)

	fmt.Scanf(&quot;%d,%f&quot;, &amp;x, &amp;y)
	fmt.Printf(&quot;x:%d,y:%f\n&quot;, x, y)
}
</code></pre>
<h2 id="缓冲区的输入">缓冲区的输入</h2>
<pre><code class="language-go">func main() {
	fmt.Println(&quot;请输入一个字符串:&quot;)
	//创建一个缓冲区,缓冲区读取的内容是标准输入流
	reader := bufio.NewReader(os.Stdin)
	//读取缓冲区,知道遇到\n操作
	s1, _ := reader.ReadString('\n')
	fmt.Println(&quot;读到的数据:&quot;, s1)
}
</code></pre>
<h2 id="打印数据类型">打印数据类型</h2>
<pre><code class="language-go">	var a = [...]int{0: 1, 3: 3}
	//使用反射打印数据类型
	fmt.Println(reflect.TypeOf(a))
	//使用Printf打印数据类型
	fmt.Printf(&quot;%T&quot;, a)
</code></pre>
<h2 id="函数的使用">函数的使用</h2>
<h3 id="函数可变参数">函数可变参数</h3>
<pre><code class="language-go">func getAdd(nums ...int) {
	sum := 0
	for i := 0; i &lt; len(nums); i++ {
		sum += nums[i]
	}
	fmt.Println(sum)
}
</code></pre>
<h2 id="结构体的使用">结构体的使用</h2>
<h3 id="method-继承">method 继承</h3>
<pre><code class="language-go">type Human struct{
	name string
	age int
	phone string
}
type Student struct{
	Human
	school string
}
type Commpany struct{
	Human
	Commpany string
}
func (h* Human) SayHi(){
	fmt.Printf(&quot;i am %s you can call me on %s\n&quot;,h.name,h.phone)
}
func main(){
	mark:=Student{Human{&quot;yxg&quot;,40,&quot;15548551999&quot;},&quot;btsy&quot;}
	tom:=Commpany{Human{&quot;tom&quot;,20,&quot;13348551950&quot;},&quot;bjyddx&quot;}
	mark.SayHi()
	tom.SayHi()
}
</code></pre>
<h2 id="断言">断言</h2>
<h3 id="断言方式1">断言方式1</h3>
<blockquote>
<p>安全类型断言<br>
&lt;目标类型的值&gt;，&lt;布尔参数&gt; := &lt;表达式&gt;.( 目标类型 )</p>
</blockquote>
<pre><code class="language-go">type Student struct {
	name string
	age  int
	city string
}
func main(){
    var i1 interface{}
	i1 = Student{}
    data,ok:=i1.(Student)
    if ok{

    }
}
</code></pre>
<h3 id="断言方式2">断言方式2</h3>
<blockquote>
<p>s.(type)</p>
</blockquote>
<pre><code class="language-go">func main(){
    var i1 interface{}
	i1 = Student{}
    switch t := i1.(type) {
	case Student:
		fmt.Println(&quot;student 类型&quot;, t)
	default:
		fmt.Println(&quot;未知类型&quot;)
	}
}
</code></pre>
<h2 id="文件操作">文件操作</h2>
<h3 id="基本操作语法">基本操作语法</h3>
<blockquote>
<p>file 操作 封装在os 包</p>
</blockquote>
<ol>
<li>创建文件夹，如果文件夹存在，创建失败<br>
os.MkDir() 创建文件夹<br>
os.MKDirAll() 可以创建多层</li>
<li>创建文件<br>
os.Create() 创建文件 采用模式0666任何人都可读写,不可执行</li>
<li>打开文件<br>
os.Open(filename)<br>
os.OpenFile(filename,mode,perm)</li>
<li>关闭文件:<br>
file.Close()</li>
<li>删除文件或目录<br>
os.Remove() //删除文件和空目录<br>
os.RemoveAll()//删除所有</li>
</ol>
]]></content>
    </entry>
</feed>