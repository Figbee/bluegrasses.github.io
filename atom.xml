<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bluegrasses.github.io</id>
    <title>罗亭的技术博客</title>
    <updated>2021-10-29T23:25:54.030Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bluegrasses.github.io"/>
    <link rel="self" href="https://bluegrasses.github.io/atom.xml"/>
    <subtitle>人生不是一个结果, 是一段路, 连接此岸和彼岸</subtitle>
    <logo>https://bluegrasses.github.io/images/avatar.png</logo>
    <icon>https://bluegrasses.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 罗亭的技术博客</rights>
    <entry>
        <title type="html"><![CDATA[{Vue} 组件]]></title>
        <id>https://bluegrasses.github.io/post/vue-zu-jian/</id>
        <link href="https://bluegrasses.github.io/post/vue-zu-jian/">
        </link>
        <updated>2021-10-29T23:23:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="组件">组件</h1>
<h2 id="一-组件基础">一. 组件基础</h2>
<h3 id="全局组件">全局组件</h3>
<pre><code class="language-javascript">&lt;!-- 全局组件定义 --&gt;
Vue.component('todo-list',{
    template:&quot;&lt;li&gt;{{content}}&lt;/li&gt;&quot;
})
    
&lt;!-- 组件使用--&gt;
&lt;todo-list&gt;&lt;/todo-list&gt;

</code></pre>
<h3 id="局部组件">局部组件</h3>
<pre><code class="language-javascript">&lt;div id=&quot;app&quot;&gt;
&lt;todolist &gt;&lt;/todolist&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
&lt;!-- 局部组件定义 --&gt;
var todolite={
template:&quot;&lt;div&gt;hello&lt;/div&gt;&quot;
}
var app=new Vue({
el:&quot;#app&quot;,
// 引入局部组件
components:{
'todolist':todolite
}
});
&lt;/script&gt;
</code></pre>
<h3 id="组件传值和接收">组件传值和接收</h3>
<pre><code class="language-javascript">&lt;div id=&quot;app&quot;&gt;
&lt;ul&gt;
    &lt;!-- v-bind:content=&quot;item&quot; 组件传值 --&gt;
    &lt;todo-list v-for=&quot;item in list&quot; v-bind:content=&quot;item&quot;&gt;&lt;/todo-list&gt;
&lt;/ul&gt;
	&lt;/div&gt;
	&lt;script type=&quot;text/javascript&quot;&gt;
		&lt;!-- 组件定义 --&gt;
		Vue.component('todo-list',{
			// 组件接收数据
			props:['content'],
			template:&quot;&lt;li&gt;{{content}}&lt;/li&gt;&quot;
		})
    &lt;/script&gt;

</code></pre>
<h3 id="父组件和子组件传递数据">父组件和子组件传递数据</h3>
<pre><code class="language-javascript">//父子组件交互案例
 
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;
        &lt;button v-on:click=&quot;handle&quot;&gt;提交&lt;/button&gt;
        &lt;ul&gt;
           //父组件给子组件传递值用v-bind:
           &lt;todo-list v-for=&quot;(item,index) in content&quot; v-bind:item=&quot;item&quot; v-bind:index=&quot;index&quot; v-on:delete=&quot;delHandle&quot;&gt;&lt;/todo-list&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/body&gt;
    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
 
    &lt;script&gt;
        
        // 局部注册
        var todo={
            props:['item','index'],
            template:'&lt;li v-on:click=&quot;del&quot;&gt;{{item}}&lt;/li&gt;',
            methods: {
                del:function (){
                    // 触发当前实例上的事件。附加参数都会传给监听器回调
                    //子组件向父组件传递
                    this.$emit('delete',this.index);
                }
            }
        }
        var app=new Vue({
            el:&quot;#app&quot;,
            data:{
                content:[],
                msg:&quot;&quot;
            },
            methods: {
                handle:function(event){
                    this.content.push(this.msg);
                    this.msg=&quot;&quot;;
                },
                delHandle:function(index){
                    this.content.splice(index);
                }
            },
            components: {
                'todoList':todo
            }
        })
    &lt;/script&gt;
&lt;/html&gt;
</code></pre>
<h3 id="is的用法">is的用法</h3>
<pre><code>&lt;div is=&quot;hello&quot;&gt;&lt;/div&gt;
&lt;hello&gt;&lt;/hello&gt;
</code></pre>
<blockquote>
<p>上面的两种使用方法效果是一样的, is适用于ul selected等情况防止dom渲染错乱.</p>
</blockquote>
<h3 id="引用的操作ref">引用的操作[ref]</h3>
<p><strong>计算子组件值</strong></p>
<pre><code class="language-javascript">html部分
&lt;computer v-on:change_num=&quot;numChangeHandle&quot; ref=&quot;one&quot;&gt;&lt;/computer&gt;
&lt;computer v-on:change_num=&quot;numChangeHandle&quot; ref=&quot;two&quot;&gt;&lt;/computer&gt;

js部分:
numChangeHandle:function(index){
    this.totalNum=this.$refs.one.num+this.$refs.two.num;
}
</code></pre>
<p><strong>引用操作dom</strong></p>
<pre><code class="language-javascript">html部分:
&lt;div id=&quot;app&quot;&gt;
    &lt;span ref=&quot;test&quot; @click=&quot;blur&quot;&gt;sdfsdf&lt;/span&gt;
&lt;/div&gt;

js 部分:
methods: {
    blur:function(){
        // console.log(this.$refs.test);
        this.$refs.test.innerHTML=&quot;加油&quot;;
    }
}
</code></pre>
<h3 id="组件模板定义方法x-templates">组件模板定义方法X-Templates</h3>
<pre><code>另一个定义模板的方式是在一个 &lt;script&gt; 元素中，并为其带上 text/x-template 的类型，然后通过一个 id 将模板引用过去。例如：

&lt;script type=&quot;text/x-template&quot; id=&quot;hello-world-template&quot;&gt;
  &lt;p&gt;Hello hello hello&lt;/p&gt;
&lt;/script&gt;
Vue.component('hello-world', {
  template: '#hello-world-template'
})
</code></pre>
<h3 id="组件绑定原生事件">组件绑定原生事件</h3>
<pre><code class="language-javascript">html部分
&lt;div id=&quot;app&quot;&gt;
    &lt;!-- 组件绑定原生事件 --&gt;
    &lt;todo @click.native=&quot;test&quot;&gt;&lt;/todo&gt;
&lt;/div&gt;
js部分
Vue.component('todo', {
    template:&quot;&lt;li&gt;菜鸡互啄&lt;/li&gt;&quot;
})
var vm=new Vue({
    el:&quot;#app&quot;,
    methods: {
        test:function(){
            alert('abc');
        }
    }
})
</code></pre>
<blockquote>
<p>案例场景: 点击按钮进行toggle切换显示的组件</p>
</blockquote>
<h3 id="动态组件注册">动态组件注册</h3>
<pre><code class="language-javascript">html部分:
    &lt;div id=&quot;app&quot;&gt;
        &lt;component :is=&quot;type&quot;&gt;&lt;/component&gt;
        &lt;button v-on:click=&quot;dtzc&quot;&gt;动态注册组件切换&lt;/button&gt;
    &lt;/div&gt;
javascript部分
    Vue.component('aa',{
        template:'&lt;div&gt;aa&lt;/div&gt;'
    })
    Vue.component('bb',{
        template:'&lt;div&gt;bb&lt;/div&gt;'
    })
    var vm=new Vue({
        el:&quot;#app&quot;,
        data () {
            return {
                type:&quot;aa&quot;
            }
        },
        methods: {
            dtzc:function(){
                this.type=this.type===&quot;aa&quot;?&quot;bb&quot;:&quot;aa&quot;;
            }
        }
    })
</code></pre>
<h3 id="v-once指令">v-once指令</h3>
<pre><code class="language-javascript">//代码案例
Vue.componet('xxxA',{
    template:'&lt;div v-once&gt;默认语句&lt;/div&gt;'
})
v-once 放到内存里,提高静态内容的显示效率
</code></pre>
<h2 id="二-组件传值">二. 组件传值</h2>
<h3 id="props验证">props验证</h3>
<pre><code class="language-javascript">Vue.component('my-component', {
  props: {
    // 基础的类型检查 (`null` 匹配任何类型)
    propA: Number,
    // 多个可能的类型
    propB: [String, Number],
    // 必填的字符串
    propC: {
      type: String,
      required: true
    },
    // 带有默认值的数字
    propD: {
      type: Number,
      default: 100
    },
    // 带有默认值的对象
    propE: {
      type: Object,
      // 对象或数组默认值必须从一个工厂函数获取
      default: function () {
        return { message: 'hello' }
      }
    },
    // 自定义验证函数
    propF: {
      validator: function (value) {
        // 这个值必须匹配下列字符串中的一个
        return ['success', 'warning', 'danger'].indexOf(value) !== -1
      }
    }
  }
})
</code></pre>
<h3 id="组件复杂传值非父子组件">组件复杂传值((非父子组件))</h3>
<h4 id="bus-观察者模式-总线">bus 观察者模式 总线</h4>
<pre><code class="language-javascript">html:

&lt;div id=&quot;app&quot;&gt;
    &lt;child content=&quot;dell&quot;&gt;&lt;/child&gt;
    &lt;child content=&quot;lenov&quot;&gt;&lt;/child&gt;
&lt;/div&gt;

js部分:
    Vue.prototype.bus=new Vue();

    Vue.component('child',{

        data:function() {
            return {
                cont:this.content
            }
        },
        props: {
            content:{
                type:String,
                // default:&quot;it is default&quot;
            }
        },
        template:&quot;&lt;div @click='handleClick'&gt;{{cont}}&lt;/div&gt;&quot;,
        methods: {
            handleClick:function(){
                this.bus.$emit('change',this.content);
            }
        },

        mounted: function() {
            var that=this;
            this.bus.$on('change',function(msg){
                that.cont=msg
            })
        }
    })

</code></pre>
<h2 id="三-插槽slot">三. 插槽slot</h2>
<h4 id="vue插槽的使用场景">vue插槽的使用场景:</h4>
<blockquote>
<p>插槽是对组件的扩展,插槽根据父组件的dom元素进行不同的显示，插槽可以把它看成是组件的一块HTML模板，这块模板显示不显示、以及怎样显示由父组件来决定</p>
</blockquote>
<h4 id="单个插槽">单个插槽:</h4>
<p>在children这个标签里面放Dom，Vue不会理你，也就是不会显示.</p>
<pre><code>html部分
&lt;clild&gt;
&lt;p&gt;dell&gt;&lt;/p&gt;
&lt;/child&gt;

javascript部分
Vue.component('child',{
    template:`&lt;div&gt;&lt;slot&gt;默认内容&lt;slot&gt;&lt;/div&gt;`
})
</code></pre>
<h4 id="具名插槽">具名插槽</h4>
<pre><code class="language-javascript">html部分
&lt;child &gt;
    &lt;h1 slot=&quot;header&quot;&gt;hello&lt;/h1&gt;
    &lt;h3 slot=&quot;footer&quot;&gt;world&lt;/h3&gt;
&lt;/child&gt;

javascript部分
Vue.componet('child',{
    template:`&lt;div&gt;
        &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;
        &lt;div&gt;content&lt;/div&gt;
        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;
    &lt;/div&gt;
})
</code></pre>
<h4 id="作用域插槽">作用域插槽</h4>
<blockquote>
<p>作用域插槽：我们可以叫它带数据的插槽</p>
</blockquote>
<pre><code class="language-javascript">html部分
&lt;div id=&quot;app&quot;&gt;
    &lt;child&gt;
        &lt;!-- 作用域插槽必须以template标签开头,用slot-scope接收数据 --&gt;
        &lt;template slot-scope=&quot;data&quot;&gt;
            &lt;li&gt;{{data.item}}&lt;/li&gt;                
        &lt;/template&gt;
    &lt;/child&gt;
&lt;/div&gt;

JavaScript部分
    Vue.component('child',{
        data () {
            return {
                list:[1,2,3,4]   
            }
        },
        template:`&lt;div&gt;&lt;ul&gt;
            &lt;slot v-for=&quot;item of list&quot;
                :item=item&gt;
            &lt;/slot&gt;
        &lt;/ul&gt;&lt;/div&gt;`
    })
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[{go} 协程处理指定信号]]></title>
        <id>https://bluegrasses.github.io/post/go-xie-cheng-chu-li-zhi-ding-xin-hao/</id>
        <link href="https://bluegrasses.github.io/post/go-xie-cheng-chu-li-zhi-ding-xin-hao/">
        </link>
        <updated>2021-09-08T14:05:51.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>题外话 : 来新单位已经4个月了, 非常艰难的开始 ,各种各样的不适应。其实在这样的行政体系中，别人喜欢你也罢，排挤你也罢，受重用也罢，受冷落也罢，都没有那么的重要。走好自己的路比扯其它的更有意义。共勉！</p>
</blockquote>
<h2 id="go-通过协程处理指定的信号">go 通过协程处理指定的信号</h2>
<pre><code class="language-go">ch := make(chan os.Signal, 1)
//通道接收的系统信号
signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)
	for {
		s := &lt;-ch
		switch s {
		case syscall.SIGINT:
			fmt.Println(&quot;sigint&quot;)
			return
		case syscall.SIGTERM:
			fmt.Println(&quot;sigterm&quot;)
			return
        default:
			fmt.Println(&quot;default...&quot;)
			return
        }
    }
</code></pre>
<h2 id="go-优雅的启动关闭服务器">go 优雅的启动关闭服务器</h2>
<pre><code class="language-go">	//优雅的启动服务器
	host := &quot;127.0.0.1&quot;
	port := conf.ConfStruct.System.Port
	srv := http.Server{
		Addr:    fmt.Sprintf(&quot;%s:%d&quot;, host, port),
		Handler: r,
	}
	//在goroutine 中初始化服务器,以便它不会阻止下面的优雅关闭处理
	go func() {
		if err := srv.ListenAndServe(); err != nil &amp;&amp; err != http.ErrServerClosed {
			global.Log.Error(&quot;listen error :&quot;, err)
		}
	}()
	//等待中断信号来优雅的关闭服务器,为关闭服务器操作设置一个5秒的超时
	//首先定义一个chan传递信号量,
	//然后说明哪些信号量是需要被捕获的(不填的话就默认捕获任何信号量)
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	&lt;-quit //阻塞在此,当接收到上述两种信号时才会往下执行
	global.Log.Info(&quot;shutting down server....&quot;)
	//创建一个5秒超时的context
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	//go 1.8版本后,http.server内置的shutdown()方法就支持优雅的关机
	if err := srv.Shutdown(ctx); err != nil {
		global.Log.Fatal(&quot;server shutdown:&quot;, err)
	}
	global.Log.Info(&quot;server exiting&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[{go} go程的三种处理方式]]></title>
        <id>https://bluegrasses.github.io/post/go-go-cheng-de-san-chong-chu-li-fang-shi/</id>
        <link href="https://bluegrasses.github.io/post/go-go-cheng-de-san-chong-chu-li-fang-shi/">
        </link>
        <updated>2021-07-24T23:58:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1waitgroup">1.waitgroup</h2>
<blockquote>
<p>多个goroutine执行同一件事,多个go程统一完成后执行</p>
</blockquote>
<pre><code class="language-go">func main() {
	var wg sync.WaitGroup
	wg.Add(2)
	go func() {
		time.Sleep(2 * time.Second)
		fmt.Println(&quot;job 1 done.&quot;)
		wg.Done()
	}()
	go func() {
		time.Sleep(1 * time.Second)
		fmt.Println(&quot;job 2 done.&quot;)
		wg.Done()
	}()
	wg.Wait()
	fmt.Println(&quot;all done&quot;)
}
</code></pre>
<p>执行结果:<br>
job 2 done.<br>
job 1 done.<br>
all done</p>
<h2 id="2channelselect">2.channel+select</h2>
<blockquote>
<p>主动执行停止</p>
</blockquote>
<pre><code class="language-go">	stop := make(chan bool)
	go func() {
		for {
			select {
			case &lt;-stop:
				fmt.Println(&quot;got the stop channel&quot;)
				return
			default:
				fmt.Println(&quot;still working&quot;)
				time.Sleep(1 * time.Second)
			}
		}
	}()
	time.Sleep(5 * time.Second)
	fmt.Println(&quot;stop the gorutine&quot;)
	stop &lt;- true
	time.Sleep(5 * time.Second)
</code></pre>
<p>执行结果:<br>
still working<br>
still working<br>
still working<br>
still working<br>
still working<br>
stop the gorutine<br>
got the stop channel</p>
<h2 id="context">context</h2>
<blockquote>
<p>处理复杂的gorutine使用context而不是channel</p>
</blockquote>
<pre><code class="language-go">func main() {
	ctx, cancel := context.WithCancel(context.Background())
	go work(ctx, &quot;node1&quot;)
	go work(ctx, &quot;node2&quot;)
	go work(ctx, &quot;node3&quot;)
	time.Sleep(5 * time.Second)
	fmt.Println(&quot;stop the gorutine&quot;)
	cancel()
	time.Sleep(5 * time.Second)
}

func work(ctx context.Context, name string) {
	go func() {
		for {
			select {
			case &lt;-ctx.Done():
				fmt.Println(name, &quot;got the stop channel&quot;)
				return
			default:
				fmt.Println(name, &quot;still working&quot;)
				time.Sleep(1 * time.Second)
			}
		}
	}()
}
</code></pre>
<p>执行结果:<br>
node2 still working<br>
node3 still working<br>
node1 still working<br>
node2 still working<br>
stop the gorutine<br>
node1 got the stop channel<br>
node2 got the stop channel<br>
node3 got the stop channel</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang 资源大全]]></title>
        <id>https://bluegrasses.github.io/post/golang-zi-yuan-da-quan/</id>
        <link href="https://bluegrasses.github.io/post/golang-zi-yuan-da-quan/">
        </link>
        <updated>2021-06-16T14:31:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="awesome-go">Awesome Go</h2>
<h3 id="音频和音乐">音频和音乐</h3>
<blockquote>
<p>用于操作音频的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/mewkiz/flac">flac</a> – 原生 Go FLAC 编码器/解码器，支持 FLAC 流</li>
<li><a href="https://github.com/Comcast/gaad">gaad</a> – 原生 Go AAC 比特流解析器</li>
<li><a href="https://github.com/krig/go-sox">go-sox</a> – 在 Go 中使用 libsox</li>
<li><a href="https://github.com/DylanMeeus/GoAudio">GoAudio</a> – 原生 Go 音频处理库</li>
<li><a href="https://github.com/dh1tw/gosamplerate">gosamplerate</a> – 在 Go 中使用 libsamplerate</li>
<li><a href="https://github.com/bogem/id3v2">id3v2</a> – Go ID3 编解码库</li>
<li><a href="https://github.com/gen2brain/malgo">malgo</a> – 在 Go 中使用 MiniAudio 库</li>
<li><a href="https://github.com/tosone/minimp3">minimp3</a> – 轻量级 MP3 解码器库</li>
<li><a href="https://github.com/go-mix/mix">mix</a> – 用于音乐应用的、基于时序的 Go 原生音频混音器</li>
<li><a href="https://github.com/tcolgate/mp3">mp3</a> – 原生 Go MP3 解码器</li>
<li><a href="https://github.com/go-music-theory/music-theory">music-theory</a> – Go 语言音乐理论模型</li>
<li><a href="https://github.com/hajimehoshi/oto">Oto</a> – 一个在多平台上播放声音的低级库</li>
<li><a href="https://github.com/gordonklaus/portaudio">PortAudio</a> – 在 Go 中使用 PortAudio 音频 I/O 库</li>
<li><a href="https://github.com/rakyll/portmidi">portmidi</a> – 在 Go 中使用 PortMidi</li>
<li><a href="https://github.com/mccoyst/vorbis">vorbis</a> – 原生 Go Vorbis 解码器（使用 CGO，但是没有依赖）</li>
<li><a href="https://github.com/mdlayher/waveform">waveform</a> – 能够从音频流中生成波形图的 Go 扩展包</li>
</ul>
<h3 id="认证和-oauth">认证和 OAuth</h3>
<blockquote>
<p>实现认证方案的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/volatiletech/authboss">authboss</a> – Web 模块化认证系统（这是一个适用于 Go Web 项目的用户认证解决方案，每次启动一个新的 Go Web 项目时，你只需要安装这个库并进行配置，就可以为该项目提供认证功能了，而不需要每次自己手动去实现）</li>
<li><a href="https://github.com/hako/branca">branca</a> – 在 Golang 中实现的 Branca Tokens</li>
<li><a href="https://github.com/hsluoyz/casbin">casbin</a> – 支持访问控制模型（例如 ACL、RBAC、ABAC）的认证库</li>
<li><a href="https://github.com/mengzhuo/cookiestxt">cookiestxt</a> – cookies.txt 文件格式解析器</li>
<li><a href="https://github.com/dimuska139/go-email-normalizer">go-email-normalizer</a> – 用于提供 Email 地址规范表示的 Golang 库</li>
<li><a href="https://github.com/shaj13/go-guardian">go-guardian</a> – Go-Guardian 库提供了简单、干净、惯用的方法来构建强大的现代 API 和 Web 认证，支持 LDAP、Basic、Bearer Token 和基于证书的认证</li>
<li><a href="https://github.com/square/go-jose">go-jose</a> – 完整地实现了 JOSE 工作组的JSON Web Token、JSON Web Signatures 和 JSON Web Encryption 规范</li>
<li><a href="https://github.com/RichardKnop/go-oauth2-server">go-oauth2-server</a> – 独立的、符合规范的、用 Golang 实现的 OAuth2 服务器</li>
<li><a href="https://github.com/dghubble/gologin">gologin</a> – 通过 OAuth1 和 OAuth2 认证提供者进行登录认证的链式处理器</li>
<li><a href="https://github.com/mikespook/gorbac">gorbac</a> – 基于 Golang 的轻量级 RBAC 实现</li>
<li><a href="https://github.com/markbates/goth">goth</a> – 提供了简单、干净、惯用的方式使用 OAuth 和 OAuth2，开箱支持处理多个提供者</li>
<li><a href="https://github.com/goji/httpauth">httpauth</a> – HTTP Basic Authentication 中间件</li>
<li><a href="https://github.com/abraithwaite/jeff">jeff</a> – 通过可插拔的后端实现简单、灵活、安全、惯用的 Web 会话（Session）管理</li>
<li><a href="https://github.com/robbert229/jwt">jwt</a> – 干净且易于上手的 JWT（JSON Web Tokens）实现</li>
<li><a href="https://github.com/pascaldekloe/jwt">jwt</a> – 轻量级 JSON Web Token (JWT) 库</li>
<li><a href="https://github.com/cristalhq/jwt">jwt</a> – 安全、简单、快速的 JSON Web Tokens 实现</li>
<li><a href="https://github.com/adam-hanna/jwt-auth">jwt-auth</a> – 适用于 Golang HTTP 服务器的 JWT 中间件，支持多个配置项</li>
<li><a href="https://github.com/dgrijalva/jwt-go">jwt-go</a> – Golang 版 JSON Web Tokens (JWT) 实现</li>
<li><a href="https://github.com/tarent/loginsrv">loginsrv</a> – 使用可插拔的后端通过 JWT 登录微服务（支持 OAuth2 (Github)、htpasswd、osiam）</li>
<li><a href="https://github.com/golang/oauth2">oauth2</a> – goauth2 的继承者，通用 OAuth 2.0 包，自带 JWT、Google APIs、计算引擎和 App Engine 支持</li>
<li><a href="https://github.com/openshift/osin">osin</a> – Golang OAuth2 服务器库</li>
<li><a href="https://github.com/jltorresm/otpgo">otpgo</a> – Golang 版 Time-Based One-Time Password (TOTP) 和 HMAC-Based One-Time Password (HOTP) 库</li>
<li><a href="https://github.com/o1egl/paseto">paseto</a> – Golang 版 Platform-Agnostic Security Tokens (PASETO)</li>
<li><a href="https://github.com/xyproto/permissions2">permissions2</a> – 追踪用户、登录状态和权限的库，使用安全的 cookies 和 bcrypt</li>
<li><a href="https://github.com/zpatrick/rbac">rbac</a> – 适用于 Go 应用的最小化 RBAC 包</li>
<li><a href="https://github.com/SonicRoshan/scope">scope</a> – 在 Go 中轻松管理 OAuth2 作用域</li>
<li><a href="https://github.com/alexedwards/scs">scs</a> – HTTP 服务器 Session 管理器</li>
<li><a href="https://github.com/chmike/securecookie">securecookie</a> – 高效安全的 cookie 编码/解码</li>
<li><a href="https://github.com/icza/session">session</a> – Go Web 服务器 Session 管理</li>
<li><a href="https://github.com/f0rmiga/sessiongate-go">sessiongate-go</a> – 基于 SessionGate Redis 模块的 Go Session 管理</li>
<li><a href="https://github.com/adam-hanna/sessions">sessions</a> – 为 Go HTTP 服务器提供简单、高性能、高度可定制的会话服务</li>
<li><a href="https://github.com/swithek/sessionup">sessionup</a> – 简单高效的 HTTP Session 管理和识别包</li>
<li><a href="https://github.com/brianvoe/sjwt">sjwt</a> – 简单的 jwt 生成器和解析器</li>
</ul>
<h3 id="构建机器人">构建机器人</h3>
<blockquote>
<p>用于构建和使用机器人的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/ewohltman/ephemeral-roles">ephemeral-roles</a> – 一个 Discord 机器人，用于管理基于语音存在频道成员的短暂角色</li>
<li><a href="https://github.com/go-chat-bot/bot">go-chat-bot</a> – 基于 Go 实现的 IRC、Slack &amp; Telegram 机器人</li>
<li><a href="https://joe-bot.net/">go-joe</a> – 一个受 Hubot 启发但用 Go 编写的通用型机器人库</li>
<li><a href="https://github.com/oklahomer/go-sarah">go-sarah</a> – 为聊天服务构建机器人的框架，包括 LINE、Slack、Gitter 等</li>
<li><a href="https://github.com/olebedev/go-tgbot">go-tgbot</a> – 纯粹的 Golang Telegram Bot API 封装库，由 Swagger 文件、基于会话的路由器和中间件生成</li>
<li><a href="https://github.com/gempir/go-twitch-irc">go-twitch-irc</a> – 为 twitch.tv 聊天编写机器人的库</li>
<li><a href="https://github.com/saniales/golang-crypto-trading-bot">Golang CryptoTrading Bot</a> – 一个基于控制台的加密货币交易所交易机器人的 Golang 实现</li>
<li><a href="https://github.com/nikepan/govkbot">govkbot</a> – 简单的 Go <a href="https://vk.com/">VK</a> 机器人库</li>
<li><a href="https://github.com/sbstjn/hanu">hanu</a> – 用于编写 Slack 机器人的框架</li>
<li><a href="https://github.com/stellar/kelp">Kelp</a> – <a href="https://www.stellar.org/">Stellar</a> DEX 的官方交易和做市机器人，开箱即用，用 Golang 编写，兼容中心化交易所和自定义交易策略</li>
<li><a href="https://github.com/zhulik/margelet">margelet</a> – 构建 Telegram 机器人的框架</li>
<li><a href="https://github.com/onrik/micha">micha</a> – Telegram 机器人 API</li>
<li><a href="https://github.com/olivia-ai/olivia">olivia</a> – 用人工神经网络构建的聊天机器人</li>
<li><a href="https://github.com/shomali11/slacker">slacker</a> – 用于创建 Slack 机器人的易于使用的框架</li>
<li><a href="https://github.com/alexandre-normand/slackscot">slackscot</a> – 另一个用于构建 Slack 机器人的框架</li>
<li><a href="https://github.com/yanzay/tbot">tbot</a> – 和 net/http 类似的 Telegram 机器人服务器 API</li>
<li><a href="https://github.com/tucnak/telebot">telebot</a> – 基于 Go 实现的 Telegram 机器人框架</li>
<li><a href="https://github.com/Syfaro/telegram-bot-api">telegram-bot-api</a> – 简单干净的 Telegram 机器人客户端</li>
<li><a href="https://github.com/kyleterry/tenyks">Tenyks</a> – 面向服务的 IRC 机器人，使用 Redis 和 JSON 作为消息系统</li>
</ul>
<h3 id="构建自动化">构建自动化</h3>
<blockquote>
<p>构建自动化流程的库和工具</p>
</blockquote>
<ul>
<li><a href="https://github.com/gopinath-langote/1build">1build</a> – 用于管理项目特定命令的命令行工具</li>
<li><a href="https://github.com/maxcnunes/gaper">gaper</a> – 在 Go 项目崩溃或者某些文件修改后构建并重启该项目</li>
<li><a href="https://go-gilbert.github.io/">gilbert</a> – Go 项目系统和任务运行器</li>
<li><a href="https://github.com/tj/mmake">mmake</a> – 现代的 Make 工具</li>
<li><a href="https://github.com/tockins/realize">realize</a> – 具备文件监视和实时重载功能的 Go 构建系统，你可以基于自定义路径运行、构建并监视文件修改</li>
<li><a href="https://github.com/go-task/task">Task</a> – 简单的 “Make” 替代方案</li>
<li><a href="https://github.com/taskctl/taskctl">taskctl</a> – 并行任务运行器</li>
<li><a href="https://github.com/pellared/taskflow">taskflow</a> – 使用 Go 创建构建管道</li>
</ul>
<h3 id="命令行">命令行</h3>
<h4 id="标准-cli">标准 CLI</h4>
<blockquote>
<p>用于构建标准或者基本命令行应用的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/akamensky/argparse">argparse</a> – 受到 Python argparse 模块启发的命令行参数解析器</li>
<li><a href="https://github.com/cosiner/argv">argv</a> – 使用 bash 语法将命令行字符串分割为参数数组的库</li>
<li><a href="https://github.com/mkideal/cli">cli</a> – 基于 Golang 结构体标签实现的功能丰富且易于使用的的命令行包</li>
<li><a href="https://github.com/teris-io/cli">cli</a> – 用于构建命令行界面的简单但完整的 API</li>
<li><a href="http://github.com/tucnak/climax">climax</a> – 另一种带有 “人情味 “的CLI，秉承 Go Command 的精神</li>
<li><a href="https://github.com/leaanthony/clir">clîr</a> – 一个简单清晰的 CLI 库，无任何依赖</li>
<li><a href="https://github.com/posener/cmd">cmd</a> – 扩展标准的 <code>flag</code> 包以支持子命令以及更多</li>
<li><a href="https://github.com/hedzr/cmdr">cmdr</a> – POSIX/GNU 风格的、类似 getopt 的命令行界面</li>
<li><a href="https://github.com/spf13/cobra">cobra</a> – 用于现代 Go CLI 交互的Commander</li>
<li><a href="https://github.com/jaffee/commandeer">commandeer</a> – 开发友好的 CLI 应用：基于结构体字段和标签设置标志、默认值和用法</li>
<li><a href="https://github.com/posener/complete">complete</a> – 通过 Go + Go 命令编写 bash 完成功能</li>
<li><a href="https://github.com/dnote/dnote">Dnote</a> – 一个简单的命令行笔记本，支持多设备同步</li>
<li><a href="https://github.com/codingconcepts/env">env</a> – 基于标签的结构体环境配置</li>
<li><a href="https://github.com/cosiner/flag">flag</a> – 简单但功能强大的 Go 命令行选项解析库，支持子命令</li>
<li><a href="https://github.com/integrii/flaggy">flaggy</a> – 一个强大的、习惯性的标志包，具有出色的子命令支持</li>
<li><a href="https://github.com/sgreben/flagvar">flagvar</a> – Go 标准 <code>flag</code> 包的标志参数类型集合</li>
<li><a href="https://github.com/alexflint/go-arg">go-arg</a> – 基于结构体的参数解析</li>
<li><a href="https://github.com/yitsushi/go-commander">go-commander</a> – 简化 CLI 工作流的 Go 库</li>
<li><a href="https://github.com/jessevdk/go-flags">go-flags</a> – Go 命令行选项解析器</li>
<li><a href="https://github.com/DavidGamba/go-getoptions">go-getoptions</a> – 受 Perl GetOpt::Long 的灵活性启发的 Go 选项解析器</li>
<li><a href="https://github.com/devfacet/gocmd">gocmd</a> – 用于构建命令行应用的 Go 库</li>
<li><a href="https://github.com/hidevopsio/hiboot/tree/master/pkg/app/cli">hiboot cli</a> – cli 应用框架，支持自动配置和依赖注入</li>
<li><a href="https://github.com/liujianping/job">job</a> – JOB，把你的短期命令作为长期工作</li>
<li><a href="https://github.com/alecthomas/kingpin">kingpin</a> – 支持子命令的命令行和标志解析器</li>
<li><a href="https://github.com/peterh/liner">liner</a> – 用于命令行界面的类似于读行的库</li>
<li><a href="https://github.com/mitchellh/cli">mitchellh/cli</a> – 用于实现命令行界面的 Go 库</li>
<li><a href="https://github.com/jawher/mow.cli">mow.cli</a> – 用于构建 CLI 应用的 Go 库，具有复杂的标志、参数解析和验证功能</li>
<li><a href="https://github.com/nanovms/ops">ops</a> – Unikernel 构建器/编排器</li>
<li><a href="https://github.com/spf13/pflag">pflag</a> – 插拔式替换 Go <code>flag</code> 包，实现了 POSIX/GNU 风格的 <code>--flags</code></li>
<li><a href="https://github.com/Zaba505/sand">sand</a> – 用于创建解释器等功能的简单 API</li>
<li><a href="https://github.com/octago/sflags">sflags</a> – 基于结构体的 flag 生成器，可用于 flag、urfave/cli、pflag、cobra、kingpin 和其他库</li>
<li><a href="https://github.com/antham/strumt">strumt</a> – 用于创建提示链的库</li>
<li><a href="https://github.com/liujianping/ts">ts</a> – 时间戳转换 &amp; 比较工具</li>
<li><a href="https://github.com/ukautz/clif">ukautz/clif</a> – 小型命令行界面框架</li>
<li><a href="https://github.com/urfave/cli">urfave/cli</a> – 简单、快速、有趣的包，用于在Go（以前是 codegangsta/cli）中构建命令行应用</li>
<li><a href="https://github.com/dixonwille/wlog">wlog</a> – 简单的日志接口，支持跨平台的颜色和并发</li>
<li><a href="https://github.com/dixonwille/wmenu">wmenu</a> – 易于使用的菜单结构，用于在 CLI 应用中提示用户做出选择</li>
</ul>
<h4 id="高级命令-ui">高级命令 UI</h4>
<blockquote>
<p>用于构建控制台应用和控制台用户界面的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/guptarohit/asciigraph">asciigraph</a> – 用于在命令行应用中创建轻量级 ASCII 行图 ╭┈╯ 的 Go 库，没有其他依赖</li>
<li><a href="https://github.com/logrusorgru/aurora">aurora</a> – ANSI 控制台颜色，支持 fmt.Printf/Sprintf</li>
<li><a href="https://github.com/mingrammer/cfmt">cfmt</a> – 受 Bootstrap 颜色类启发的上下文 fmt</li>
<li><a href="https://github.com/i582/cfmt">cfmt</a> – 简单方便的格式化风格输出，完全兼容 fmt 库。</li>
<li><a href="https://github.com/ttacon/chalk">chalk</a> – 直观的终端/控制台输出美化预处理包</li>
<li><a href="https://github.com/TreyBastian/colourize">colourize</a> – 在终端中使用 ANSI 彩色文本的 Go 库</li>
<li><a href="https://github.com/wzshiming/ctc">ctc</a> – 非侵入性跨平台终端彩库，不需要修改打印方法</li>
<li><a href="https://github.com/workanator/go-ataman">go-ataman</a> – 用于在终端中渲染 ANSI 彩色文本模板的 Go 库</li>
<li><a href="https://github.com/mattn/go-colorable">go-colorable</a> – 为 Windows 提供的可着色书写器</li>
<li><a href="https://github.com/daviddengcn/go-colortext">go-colortext</a> – 在终端中实现彩色输出的 Go 库</li>
<li><a href="https://github.com/mattn/go-isatty">go-isatty</a> – Golang 版 isatty</li>
<li><a href="https://github.com/c-bata/go-prompt">go-prompt</a> – 受<a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a>的启发，用于构建一个强大的交互式提示库</li>
<li><a href="https://github.com/jroimartin/gocui">gocui</a> – 旨在创建控制台用户界面的最小化 Go 库</li>
<li><a href="https://github.com/labstack/gommon/tree/master/color">gommon/color</a> – 风格化终端文本样式</li>
<li><a href="https://github.com/gookit/color">gookit/color</a> – 终端色彩渲染工具库，支持 16 色、256 色、RGB 色彩渲染输出，兼容 Windows</li>
<li><a href="https://github.com/vbauerster/mpb">mpb</a> – 适用于终端应用的多进度条</li>
<li><a href="https://github.com/schollz/progressbar">progressbar</a> – 基本的线程安全进度条，适用于所有操作系统</li>
<li><a href="https://github.com/pterm/pterm">pterm</a> – 一个在每个平台上美化控制台输出的库，有许多可组合的组件</li>
<li><a href="https://github.com/alexeyco/simpletable">simpletable</a> – 在 Go 终端应用中输出简单表格</li>
<li><a href="https://github.com/cheynewallace/tabby">tabby</a> – 一个超级简单的 Golang 表格库</li>
<li><a href="https://github.com/tomlazar/table">table</a> – 基于终端色彩的表格库</li>
<li><a href="https://github.com/InVisionApp/tabular">tabular</a> – 通过命令行实用工具打印 ASCII 表，而不需要将大量数据传递给 API</li>
<li><a href="https://github.com/nsf/termbox-go">termbox-go</a> – Termbox 是一个用于创建跨平台文本界面的库</li>
<li><a href="https://github.com/mum4k/termdash">termdash</a> – 基于<strong>termbox-go</strong>的 Go 终端仪表盘，灵感来源于<a href="https://github.com/gizak/termui">termui</a>。</li>
<li><a href="https://github.com/gizak/termui">termui</a> – 基于<strong>termbox-go</strong>的 Go 终端仪表盘，灵感来源于<a href="https://github.com/yaronn/blessed-contrib">blessed-contrib</a></li>
<li><a href="https://github.com/gosuri/uilive">uilive</a> – 用于实时更新终端输出的库</li>
<li><a href="https://github.com/gosuri/uiprogress">uiprogress</a> – 在终端应用中渲染进度条的灵活库</li>
<li><a href="https://github.com/gosuri/uitable">uitable</a> – 提高终端应用中表格数据可读性的库</li>
<li><a href="https://github.com/theckman/yacspin">yacspin</a> – 又一个 CLi Spinner 包，用于处理终端旋转</li>
</ul>
<h3 id="配置">配置</h3>
<blockquote>
<p>用于配置解析的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/cristalhq/aconfig">aconfig</a> – 简单、实用、有见解的配置加载器</li>
<li><a href="https://github.com/ilyakaznacheev/cleanenv">cleanenv</a> – 简约的配置读取器（来自文件、ENV 以及任何你想要的地方）</li>
<li><a href="https://github.com/golobby/config">config</a> – 轻量级但功能强大的 Go 项目配置包</li>
<li><a href="https://github.com/JeremyLoy/config">config</a> – 云端原生应用配置，只需两行就可以将 ENV 绑定到结构体中</li>
<li><a href="https://github.com/olebedev/config">config</a> – 带有环境变量和标志解析的 JSON 或 YAML 配置封装器</li>
<li><a href="https://github.com/BoRuDar/configuration">configuration</a> – 用于从环境变量、文件、标志和”默认”标签初始化配置结构体的库</li>
<li><a href="https://github.com/paked/configure">configure</a> – 通过多个源提供配置，包括 JSON、标志和环境变量</li>
<li><a href="https://github.com/sherifabdlnaby/configuro">configuro</a> – 来自 ENV 和文件的意见性配置加载和验证框架，专注于兼容 12-Factor 的应用</li>
<li><a href="https://github.com/heetch/confita">confita</a> – 将多个后台的配置以级联方式加载到一个结构体中</li>
<li><a href="https://github.com/the4thamigo-uk/conflate">conflate</a> – 用于从任意 URL 中合并多个 JSON/YAML/TOML 文件，对 JSON 模式进行验证，并应用模式中定义的默认值的库</li>
<li><a href="https://github.com/caarlos0/env">env</a> – 将环境变量解析到 Go 结构体（带默认值）</li>
<li><a href="https://github.com/tomazk/envcfg">envcfg</a> – 将环境变量解析到 Go 结构体</li>
<li><a href="https://github.com/ian-kent/envconf">envconf</a> – 通过环境变量进行配置</li>
<li><a href="https://github.com/vrischmann/envconfig">envconfig</a> – 从环境变量读取配置</li>
<li><a href="https://github.com/antham/envh">envh</a> – 管理环境变量的辅助函数</li>
<li><a href="https://github.com/kkyr/fig">fig</a> – 用于从文件和环境变量中读取配置的小型库（带有验证和默认值）</li>
<li><a href="https://github.com/go-gcfg/gcfg">gcfg</a> – 将 INI 风格的配置文件读取到 Go 结构体中，支持用户自定义类型和子项</li>
<li><a href="https://github.com/sakirsensoy/genv">genv</a> – 在 dotenv 的支持下，轻松读取环境变量</li>
<li><a href="https://github.com/PaddleHQ/go-aws-ssm">go-aws-ssm</a> – 从 AWS System Manager – Parameter Store 获取参数的 Go 包</li>
<li><a href="https://github.com/subpop/go-ini">go-ini</a> – 一个用于解析和反解析 INI 文件的 Go 包</li>
<li><a href="https://github.com/ianlopshire/go-ssm-config">go-ssm-config</a> – 用于从 AWS SSM（Parameter Store）加载配置参数的 Go 工具</li>
<li><a href="https://github.com/ufoscout/go-up">go-up</a> – 一个简单的配置库，具有递归占位符解析功能</li>
<li><a href="https://github.com/crgimenes/goConfig">goConfig</a> – 将一个结构体作为输入解析，并将命令行、环境变量和配置文件中的参数填充到该结构体的字段中</li>
<li><a href="https://github.com/joho/godotenv">godotenv</a> – 移植 Ruby 的 dotenv 库到 Go（从 <code>.env</code> 中加载环境变量）</li>
<li><a href="https://github.com/ian-kent/gofigure">gofigure</a> – 让 Go 应用配置变得简单</li>
<li><a href="https://github.com/One-com/gone/tree/master/jconf">gone/jconf</a> – 模块化 JSON 配置，将你的配置结构和它们配置的代码一起保存，并将解析工作委托给子模块，而不牺牲完整的配置序列化</li>
<li><a href="https://github.com/gookit/config">gookit/config</a> – 应用配置管理（加载、读取、设置），支持 JSON、YAML、TOML、INI、HCL 等多种文件的加载和数据覆盖合并</li>
<li><a href="https://github.com/beatlabs/harvester">harvester</a> – Harvester 是一个易于使用的静态和动态配置包，支持数据填充、环境变量和 Consul 集成</li>
<li><a href="https://github.com/hjson/hjson-go">hjson</a> – Human JSON，一种适合人类的配置文件格式，放宽语法、减少错误、增加注释</li>
<li><a href="https://github.com/gurkankaymak/hocon">hocon</a> – 支持环境变量、引用其他值、注释和多文件等功能的 HOCON（对人友好的 JSON 超集）格式的配置库</li>
<li><a href="https://github.com/schachmat/ingo">ingo</a> – 在一个类似于 ini 的配置文件中保留标志</li>
<li><a href="https://github.com/go-ini/ini">ini</a> – 读写 INI 文件的 Go 包</li>
<li><a href="https://github.com/joshbetz/config">joshbetz/config</a> – 适用于 Go 的小型配置库，可以解析环境变量、JSON 文件，并在 SIGHUP 时自动重载</li>
<li><a href="https://github.com/kelseyhightower/envconfig">kelseyhightower/envconfig</a> – 用于管理环境变量配置数据的 Go 库</li>
<li><a href="https://github.com/knadh/koanf">koanf</a> – 轻量级、可扩展的库，用于读取 Go 应用程序中的配置，内置支持 JSON、TOML、YAML、env、命令行</li>
<li><a href="https://github.com/lalamove/konfig">konfig</a> – 为分布式处理时代的 Go 提供可组合、可观察和可执行的配置处理</li>
<li><a href="https://github.com/sasbury/mini">mini</a> – 用于解析 ini 风格配置文件的 Golang 包</li>
<li><a href="https://github.com/nasermirzaei89/env">nasermirzaei89/env</a> – 简单实用的读取环境变量的包</li>
<li><a href="http://github.com/goraz/onion">onion</a> – 基于层的 Go 配置库，支持 JSON、TOML、YAML、properties、etcd、env 并且使用 PGP 加密</li>
<li><a href="https://github.com/tucnak/store">store</a> – 针对 Go 的轻量级配置管理器</li>
<li><a href="https://github.com/oblq/swap">swap</a> – 基于构建环境，递归地实例化/配置结构体（支持 YAML、TOML、JSON 和 env）</li>
<li><a href="https://github.com/diegomarangoni/typenv">typenv</a> – 简约、零依赖、类型化的环境变量库</li>
<li><a href="https://github.com/spf13/viper">viper</a> – 功能强大的 Go 配置库</li>
<li><a href="https://github.com/OpenPeeDeeP/xdg">xdg</a> – 遵循 <a href="https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html">XDG 标准</a> 的跨平台包</li>
</ul>
<h3 id="持续集成">持续集成</h3>
<blockquote>
<p>持续集成辅助工具</p>
</blockquote>
<ul>
<li><a href="https://github.com/ovh/cds">CDS</a> – 企业级 CI/CD 和 DevOps 自动化开源平台</li>
<li><a href="https://github.com/drone/drone">drone</a> – Drone 是一个通过 Go 编写的、建立在 Docker 之上的持续集成平台</li>
<li><a href="https://github.com/duck8823/duci">duci</a> – 一个简单的 CI 服务器，不需要特定的领域语言</li>
<li><a href="https://github.com/nikogura/gomason">gomason</a> – 从一个干净的工作空间测试、构建、签署和发布你的 Go 二进制文件</li>
<li><a href="https://github.com/mattn/goveralls">goveralls</a> – 在 Go 中集成 Coveralls.io 持续代码覆盖跟踪系统</li>
<li><a href="https://github.com/go-playground/overalls">overalls</a> – 类似于 goveralls 的多包 Go 项目</li>
<li><a href="https://github.com/LawrenceWoodman/roveralls">roveralls</a> – 递归式覆盖测试工具</li>
</ul>
<h3 id="css-预处理">CSS 预处理</h3>
<blockquote>
<p>预处理 CSS 文件的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/yosssi/gcss">gcss</a> – 纯粹的 Go CSS 预处理器</li>
<li><a href="https://github.com/wellington/go-libsass">go-libsass</a> – 100% 兼容 Sass libsass 项目的 Go 封装器</li>
</ul>
<h3 id="数据结构">数据结构</h3>
<blockquote>
<p>通用数据结构和算法的 Go 实现</p>
</blockquote>
<ul>
<li><a href="https://github.com/shady831213/algorithms">algorithms</a> – Go 实现的算法和数据结构大全</li>
<li><a href="https://github.com/zhuangsirui/binpacker">binpacker</a> – 帮助用户建立自定义二进制流的二进制打包器和解包器</li>
<li><a href="https://github.com/yourbasic/bit">bit</a> – Golang Set 数据结构，具有额外的位转功能</li>
<li><a href="https://github.com/willf/bitset">bitset</a> – 实现了 bitsets 的 Go 扩展包</li>
<li><a href="https://github.com/zhenjl/bloom">bloom</a> – 布隆过滤器的 Go 语言实现</li>
<li><a href="https://github.com/yourbasic/bloom">bloom</a> – Golang 布隆过滤器实现</li>
<li><a href="https://github.com/tylertreat/BoomFilters">boomfilters</a> – 用于处理连续的、无边界流的概率论数据结构</li>
<li><a href="https://github.com/lrita/cmap">cmap</a> – Go 线程安全并发字典，支持使用 <code>interface{}</code> 作为键，并自动扩展分片</li>
<li><a href="https://github.com/free/concurrent-writer">concurrent-writer</a> – 高并发下 <code>bufio.Writer</code> 的替代方案</li>
<li><a href="https://github.com/InVisionApp/conjungo">conjungo</a> – 小巧、强大、灵活的合并库</li>
<li><a href="https://github.com/seiflotfy/count-min-log">count-min-log</a> – Count-Min-Log Go 实现草图，用近似计数器进行近似计数（类似于 Count-Min 草图，但使用更少的内存）</li>
<li><a href="https://github.com/superwhiskers/crunch">crunch</a> – 实现缓冲区的 Go 包，便于处理各种数据类型</li>
<li><a href="https://github.com/seiflotfy/cuckoofilter">cuckoofilter</a> – Cuckoo 过滤器：是 Go 中实现的布隆过滤器的一个很好的替代方案</li>
<li><a href="https://github.com/edwingeng/deque">deque</a> – 高度优化的双端队列</li>
<li><a href="https://github.com/gammazero/deque">deque</a> – 快速环形缓冲区 deque（双端队列）</li>
<li><a href="https://github.com/srfrog/dict">dict</a> – 类似于 Python 的 Go 字典（dict）</li>
<li><a href="https://github.com/zhenjl/encoding">encoding</a> – 为 Go 设计的整数压缩库</li>
<li><a href="https://github.com/plar/go-adaptive-radix-tree">go-adaptive-radix-tree</a> – 自适应 Radix 树的 Go 实现</li>
<li><a href="https://github.com/Workiva/go-datastructures">go-datastructures</a> – 实用的、高性能的、线程安全的数据结构集合</li>
<li><a href="https://github.com/hbollon/go-edlib">go-edlib</a> – 兼容 Unicode 的 Go 字符串比较和编辑距离算法库（Levenshtein、LCS、Hamming、Damerau levenshtein、Jaro-Winkler 等）</li>
<li><a href="https://github.com/amallia/go-ef">go-ef</a> – Elias-Fano 编码的 Go 实现</li>
<li><a href="https://github.com/hailocab/go-geoindex">go-geoindex</a> – 内存地理位置（geo）索引</li>
<li><a href="https://github.com/OrlovEvgeny/go-mcache">go-mcache</a> – 内存键值对存储/缓存库</li>
<li><a href="https://github.com/aurelien-rainone/go-rquad">go-rquad</a> – 具有高效的点定位和邻接查找功能的区域四叉树</li>
<li><a href="https://github.com/eko/gocache">gocache</a> – 一个完整的 Go 缓存库，支持多个存储驱动（内存、memcache、redis…）、可链接、可加载、度量缓存等</li>
<li><a href="https://github.com/enriquebris/goconcurrentqueue">goconcurrentqueue</a> – 并发 FIFO 队列实现</li>
<li><a href="https://github.com/emirpasic/gods">gods</a> – Go 数据结构大全，包含容器、集合、列表、栈、字典、位图、树、HashSet 等</li>
<li><a href="https://github.com/xxjwxc/gofal">gofal</a> – Go 小数 API</li>
<li><a href="https://github.com/deckarep/golang-set">golang-set</a> – 线程安全和非线程安全的高性能集合 Go 实现</li>
<li><a href="https://github.com/zoumo/goset">goset</a> – Go 集合实现大全</li>
<li><a href="https://github.com/ryszard/goskiplist">goskiplist</a> – Go 跳表实现</li>
<li><a href="https://github.com/liyue201/gostl">gostl</a> – Go 数据结构和算法实现库，用于提供类似 C++ STL 的功能</li>
<li><a href="https://github.com/kniren/gota">gota</a> – Go 数据框架、系列和数据整理方法的实现</li>
<li><a href="https://github.com/yaa110/goterator">goterator</a> – 用于提供 Map-Reduce 功能的迭代器实现</li>
<li><a href="https://github.com/emvi/hide">hide</a> – ID类型，带有 marshalling to/from hash 功能，以防止向客户端发送 ID</li>
<li><a href="https://github.com/google/hilbert">hilbert</a> – 用于将数值映射到空间填充曲线或从空间填充曲线中映射出来的 Go 软件包，例如 Hilbert 和 Peano 曲线</li>
<li><a href="https://github.com/axiomhq/hyperloglog">hyperloglog</a> – HyperLogLog 实现，带有稀疏、对数-贝塔偏置校正和 TailCut 空间缩小功能</li>
<li><a href="https://github.com/disksing/iter">iter</a> – Go 版本 C++ STL 迭代器和算法实现</li>
<li><a href="https://github.com/agext/levenshtein">levenshtein</a> – Levenshtein 距离和相似度量，具有可定制的编辑成本和类似 Winkler 的共同前缀</li>
<li><a href="https://github.com/agnivade/levenshtein">levenshtein</a> – 在 Go 中实现计算 levenshtein 距离</li>
<li><a href="https://github.com/cbergoon/merkletree">merkletree</a> – 实现 Merkle 树，为数据结构的内容提供高效、安全的验证</li>
<li><a href="https://github.com/BlackRabbitt/mspm">mspm</a> – 用于信息检索的多字符串模式匹配算法</li>
<li><a href="https://github.com/kak-tus/nan">nan</a> – 零分配可以为空的结构体，带有方便的转换函数、marshallers 和 unmarshallers</li>
<li><a href="https://github.com/emvi/null">null</a> – 可从 JSON 中 marshalled/unmarshalled 的 Nullable 类型</li>
<li><a href="https://github.com/MonaxGT/parsefields">parsefields</a> – 解析类 JSON 日志的工具，用于收集独特的字段和事件。</li>
<li><a href="https://github.com/hyfather/pipeline">pipeline</a> – 扇入扇出管道实现</li>
<li><a href="https://github.com/viant/ptrie">ptrie</a> – 前缀树实现</li>
<li><a href="https://github.com/rocketlaunchr/remember-go">remember-go</a> – 一个用于缓存慢速数据库查询的通用接口（支持 redis、memcached、ristretto 或内存缓存）</li>
<li><a href="https://github.com/TheTannerRyan/ring">ring</a> – Go 实现的高性能、线程安全的布隆过滤器</li>
<li><a href="https://github.com/RoaringBitmap/roaring">roaring</a> – 压缩 bitset 的 Go 实现包</li>
<li><a href="https://github.com/StudioSol/set">set</a> – 使用 LinkedHashMap 实现简单的的集合数据结构</li>
<li><a href="https://github.com/MauriceGit/skiplist">skiplist</a> – 非常快的 Go 跳表实现</li>
<li><a href="https://github.com/gansidui/skiplist">skiplist</a> – Go 跳表实现</li>
<li><a href="https://github.com/srfrog/slices">slices</a> – 操作切片的函数库，类似<code>package strings</code> 但支持处理切片</li>
<li><a href="https://github.com/zekroTJA/timedmap">timedmap</a> – 带有过期时间的键值对字典</li>
<li><a href="https://github.com/perdata/treap">treap</a> – 使用树堆实现的持久化、快速的有序字典</li>
<li><a href="https://github.com/derekparker/trie">trie</a> – Go 版本 Trie 树实现</li>
<li><a href="https://github.com/ReneKroon/ttlcache">ttlcache</a> – 内存级 string-interface{} 缓存，有各种基于时间的到期选项和回调</li>
<li><a href="https://github.com/gurukami/typ">typ</a> – 空类型，安全的基元类型转换和从复杂结构中取值</li>
<li><a href="https://github.com/willf/bloom">willf/bloom</a> – Go 版本布隆过滤器实现</li>
</ul>
<h3 id="数据库">数据库</h3>
<blockquote>
<p>基于 Go 实现的数据库</p>
</blockquote>
<ul>
<li><a href="https://github.com/dgraph-io/badger">badger</a> – 使用 Go 实现的快速键值存储库</li>
<li><a href="https://github.com/etcd-io/bbolt">bbolt</a> – Go 嵌入式键值数据库</li>
<li><a href="https://github.com/iwanbk/bcache">bcache</a> – 最终一致分布式内存缓存 Go 库</li>
<li><a href="https://github.com/allegro/bigcache">BigCache</a> – 为千兆字节级数据设计的高速键/值缓存</li>
<li><a href="https://github.com/prologic/bitcask">Bitcask</a> – Bitcask 是一个用纯 Go 编写的嵌入式的、持久的、快速的键值数据库，由于采用了 Bitcask 盘上布局（LSM+WAL），因此具有可预测的读写性能、低延迟和高吞吐量</li>
<li><a href="https://github.com/tidwall/buntdb">buntdb</a> – 快速、嵌入式的内存键值数据库，支持自定义索引和空间</li>
<li><a href="https://github.com/akyoto/cache">cache</a> – 内存键值缓存，有到期时间，零依赖，&lt;100 LoC，100% 覆盖</li>
<li><a href="https://github.com/muesli/cache2go">cache2go</a> – 内存键值缓存，支持基于超时的自动失效</li>
<li><a href="https://github.com/oaStuff/clusteredBigCache">clusteredBigCache</a> – BigCache，支持集群和单个项目过期</li>
<li><a href="https://github.com/cockroachdb/cockroach">cockroach</a> – 可扩展、支持异地复制、事务型数据存储</li>
<li><a href="https://github.com/claygod/coffer">Coffer</a> – 支持事务的简单 ACID 键值数据库</li>
<li><a href="https://github.com/codingsince1985/couchcache">couchcache</a> – 基于 Couchbase 服务器驱动的 RESTful 缓存微服务</li>
<li><a href="https://github.com/CovenantSQL/CovenantSQL">CovenantSQL</a> – CovenantSQL 是一个区块链上的 SQL 数据库</li>
<li><a href="https://github.com/paranoidguy/databunker">Databunker</a> – 个人身份信息（PII）存储服务，符合 GDPR 和 CCPA 的要求</li>
<li><a href="https://github.com/dgraph-io/dgraph">dgraph</a> – 可扩展、分布式、低延迟、高吞吐量的 Graph 数据库。</li>
<li><a href="https://github.com/peterbourgon/diskv">diskv</a> – 自制的支持磁盘备份的键值存储</li>
<li><a href="https://github.com/krotik/eliasdb">eliasdb</a> – 无依赖的、支持事务的 Graph 数据库，具有 REST API、短语搜索和类似 SQL 的查询语言</li>
<li><a href="https://github.com/VictoriaMetrics/fastcache">fastcache</a> – 为大量数据提供快速的线程安全内存缓存，最小化 GC 开销</li>
<li><a href="https://github.com/bluele/gcache">GCache</a> – 支持过期 Cache、LFU、LRU 和 ARC 的缓存库</li>
<li><a href="https://github.com/pmylund/go-cache">go-cache</a> – Go 实现的内存级键值存储库/缓存库（类似 Memcached），适合单机应用</li>
<li><a href="https://github.com/syndtr/goleveldb">goleveldb</a> – <a href="https://github.com/google/leveldb">LevelDB</a> 键值数据库的 Go 实现版本</li>
<li><a href="https://github.com/golang/groupcache">groupcache</a> – Groupcache 是一个缓存和缓存填充库，在很多情况下可以作为 Memcached 的替代品</li>
<li><a href="https://github.com/codenotary/immudb">immudb</a> – immudb 是一个轻量级的、高速的不可变数据库，适用于用 Go 编写的系统和应用程序</li>
<li><a href="https://github.com/influxdb/influxdb">influxdb</a> – 用于监控、事件和实时分析的可扩展数据存储库</li>
<li><a href="https://github.com/go-kivik/kivik">Kivik</a> – Kivik 为 CouchDB、PouchDB 和类似的数据库提供了一个通用的 Go 和 GopherJS 客户端库</li>
<li><a href="https://github.com/siddontang/ledisdb">ledisdb</a> – Ledisdb 是基于 LevelDB 的类似 Redis 的高性能 NoSQL</li>
<li><a href="https://github.com/jmhodges/levigo">levigo</a> – Levigo 是 LevelDB 的 Go 封装器</li>
<li><a href="https://github.com/couchbase/moss">moss</a> – Moss 是一个简单的 LSM 键值存储引擎，100% 用 Go 编写</li>
<li><a href="https://github.com/xujiajun/nutsdb">nutsdb</a> – Nutsdb 是一个用纯 Go 语言编写的简单、快速、可嵌入、持久化的键/值存储空间，它支持完全可序列化的事务和许多数据结构，如列表、集合、排序集合，它支持完全可序列化的事务和许多数据结构，如列表、集合、排序集合</li>
<li><a href="https://github.com/fern4lvarez/piladb">piladb</a> – 基于堆栈数据结构的轻量级 RESTful 数据库引擎</li>
<li><a href="https://github.com/akrylysov/pogreb">pogreb</a> – 嵌入式键值存储库，适用于重度读操作的场景</li>
<li><a href="https://github.com/prometheus/prometheus">prometheus</a> – 监控系统和时序数据库</li>
<li><a href="https://github.com/recoilme/pudge">pudge</a> – 使用 Go 标准库编写的快速而简单的键值存储库</li>
<li><a href="https://github.com/rqlite/rqlite">rqlite</a> – 基于 SQLite 构建的轻量级、分布式、关系型数据库</li>
<li><a href="https://github.com/nanobox-io/golang-scribble">Scribble</a> – 微型平面文件 JSON 存储库实现</li>
<li><a href="https://github.com/recoilme/slowpoke">slowpoke</a> – 支持持久化的键值存储库</li>
<li><a href="https://github.com/rafaeljesus/tempdb">tempdb</a> – 适用于临时条目的键值存储库</li>
<li><a href="https://github.com/pingcap/tidb">tidb</a> – TiDB 是一个分布式 SQL 数据库，灵感来自于谷歌 F1 的设计</li>
<li><a href="https://github.com/HouzuoGuo/tiedot">tiedot</a> – Golang 驱动的 NoSQL 数据库</li>
<li><a href="https://github.com/cheshir/ttlcache">ttlcache</a> – 内存键值存储库，每个记录都有 TTL</li>
<li><a href="https://github.com/unit-io/unitdb">unitdb</a> – 用于物联网、实时消息应用的快速时序数据库，使用 github.com/unit-io/unitd 应用通过 tcp 或 websocket 访问 unitdb</li>
<li><a href="https://github.com/chrislusf/vasto">Vasto</a> – 一个分布式的高性能键值存储库，存放在磁盘上，最终一致，高可用，能够在不中断服务的情况下扩容或缩容</li>
<li><a href="https://github.com/VictoriaMetrics/VictoriaMetrics">VictoriaMetrics</a> – 快速、资源有效和可扩展的开源时序数据库，可用于 Prometheus 的长期远程存储，支持PromQL</li>
</ul>
<blockquote>
<p>数据库表结构迁移</p>
</blockquote>
<ul>
<li><a href="https://github.com/khezen/avro">avro</a> – 发现 SQL 表结构并将其转换为 AVRO 结构，查询 SQL 记录到 AVRO 字节</li>
<li><a href="https://github.com/GuiaBolso/darwin">darwin</a> – 为 Go 提供的数据库表结构生成库</li>
<li><a href="https://github.com/RichardKnop/go-fixtures">go-fixtures</a> – 为 Golang 优秀的内置数据库/sql库提供 Django 风格的 fixtures</li>
<li><a href="https://github.com/robinjoseph08/go-pg-migrations">go-pg-migrations</a> – 一个用 go-pg/pg 帮助编写迁移的 Go 包</li>
<li><a href="https://github.com/pressly/goose">goose</a> – 数据库迁移工具，你可以通过创建增量 SQL 或 Go 脚本来管理你的数据库表结构演变</li>
<li><a href="https://github.com/go-gormigrate/gormigrate">gormigrate</a> – Gorm ORM 的数据库表结构迁移助手</li>
<li><a href="https://github.com/golang-migrate/migrate">migrate</a> – 数据库迁移库，支持 CLI 及包导入</li>
<li><a href="https://github.com/lopezator/migrator">migrator</a> – 非常简单的 Go 数据库迁移库</li>
<li><a href="https://github.com/pravasan/pravasan">pravasan</a> – 简单的迁移工具 — 目前适用于 MySQL，但计划很快支持 Postgres、SQLite、MongoDB 等</li>
<li><a href="https://github.com/adlio/schema">schema</a> – 在你的 Go 二进制文件中嵌入数据库/SQL 兼容数据库的表结构迁移库</li>
<li><a href="https://github.com/skeema/skeema">skeema</a> – MySQL 的纯 SQL 模式管理系统，支持分片和外部在线表结构变更工具</li>
<li><a href="https://github.com/gobuffalo/pop/tree/master/soda">soda</a> – MySQL、PostgreSQL 和 SQLite 的数据库迁移、创建、ORM 等</li>
<li><a href="https://github.com/rubenv/sql-migrate">sql-migrate</a> – 数据库迁移工具，允许使用 go-bindata 将迁移嵌入到应用程序中</li>
</ul>
<blockquote>
<p>数据库工具</p>
</blockquote>
<ul>
<li><a href="https://github.com/Vertamedia/chproxy">chproxy</a> – ClickHouse 数据库 HTTP 代理</li>
<li><a href="https://github.com/nikepan/clickhouse-bulk">clickhouse-bulk</a> – 收集小的插入然后发送大的请求到 ClickHouse 服务器</li>
<li><a href="https://github.com/codingconcepts/datagen">datagen</a> – 一个快速的数据生成器，它能识别多表并支持多行 DML</li>
<li><a href="https://github.com/sj14/dbbench">dbbench</a> – 支持多个数据库和脚本的数据库基准测试工具</li>
<li><a href="https://github.com/siddontang/go-mysql">go-mysql</a> – Go 工具集，用来处理MySQL 协议和复制</li>
<li><a href="https://github.com/siddontang/go-mysql-elasticsearch">go-mysql-elasticsearch</a> – 将你的 MySQL 数据自动同步到 Elasticsearch 中</li>
<li><a href="https://github.com/flike/kingshard">kingshard</a> – kingshard 是一个由 Golang 驱动的 MySQL 高性能代理</li>
<li><a href="https://github.com/2tvenom/myreplication">myreplication</a> – MySql binlog 日志复制监听器，支持基于语句和行的复制</li>
<li><a href="https://github.com/knocknote/octillery">octillery</a> – 数据库分片库（支持所有 ORM 和原生 SQL）</li>
<li><a href="https://github.com/github/orchestrator">orchestrator</a> – MySQL 复制拓扑管理器和可视化工具</li>
<li><a href="https://github.com/cybertec-postgresql/pg_timetable">pg_timetable</a> – PostgreSQL 的高级调度</li>
<li><a href="https://github.com/sosedoff/pgweb">pgweb</a> – 基于 Web 的 PostgreSQL 数据库浏览器</li>
<li><a href="https://github.com/hexdigest/prep">prep</a> – 使用预处理 SQL 语句，而不需要改变你的代码</li>
<li><a href="https://github.com/prest/prest">pREST</a> – <img src="images/26a1.svg" alt="⚡" loading="lazy">简化和加速开发，在任何 Postgres 应用程序上，无论是现有的还是新的，都是即时、实时、高性能的</li>
<li><a href="https://github.com/andizzle/rwdb">rwdb</a> – rwdb 为多个数据库服务器的设置提供读取复制功能</li>
<li><a href="https://github.com/youtube/vitess">vitess</a> – vitess 提供服务器和工具，方便 MySQL 数据库的大规模网络服务扩展</li>
</ul>
<blockquote>
<p>用于构建和使用 SQL 的查询构建器、库</p>
</blockquote>
<ul>
<li><a href="https://github.com/arthurkushman/buildsqlx">buildsqlx</a> – Go 数据库查询构建库，适用于 PostgreSQL</li>
<li><a href="https://github.com/rocketlaunchr/dbq">dbq</a> – 为 Go 提供零模板数据库操作</li>
<li><a href="https://github.com/gchaincl/dotsql">Dotsql</a> – 可以帮助你将 SQL 文件保存在一个地方，并轻松地使用它们的 Go 库</li>
<li><a href="https://github.com/didi/gendry">gendry</a> – 非侵入式的 SQL 构建器和强大的数据绑定器</li>
<li><a href="https://github.com/xujiajun/godbal">godbal</a> – 适用于 Go 的数据库抽象层（DBAL），支持 SQL 构建器以便轻松获得结果</li>
<li><a href="https://github.com/doug-martin/goqu">goqu</a> – 惯用的 SQL 构建程序和查询库</li>
<li><a href="https://github.com/twharmon/gosql">gosql</a> – SQL 查询生成器，具有更好的空值支持</li>
<li><a href="https://golang.yandex/hasql">hasql</a> – 用于访问多主机 SQL 数据库安装的库</li>
<li><a href="https://github.com/galeone/igor">igor</a> – PostgreSQL 的抽象层，支持高级功能，并使用类似 gorm 的语法</li>
<li><a href="https://github.com/go-jet/jet">jet</a> – 在 Go 中编写类型安全的 SQL 查询框架，能够轻松地将数据库查询结果转换为所需的任意对象结构</li>
<li><a href="https://github.com/spacetab-io/mpath-go">mpath</a> – MPTT（Modified Preorder Tree Traversal）包，用于 SQL 记录 — 实体化路径实现</li>
<li><a href="https://github.com/pupizoid/ormlite">ormlite</a> – 轻量级的软件包，适用于 SQLite 数据库，包含一些类似 ORM 的助手功能</li>
<li><a href="https://github.com/go-ozzo/ozzo-dbx">ozzo-dbx</a> – 强大的数据检索方法以及与 DB 无关的查询构建能力</li>
<li><a href="https://github.com/HnH/qry">qry</a> – 用原始 SQL 查询从文件中生成常量的工具</li>
<li><a href="https://github.com/bokwoon95/go-structured-query">sq</a> – 为 Go 提供类型安全的 SQL 构建器和结构映射器</li>
<li><a href="https://github.com/leporo/sqlf">sqlf</a> – 快速的 SQL 查询构建器</li>
<li><a href="https://github.com/lqs/sqlingo">sqlingo</a> – 一个轻量级的 DSL，用于在 Go 中构建 SQL</li>
<li><a href="https://github.com/elgris/sqrl">sqrl</a> – SQL 查询生成器，Squirrel 的分支，优化了性能</li>
<li><a href="https://gitlab.com/qosenergy/squalus">Squalus</a> – 在 Go SQL 包上的层，使其更容易执行查询</li>
<li><a href="https://github.com/Masterminds/squirrel">Squirrel</a> – 帮助你构建 SQL 查询的 Go 库</li>
<li><a href="https://github.com/knq/xo">xo</a> – 基于现有的模式定义或自定义查询为数据库生成惯用的 Go 代码，支持 PostgreSQL、MySQL、SQLite、Oracle 和 SQL Server</li>
</ul>
<h3 id="数据库驱动">数据库驱动</h3>
<blockquote>
<p>连接和操作数据库的库</p>
</blockquote>
<h4 id="关系型数据库">关系型数据库</h4>
<ul>
<li><a href="https://github.com/apache/calcite-avatica-go">avatica</a> – database/sql 的 Apache Avatica/Phoenix SQL 驱动</li>
<li><a href="https://github.com/viant/bgc">bgc</a> – 为 BigQuery for go 提供的数据存储连接</li>
<li><a href="https://github.com/nakagami/firebirdsql">firebirdsql</a> – 适用于 Go 的Firebird RDBMS SQL 驱动</li>
<li><a href="https://github.com/mattn/go-adodb">go-adodb</a> – database/sql 的 Microsoft ActiveX Object DataBase 驱动</li>
<li><a href="https://github.com/denisenkom/go-mssqldb">go-mssqldb</a> – Go Microsoft MSSQL 驱动</li>
<li><a href="https://github.com/mattn/go-oci8">go-oci8</a> – database/sql 的 Oracle 驱动</li>
<li><a href="https://github.com/go-sql-driver/mysql">go-sql-driver/mysql</a> – database/sql 的 MySQL 驱动</li>
<li><a href="https://github.com/mattn/go-sqlite3">go-sqlite3</a> – database/sql 的 SQLite3 驱动</li>
<li><a href="https://github.com/minus5/gofreetds">gofreetds</a> – 封装了 <a href="http://www.freetds.org/">FreeTDS</a> 的 SQL Server 驱动</li>
<li><a href="https://github.com/jackc/pgx">pgx</a> – database/sql 的 PostgreSQL 驱动</li>
<li><a href="https://github.com/lib/pq">pq</a> – database/sql 的原生 Postgres 驱动</li>
<li><a href="https://github.com/cvilsmeier/sqinn-go">Sqinn-Go</a> – 纯 Go 实现的 SQLite 驱动</li>
</ul>
<h4 id="nosql-数据库">NoSQL 数据库</h4>
<ul>
<li><a href="https://github.com/aerospike/aerospike-client-go">aerospike-client-go</a> – Aerospike Go 客户端</li>
<li><a href="https://github.com/solher/arangolite">arangolite</a> – Golang 轻量级 ArangoDB 驱动</li>
<li><a href="https://github.com/viant/asc">asc</a> – 为 Aerospike 提供的数据存储连接库</li>
<li><a href="https://github.com/couchbase/goforestdb">forestdb</a> – 为 ForestDB 提供的 Go 绑定</li>
<li><a href="https://github.com/couchbase/go-couchbase">go-couchbase</a> – Couchbase Go 客户端</li>
<li><a href="https://github.com/pilosa/go-pilosa">go-pilosa</a> – Pilosa Go 客户端库</li>
<li><a href="https://github.com/nitishm/go-rejson">go-rejson</a> – 使用 Redigo Golang客户端为 redislabs 的 ReJSON 模块提供 Golang 客户端，在 Redis 中以 JSON 对象的形式存储和操作结构体</li>
<li><a href="https://github.com/couchbase/gocb">gocb</a> – 官方 Couchbase Go SDK</li>
<li><a href="https://github.com/btnguyen2k/gocosmos">gocosmos</a> – REST 客户端和<code>database/sql</code> 的标准 Azure Cosmos DB 驱动</li>
<li><a href="http://gocql.github.io/">gocql</a> – Apache Cassandra Go 语言驱动</li>
<li><a href="https://github.com/piaohao/godis">godis</a> – Redis 客户端 Golang 实现， 灵感来自 jedis</li>
<li><a href="https://github.com/defcronyke/godscache">godscache</a> – Google Cloud Platform Go Datastore 包的封装器，使用 Memcached 设置缓存</li>
<li><a href="https://github.com/bradfitz/gomemcache/">gomemcache</a> – Memcache Go 客户端库</li>
<li><a href="https://github.com/dancannon/gorethink">gorethink</a> – RethinkDB Go 驱动</li>
<li><a href="https://github.com/zegl/goriak">goriak</a> – Riak KV Go 驱动</li>
<li><a href="https://github.com/kamva/mgm">mgm</a> – 基于 MongoDB 模型的 Go ODM（基于官方的 MongoDB 驱动）</li>
<li><a href="https://github.com/globalsign/mgo">mgo</a> – （未维护）用于 Go 语言的 MongoDB 驱动，它在一个非常简单的 API 下，按照标准的 Go 语法实现了丰富的、经过测试的功能选择</li>
<li><a href="https://github.com/mongodb/mongo-go-driver">mongo-go-driver</a> – 官方 MongoDB Go 驱动</li>
<li><a href="https://github.com/cihangir/neo4j">neo4j</a> – Neo4j Rest API Golang 绑定</li>
<li><a href="https://github.com/davemeehan/Neo4j-GO">Neo4j-GO</a> – Go 语言实现的 Neo4j REST Client</li>
<li><a href="https://github.com/jmcvetta/neoism">neoism</a> – 适用于 Go 的 Neo4j 客户端</li>
<li><a href="https://github.com/qiniu/qmgo">qmgo</a> – MongoDB Go 驱动，基于官方的 MongoDB 驱动，不过和 Mgo 一样好用</li>
<li><a href="https://github.com/bsm/redeo">redeo</a> – 兼容 Redis 协议的 TCP 服务器/服务</li>
<li><a href="https://github.com/gomodule/redigo">redigo</a> – Redigo 是一个为 Redis 数据库提供的 Go 客户端</li>
<li><a href="https://github.com/go-redis/redis">redis</a> – Redis Go 客户端</li>
<li><a href="https://github.com/shomali11/xredis">xredis</a> – 类型安全、可定制的、简单易上手的 Redis 客户端</li>
</ul>
<h4 id="搜索分析数据库">搜索&amp;分析数据库</h4>
<ul>
<li><a href="https://github.com/blevesearch/bleve">bleve</a> – 现代文本索引库</li>
<li><a href="https://github.com/olivere/elastic">elastic</a> – Elasticsearch Go 客户端</li>
<li><a href="https://github.com/cch123/elasticsql">elasticsql</a> – 在 Go 中将 sql 转化为 elasticsearch dsl</li>
<li><a href="https://github.com/mattbaird/elastigo">elastigo</a> – Elasticsearch 客户端库</li>
<li><a href="https://github.com/elastic/go-elasticsearch">go-elasticsearch</a> – 官方 Elasticsearch Go 客户端</li>
<li><a href="https://github.com/OwnLocal/goes">goes</a> – 与 Elasticsearch 进行交互的库</li>
<li><a href="https://github.com/go-ego/riot">riot</a> – Go 开源、分布式、简单高效的搜索引擎</li>
<li><a href="https://github.com/seiflotfy/skizze">skizze</a> – 概率论数据结构服务和存储</li>
</ul>
<h4 id="多个驱动后端">多个驱动后端</h4>
<ul>
<li><a href="https://github.com/fabiorphp/cachego">cachego</a> – 支持多个驱动的 Golang 缓存组件</li>
<li><a href="https://github.com/google/cayley">cayley</a> – 支持多个后端驱动的 Graph 数据库</li>
<li><a href="https://github.com/viant/dsc">dsc</a> – SQL、NoSQL、结构化文件的数据库存储连接</li>
<li><a href="https://github.com/philippgille/gokv">gokv</a> – 简单键值存储抽象和 Go 实现（支持 Redis、Consul、etcd、bbolt、BadgerDB、LevelDB、Memcached、DynamoDB、S3、PostgreSQL、MongoDB、CockroachDB 以及更多）</li>
</ul>
<h3 id="日期和时间">日期和时间</h3>
<blockquote>
<p>日期和时间处理库</p>
</blockquote>
<ul>
<li><a href="https://github.com/uniplaces/carbon">carbon</a> – 简单的时间扩展，有很多实用的方法，从 PHP Carbon 库移植而来</li>
<li><a href="https://github.com/1set/cronrange">cronrange</a> – 解析 Cron 风格的时间范围表达式，检查给定时间是否在任何范围内</li>
<li><a href="https://github.com/rickb777/date">date</a> – 用于处理日期、日期范围、时间跨度、时间段和日期时间的 Go 扩展包</li>
<li><a href="https://github.com/araddon/dateparse">dateparse</a> – 在事先不知道格式的情况下解析日期</li>
<li><a href="https://github.com/hako/durafmt">durafmt</a> – Go 时间段格式化库</li>
<li><a href="https://github.com/wlbr/feiertage">feiertage</a> – 一套计算德国公共假日的函数库，包括德国各州（Bundesländer）的专门定制，如复活节、圣灵降临节、感恩节等</li>
<li><a href="https://github.com/yaa110/go-persian-calendar">go-persian-calendar</a> – 在 Go 中实现波斯历（太阳节）</li>
<li><a href="https://github.com/xhit/go-str2duration">go-str2duration</a> – 转换字符串为时间段，支持 time.Duration 返回字符串等</li>
<li><a href="https://github.com/nathan-osman/go-sunrise">go-sunrise</a> – 计算给定地点的日出和日落时间</li>
<li><a href="https://github.com/stoewer/go-week">go-week</a> – 一个高效的扩展包，用于处理 ISO8601 周日期</li>
<li><a href="https://github.com/relvacode/iso8601">iso8601</a> – 无需 regex 就能有效解析 ISO8601 日期时间</li>
<li><a href="https://github.com/GuilhermeCaruso/kair">kair</a> – Golang 日期和时间格式化库</li>
<li><a href="https://github.com/jinzhu/now">now</a> – Now 是一个 Golang 日期时间工具集</li>
<li><a href="https://github.com/kirillDanshin/nulltime">NullTime</a> – <code>time.Time</code> 空值</li>
<li><a href="https://github.com/awoodbeck/strftime">strftime</a> – 兼容 C99 的字符串时间转化器</li>
<li><a href="https://github.com/SaidinWoT/timespan">timespan</a> – 用于与时间间隔进行交互，定义为开始时间和持续时间</li>
<li><a href="https://github.com/leekchan/timeutil">timeutil</a> – 扩展 Golang 是 <code>time</code> 包</li>
<li><a href="https://github.com/osteele/tuesday">tuesday</a> – 兼容 Ruby 的 Strftime 功能</li>
</ul>
<h3 id="分布式系统">分布式系统</h3>
<blockquote>
<p>用于构建分布式系统的包</p>
</blockquote>
<ul>
<li><a href="https://github.com/lesismal/arpc">arpc</a> – 更高效的网络通讯，支持双向通话、通知、广播</li>
<li><a href="https://github.com/svcavallar/celeriac.v1">celeriac</a> – 在 Go 中为交互和监控 Celery 处理器、任务和事件添加支持的库</li>
<li><a href="https://github.com/buraksezer/consistent">consistent</a> – 一致的哈希与有界的负载</li>
<li><a href="https://github.com/mbrostami/consistenthash">consistenthash</a> – 通过可配置的副本实现一致的哈希</li>
<li><a href="https://github.com/anacrolix/dht">dht</a> – BitTorrent Kademlia DHT 实现</li>
<li><a href="https://github.com/digota/digota">digota</a> – grpc 电商微服务</li>
<li><a href="https://github.com/dotchain/dot/">dot</a> – 使用操作转换/OT实现分布式同步</li>
<li><a href="https://github.com/edwingeng/doublejump">doublejump</a> – 改版后的谷歌跳转一致的哈希</li>
<li><a href="https://github.com/lni/dragonboat">dragonboat</a> – 通过 Go 实现的功能完整的高性能多组 Raft 库</li>
<li><a href="https://github.com/dgruber/drmaa">drmaa</a> – 基于 DRMAA 标准的集群调度器作业提交库</li>
<li><a href="https://cirello.io/dynamolock">dynamolock</a> – 基于 DynamoDB 的分布式锁实现</li>
<li><a href="https://github.com/tylfin/dynatomic">dynatomic</a> – 一个将 DynamoDB 作为原子计数器使用的库</li>
<li><a href="https://github.com/emitter-io/emitter">emitter-io</a> – 用 MQTT、Websockets 和爱构建的高性能、分布式、安全和低延迟的发布-订阅平台</li>
<li><a href="https://github.com/vectaport/flowgraph">flowgraph</a> – 基于工作流的编程包</li>
<li><a href="https://github.com/chrislusf/gleam">gleam</a> – 用纯 Go 和 Luajit 编写的快速可扩展的分布式 Map-Reduce 系统，结合了 Go 的高并发和 Luajit 的高性能，可独立或分布式运行</li>
<li><a href="https://github.com/chrislusf/glow">glow</a> – 易于使用的、可扩展的分布式大数据处理、Map-Reduce、DAG 执行，采用纯Go 实现。</li>
<li><a href="https://github.com/gmsec/micro">gmsec</a> – 一个 Go 分布式系统开发框架</li>
<li><a href="https://github.com/InVisionApp/go-health">go-health</a> – 用于在服务中启用异步依赖性健康检查的库</li>
<li><a href="https://github.com/dgryski/go-jump">go-jump</a> – 移植 Google 的 “Jump” 一致性哈希功能到 Go</li>
<li><a href="https://github.com/go-kit/kit">go-kit</a> – 微服务工具包，支持服务发现、负载均衡、可插拔传输、请求跟踪等</li>
<li><a href="https://github.com/micro/go-micro">go-micro</a> – 一个分布式系统开发框架</li>
<li><a href="https://github.com/sanketplus/go-mysql-lock">go-mysql-lock</a> – 基于 MySQL 的分布式锁实现</li>
<li><a href="https://github.com/pdupub/go-pdu">go-pdu</a> – 基于身份的分散式社交网络</li>
<li><a href="https://github.com/AppsFlyer/go-sundheit">go-sundheit</a> – 一个为 Go 服务定义异步服务健康检查提供支持的库</li>
<li><a href="https://github.com/valyala/gorpc">gorpc</a> – 简单、快速、可扩展的RPC库，适合高负载</li>
<li><a href="https://github.com/grpc/grpc-go">grpc-go</a> – gRPC 的 Go 语言实现，基于 HTTP/2</li>
<li><a href="https://github.com/hprose/hprose-golang">hprose</a> – 非常新颖的 RPC 库，现在支持 25 种以上的语言</li>
<li><a href="https://github.com/osamingo/jsonrpc">jsonrpc</a> – 帮助实现 JSON-RPC 2.0 的 jsonrpc 包</li>
<li><a href="https://github.com/ybbus/jsonrpc">jsonrpc</a> – JSON-RPC 2.0 HTTP 客户端实现</li>
<li><a href="https://github.com/devopsfaith/krakend">KrakenD</a> – 带有中间件的超高性能 API 网关框架</li>
<li><a href="https://github.com/liftbridge-io/liftbridge">liftbridge</a> – 用于 NATS 的轻量级容错消息流</li>
<li><a href="https://github.com/micro/micro">micro</a> – 一个面向云计算及其他领域的分布式系统运行时</li>
<li><a href="https://github.com/nats-io/gnatsd">NATS</a> – 用于微服务、物联网和云原生系统的轻量级、高性能的消息系统</li>
<li><a href="https://github.com/italolelis/outboxer">outboxer</a> – Outboxer 是一个实现了 outbox 模式的 Go 库</li>
<li><a href="https://cirello.io/pglock">pglock</a> – 基于 PostgreSQL 实现的分布式锁</li>
<li><a href="https://gitlab.com/pjrpc/pjrpc">pjrpc</a> – 使用 Protobuf 规范实现的 Golang JSON-RPC Server-Client</li>
<li><a href="https://github.com/hashicorp/raft">raft</a> – Golang 实现的 Raft 共识协议，由 HashiCorp 公司开发</li>
<li><a href="https://github.com/coreos/etcd/tree/master/raft">raft</a> – Go 实现的 Raft 共识协议，由 CoreOS 公司开发</li>
<li><a href="https://github.com/cenkalti/rain">rain</a> – BitTorrent 客户端和库</li>
<li><a href="https://github.com/bsm/redislock">redis-lock</a> – 使用 Redis 简化分布式锁的实现</li>
<li><a href="https://resgate.io/">resgate</a> – 实时 API 网关，用于构建 REST、实时 RPC API，所有客户端无缝同步</li>
<li><a href="https://github.com/uber/ringpop-go">ringpop-go</a> – 为 Go 应用提供可扩展、容错的应用层分片</li>
<li><a href="https://github.com/smallnest/rpcx">rpcx</a> – 分布式可插拔的 RPC 服务框架，类似阿里巴巴 Dubbo 框架</li>
<li><a href="https://github.com/jexia/semaphore">Semaphore</a> – 一个直接的（微）服务编排器</li>
<li><a href="https://github.com/ursiform/sleuth">sleuth</a> – 用于无主 p2p 自动发现和HTTP 服务之间的 RPC 库（使用<a href="https://github.com/zeromq/libzmq">ZeroMQ</a>）</li>
<li><a href="https://github.com/tendermint/tendermint">tendermint</a> – 高性能中间件，用于使用 Tendermint 共识和区块链协议将任何编程语言编写的状态机转化为拜占庭容错复制的状态机</li>
<li><a href="https://github.com/anacrolix/torrent">torrent</a> – BitTorrent 客户端扩展包</li>
</ul>
<h3 id="动态-dns">动态 DNS</h3>
<blockquote>
<p>更新动态 DNS 记录的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/skibish/ddns">DDNS</a> – 以 Digital Ocean Networking DNS 为后台的个人 DDNS 客户端</li>
<li><a href="https://gitlab.com/alcastle/dyndns">dyndns</a> – 后台 Go 进程，定期自动检查您的 IP 地址，并在您的地址变化时更新（一个或多个）谷歌域名的动态 DNS 记录</li>
<li><a href="https://github.com/timothyye/godns">GoDNS</a> – 一个动态 DNS 客户端工具，支持 DNSPod 和 HE.net，用 Go 语言编写</li>
</ul>
<h3 id="邮件">邮件</h3>
<blockquote>
<p>实现邮件创建和发送的库和工具</p>
</blockquote>
<ul>
<li><a href="https://blitiri.com.ar/p/chasquid">chasquid</a> – Go 语言编写的 SMTP 服务器</li>
<li><a href="https://github.com/aymerick/douceur">douceur</a> – 用于 HTML 邮件的 CSS 内联程序</li>
<li><a href="https://github.com/jordan-wright/email">email</a> – 一个强大而灵活的 Go 电子邮件库</li>
<li><a href="https://github.com/AfterShip/email-verifier">email-verifier</a> – 一个用于电子邮件验证的 Go 库，无需真正发送任何电子邮件</li>
<li><a href="https://github.com/toorop/go-dkim">go-dkim</a> – DKIM 库，用于签署和验证电子邮件</li>
<li><a href="https://github.com/go-email-validator/go-email-validator">go-email-validator</a> – 模块化的电子邮件验证器，用于语法、一次性、SMTP 等检查。</li>
<li><a href="https://github.com/emersion/go-imap">go-imap</a> – 客户端和服务器的 IMAP 库</li>
<li><a href="https://github.com/emersion/go-message">go-message</a> – 互联网信息格式和邮件信息的流媒体库</li>
<li><a href="https://github.com/vanng822/go-premailer">go-premailer</a> – 在 Go 中对 HTML 邮件进行内联样式设计</li>
<li><a href="https://github.com/xhit/go-simple-mail">go-simple-mail</a> – 非常简单的包，用 SMTP Keep Alive 和两个超时发送邮件：连接和发送</li>
<li><a href="https://github.com/hectane/hectane">Hectane</a> – 提供 HTTP API 的轻量级 SMTP 客户端</li>
<li><a href="https://github.com/matcornic/hermes">hermes</a> – 生成简洁、响应式 HTML 邮件的 Golang 包</li>
<li><a href="https://github.com/mailchain/mailchain">mailchain</a> – 用 Go 编写的通过区块链地址发送加密的电子邮件</li>
<li><a href="https://github.com/mailgun/mailgun-go">mailgun-go</a> – 用 Mailgun API 发送邮件的 Go 库</li>
<li><a href="https://github.com/mailhog/MailHog">MailHog</a> – 通过 Web 和 API 接口进行电子邮件和 SMTP 测试</li>
<li><a href="https://github.com/sendgrid/sendgrid-go">SendGrid</a> – 用于发送电子邮件的 SendGrid Go 库</li>
<li><a href="https://github.com/mailhog/smtp">smtp</a> – SMTP 服务器协议状态机</li>
</ul>
<h3 id="嵌入脚本语言">嵌入脚本语言</h3>
<blockquote>
<p>在 Go 代码中嵌入其他语言</p>
</blockquote>
<ul>
<li><a href="https://github.com/mattn/anko">anko</a> – 用 Go 编写的脚本解释器</li>
<li><a href="https://github.com/alexeyco/binder">binder</a> – Go Lua 绑定库，基于<a href="https://github.com/yuin/gopher-lua">gopher-lua</a></li>
<li><a href="https://github.com/google/cel-go">cel-go</a> – 快速、便携、非图灵完整的表达式评估与渐进式输入</li>
<li><a href="https://github.com/krotik/ecal">ecal</a> – 一个简单的可嵌入的脚本语言，支持并发事件处理</li>
<li><a href="https://github.com/antonmedv/expr">expr</a> – Go 的表达式评估引擎：快速、非图灵完备、动态输入、静态输入</li>
<li><a href="https://github.com/gentee/gentee">gentee</a> – 嵌入式脚本编程语言</li>
<li><a href="https://github.com/jcla1/gisp">gisp</a> – 在 Go 中嵌入 LISP</li>
<li><a href="https://github.com/olebedev/go-duktape">go-duktape</a> – 将 Duktape JavaScript 引擎嵌入 Go</li>
<li><a href="https://github.com/Shopify/go-lua">go-lua</a> – 将 Lua 5.2 虚拟机移植到 Go</li>
<li><a href="https://github.com/deuill/go-php">go-php</a> – 将 PHP 嵌入到 Go</li>
<li><a href="https://github.com/sbinet/go-python">go-python</a> – 将 CPython C-API 嵌入到 Go</li>
<li><a href="https://github.com/dop251/goja">goja</a> – 在 Go 中实现 ECMAScript 5.1+</li>
<li><a href="https://github.com/aarzilli/golua">golua</a> – 将 Lua C API 嵌入到 Go</li>
<li><a href="https://github.com/yuin/gopher-lua">gopher-lua</a> – 通过 Go 编写的 Lua 5.1 虚拟机和编译器</li>
<li><a href="https://github.com/PaesslerAG/gval">gval</a> – 一个用 Go 编写的高度可定制的表达语言</li>
<li><a href="https://github.com/db47h/ngaro">ngaro</a> – 嵌入式 Ngaro 虚拟机实现，在 Retro 中启用脚本</li>
<li><a href="https://github.com/ian-kent/purl">purl</a> – 将 Perl 5.18.2 嵌入到 Go</li>
<li><a href="https://github.com/d5/tengo">tengo</a> – Go 字节码编译脚本语言</li>
</ul>
<h3 id="错误处理">错误处理</h3>
<blockquote>
<p>错误处理库</p>
</blockquote>
<ul>
<li><a href="https://github.com/emperror/emperror">emperror</a> – Go 库和应用程序的错误处理工具和最佳实践</li>
<li><a href="https://github.com/rotisserie/eris">eris</a> – 在 Go 中处理、跟踪和记录错误的更好方法，与标准错误库和 github.com/pkg/errors 兼容</li>
<li><a href="https://github.com/snwfdhmp/errlog">errlog</a> – 可破解的包，可以确定错误的责任源码（以及其他一些快速调试功能），可就地插入到任何记录器中</li>
<li><a href="https://github.com/emperror/errors">errors</a> – 替换标准库错误包和 github.com/pkg/errors，提供各种错误处理基元</li>
<li><a href="https://github.com/pkg/errors">errors</a> – 提供简单错误处理基元的包</li>
<li><a href="https://github.com/neuronlabs/errors">errors</a> – 使用分类原语进行简单的 Golang 错误处理</li>
<li><a href="https://github.com/PumpkinSeed/errors">errors</a> – 最简单的错误封装器，性能卓越，内存开销最小</li>
<li><a href="https://github.com/bnkamalesh/errors">errors</a> – 构建 Go 错误的替代方案。这是一个最小的错误处理包，带有自定义错误类型、用户友好的消息、Unwrap &amp; Is、直观的辅助函数，简单易上手</li>
<li><a href="https://github.com/joomcode/errorx">errorx</a> – 一个功能丰富的错误包，包括堆栈痕迹、错误的构成等</li>
<li><a href="https://github.com/SonicRoshan/falcon">Falcon</a> – 一个简单而强大的错误处理包</li>
<li><a href="https://github.com/hashicorp/go-multierror">go-multierror</a> – 用于将错误列表表示为单个错误的 Go 扩展包</li>
<li><a href="https://github.com/ztrue/tracerr">tracerr</a> – 带有堆栈追踪和源码碎片的 Golang 错误包</li>
</ul>
<h3 id="文件处理">文件处理</h3>
<blockquote>
<p>处理文件和文件系统的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/spf13/afero">afero</a> – Go FileSystem 抽象系统</li>
<li><a href="https://github.com/viant/afs">afs</a> – Go 抽象文件存储（mem, scp, zip, tar, cloud: s3, gs）</li>
<li><a href="https://github.com/xis/baraka">baraka</a> – 一个轻松处理 HTTP 文件上传的库</li>
<li><a href="https://github.com/bigfile/bigfile">bigfile</a> – 一个文件传输系统，支持用 HTTP API、RPC 调用和 FTP 客户端管理文件</li>
<li><a href="https://github.com/codingsince1985/checksum">checksum</a> – 计算消息摘要，如 MD5 和 SHA256，用于大文件</li>
<li><a href="https://github.com/otiai10/copy">copy</a> – 递归拷贝目录</li>
<li><a href="https://github.com/homedepot/flop">flop</a> – 文件操作库，其目的是与<a href="https://www.gnu.org/software/coreutils/manual/html_node/cp-invocation.html">GNU cp</a>镜像特征奇偶性</li>
<li><a href="https://github.com/artonge/go-csv-tag">go-csv-tag</a> – 使用标签加载csv文件</li>
<li><a href="https://github.com/hugocarreira/go-decent-copy">go-decent-copy</a> – 文件拷贝库</li>
<li><a href="https://github.com/barasher/go-exiftool">go-exiftool</a> – 用于 ExifTool 的 Go 绑定，这个著名的库用于从文件（图片、PDF、office 等）中提取尽可能多的元数据（EXIF、IPTC…）</li>
<li><a href="https://github.com/artonge/go-gtfs">go-gtfs</a> – 在 Go 中加载 gtfs 文件</li>
<li><a href="https://github.com/1set/gut">gut/yos</a> – 简单可靠的文件操作包，如对文件、目录和符号链接的复制/移动/diff/列举</li>
<li><a href="https://github.com/rjeczalik/notify">notify</a> – 具有简单 API 的文件系统事件通知库，类似于os/signal</li>
<li><a href="https://github.com/qmuntal/opc">opc</a> – 为 Go 加载开放封装协议（OPC）文件</li>
<li><a href="https://github.com/parsyl/parquet">parquet</a> – 读写 <a href="https://parquet.apache.org/">parquet</a> 文件</li>
<li><a href="https://github.com/pdfcpu/pdfcpu">pdfcpu</a> – PDF 处理器.</li>
<li><a href="https://github.com/dixonwille/skywalker">skywalker</a> – 让人们可以同时轻松浏览一个文件系统的包</li>
<li><a href="https://gitlab.com/russoj88/stl">stl</a> – 读取和写入 STL（立体光刻）文件的模块，通过并发算法进行读取</li>
<li><a href="https://github.com/posener/tarfs">tarfs</a> -为 tar 文件实现 <a href="https://godoc.org/github.com/kr/fs#FileSystem"><code>FileSystem</code> 接口</a></li>
<li><a href="https://github.com/1set/todotxt">todotxt</a> – Go Gina Trapani <a href="http://todotxt.org/"><em>todo.txt</em></a> 文件处理库，支持解析和操作 <a href="https://github.com/todotxt/todo.txt"><em>todo.txt</em> format</a> 中的任务列表</li>
<li><a href="https://github.com/C2FO/vfs">vfs</a> – 一套可插拔的、可扩展的、有主见的文件系统，适用于 Go 的 os、S3 和 GCS 等多种文件系统类型</li>
</ul>
<h3 id="会计财务">会计&amp;财务</h3>
<blockquote>
<p>会计和财务方面的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/leekchan/accounting">accounting</a> – Go 金钱和货币格式化库</li>
<li><a href="https://github.com/bojanz/currency">currency</a> – 处理货币金额、提供货币信息和格式化处理</li>
<li><a href="https://github.com/bnkamalesh/currency">currency</a> – 高性能 &amp; 精确的货币计算包</li>
<li><a href="https://github.com/shopspring/decimal">decimal</a> – 任意精度的定点小数</li>
<li><a href="https://github.com/newity/fastme">fastme</a> – 快速可扩展的匹配引擎 Go 实现</li>
<li><a href="https://github.com/FlashBoys/go-finance">go-finance</a> – Go 综合金融市场数据库</li>
<li><a href="https://github.com/alpeb/go-finance">go-finance</a> – 年金、现金流、利率换算、债券和折旧计算的财务函数库</li>
<li><a href="https://github.com/pieterclaerhout/go-finance">go-finance</a> – 该模块用于获取汇率，通过 VIES 查询增值税号码，以及查询 IBAN 银行账户号码</li>
<li><a href="https://github.com/m1/go-finnhub">go-finnhub</a> – 来自 finnhub.io 的股市、外汇和加密数据客户端，可以访问来自 60 多家证券交易所、10 家外汇经纪商和 15 家以上加密交易所的实时金融市场数据</li>
<li><a href="https://github.com/rhymond/go-money">go-money</a> – 福勒金钱模式的实现</li>
<li><a href="https://github.com/aclindsa/ofxgo">ofxgo</a> – 查询 OFX 服务器、解析响应（以命令行客户端为例）</li>
<li><a href="https://github.com/i25959341/orderbook">orderbook</a> – 在 Golang 中实现限价订单簿匹配引擎</li>
<li><a href="https://github.com/BoltApp/sleet">sleet</a> – 一个统一的界面，让多个支付服务提供商（PsP）处理在线支付</li>
<li><a href="https://github.com/sdcoffey/techan">techan</a> – 技术分析库，具有先进的市场分析和交易策略</li>
<li><a href="https://github.com/claygod/transaction">transaction</a> – 嵌入式账户事务数据库，以多线程模式运行</li>
<li><a href="https://github.com/dannyvankooten/vat">vat</a> – 增值税号验证和欧盟增值税税率</li>
</ul>
<h3 id="表单">表单</h3>
<blockquote>
<p>处理表单的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/robfig/bind">bind</a> – 将表格数据绑定到任何 Go 类型值</li>
<li><a href="https://github.com/mholt/binding">binding</a> – 将 net/http 请求中的表单和 JSON 数据绑定到结构体中</li>
<li><a href="https://github.com/leebenson/conform">conform</a> – 控制用户的输入，根据结构化标签对数据进行修剪、清理和擦洗</li>
<li><a href="https://github.com/go-playground/form">form</a> – 将 url.Values 解码为 Go 值，将 Go 值编码为 url.Values，支持双数组和全图</li>
<li><a href="https://github.com/monoculum/formam">formam</a> – 将表单的值解码成一个结构体</li>
<li><a href="https://github.com/albrow/forms">forms</a> – 用于解析和验证表单/JSON 数据的框架无关库，支持 multipart 类型表单和文件上传</li>
<li><a href="https://github.com/gorilla/csrf">gorilla/csrf</a> – 为 Go 网络应用和服务提供 CSRF 保护</li>
<li><a href="https://github.com/justinas/nosurf">nosurf</a> – Go CSRF 保护中间件</li>
<li><a href="https://github.com/sonh/qs">qs</a> – 用于将结构体编码为 URL 查询参数的 Go 模块</li>
<li><a href="https://github.com/tomwright/queryparam">queryparam</a> – 将 url.Values 解码为标准或自定义类型的可用结构体值</li>
</ul>
<h3 id="函数式编程">函数式编程</h3>
<blockquote>
<p>在 Go 中支持函数式编程的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/TeaEntityLab/fpGo">fpGo</a> – Monad，Golang 的函数式编程特性</li>
<li><a href="https://github.com/seborama/fuego">fuego</a> – Go 函数式编程体验</li>
<li><a href="https://github.com/tobyhede/go-underscore">go-underscore</a> – Go 函数式编程实用工具集合</li>
</ul>
<h3 id="游戏开发">游戏开发</h3>
<blockquote>
<p>游戏开发库</p>
</blockquote>
<ul>
<li><a href="https://github.com/azul3d/engine">Azul3D</a> – Go 编写的 3D 游戏引擎</li>
<li><a href="https://github.com/hajimehoshi/ebiten">Ebiten</a> – Go 编写的 2D 游戏库</li>
<li><a href="https://github.com/EngoEngine/engo">engo</a> – Engo 是一个用 Go 编写的开源 2D 游戏引擎，它遵循实体-组件-系统范式</li>
<li><a href="https://github.com/g3n/engine">g3n</a> – Go 3D 游戏引擎</li>
<li><a href="https://github.com/beefsack/go-astar">go-astar</a> – Go 实现的 A* 路径查找算法</li>
<li><a href="https://github.com/veandco/go-sdl2">go-sdl2</a> – 在 Go 中绑定 <a href="https://www.libsdl.org/">Simple DirectMedia Layer</a></li>
<li><a href="https://github.com/ungerik/go3d">go3d</a> – 面向 Go 的高性能 2D/3D 数学包</li>
<li><a href="https://github.com/xtaci/gonet">gonet</a> – 用 Golang 实现的游戏服务器骨架</li>
<li><a href="https://github.com/xiaonanln/goworld">goworld</a> – 可扩展的游戏服务器引擎，具有空间实体框架和热插拔功能</li>
<li><a href="https://github.com/name5566/leaf">Leaf</a> – 轻量级游戏服务器框架</li>
<li><a href="https://github.com/lonng/nano">nano</a> – 基于 Go 实现轻量级、高性能游戏服务器框架</li>
<li><a href="https://github.com/oakmound/oak">Oak</a> – 纯 Go 实现的游戏引擎</li>
<li><a href="https://github.com/topfreegames/pitaya">Pitaya</a> – 可扩展的游戏服务器框架，支持集群，通过 C SDK 为 iOS、Android、Unity 等提供客户端库</li>
<li><a href="https://github.com/faiface/pixel">Pixel</a> – 在 Go 中手绘 2D 游戏库</li>
<li><a href="https://github.com/gonutz/prototype">prototype</a> – 跨平台（Windows/Linux/Mac）的库，用于使用最小的 API 创建桌面游戏</li>
<li><a href="https://github.com/gen2brain/raylib-go">raylib-go</a> – Go绑定的<a href="http://www.raylib.com/">raylib</a>，一个简单易用的电子游戏编程学习库</li>
<li><a href="https://github.com/JoelOtter/termloop">termloop</a> – 基于终端的 Go 游戏引擎，构建在 Termbox 之上</li>
<li><a href="https://github.com/kelindar/tile">tile</a> – 面向数据和缓存友好的 2D 网格库（TileMap），包括路径查找、观察者和导入/导出</li>
</ul>
<h3 id="代码生成和泛型">代码生成和泛型</h3>
<blockquote>
<p>通过代码生成来增强语言功能的工具，比如泛型</p>
</blockquote>
<ul>
<li><a href="https://github.com/t0pep0/efaceconv">efaceconv</a> – 代码生成工具，用于从 <code>interface{}</code> 到不可变类型的高性能转换，无需分配</li>
<li><a href="https://github.com/clipperhouse/gen">gen</a> – 类似泛型功能的代码生成工具</li>
<li><a href="https://github.com/senselogic/GENERIS">generis</a> – 代码生成工具，提供通用代码、自由格式宏、条件编译和 HTML 模板</li>
<li><a href="https://github.com/abice/go-enum">go-enum</a> – 根据代码注释生成枚举代码</li>
<li><a href="https://github.com/ahmetalpbalkan/go-linq">go-linq</a> – 在 Go 中实现类似 .NET LINQ 的查询方法</li>
<li><a href="https://github.com/pieterclaerhout/go-xray">go-xray</a> – 让反射更好使用的辅助工具</li>
<li><a href="https://github.com/awalterschulze/goderive">goderive</a> – 从输入类型导出函数</li>
<li><a href="https://github.com/wzshiming/gotype">gotype</a> – Golang 源码解析，用法就像 reflect 包一样</li>
<li><a href="https://github.com/hexdigest/gowrap">GoWrap</a> – 使用简单的模板为 Go 接口生成装饰器</li>
<li><a href="https://github.com/rjeczalik/interfaces">interfaces</a> – 用于生成接口定义的命令行工具</li>
<li><a href="https://github.com/dave/jennifer">jennifer</a> – 无需模板即可生成任意 Go 代码</li>
<li><a href="https://github.com/ungerik/pkgreflect">pkgreflect</a> – 包作用域反射的 Go 预处理程序</li>
<li><a href="https://github.com/xiaoxin01/typeregistry">typeregistry</a> – 一个用于动态创建类型的库</li>
</ul>
<h3 id="地理位置">地理位置</h3>
<blockquote>
<p>地理位置工具和服务器</p>
</blockquote>
<ul>
<li><a href="https://github.com/melihmucuk/geocache">geocache</a> – 内存缓存，适合基于地理位置的应用</li>
<li><a href="https://github.com/hishamkaram/geoserver">geoserver</a> – geoserver 是一个通过 GeoServer REST API 操纵 GeoServer 实例的 Go 包</li>
<li><a href="https://github.com/hishamkaram/gismanager">gismanager</a> – 将您的 GIS 数据（矢量数据）发布到 PostGIS 和 Geoserver</li>
<li><a href="https://github.com/consbio/mbtileserver">mbtileserver</a> – 一个简单的基于 Go 的服务器，用于存储 mbtiles 格式的地图磁贴</li>
<li><a href="https://github.com/paulmach/osm">osm</a> – 用于读取、编写和处理 OpenStreetMap 数据和 API 的库</li>
<li><a href="https://github.com/maguro/pbf">pbf</a> – Golang OpenStreetMap PBF 编码器/解码器</li>
<li><a href="https://github.com/pantrif/s2-geojson">S2 geojson</a> – 将 geojson 转换为 S2 单元，并在地图上演示一些 S2 几何特征</li>
<li><a href="https://github.com/golang/geo">S2 geometry</a> – 在 Go 中使用 S2 几何库</li>
<li><a href="https://github.com/tidwall/tile38">Tile38</a> – 地理定位数据库，具有空间索引和实时地理定位功能</li>
<li><a href="https://github.com/wroge/wgs84">WGS84</a> – 坐标转换和变换库（ETRS89、OSGB36、NAD83、RGF93、Web Mercator、UTM）</li>
</ul>
<h3 id="go-编译器">Go 编译器</h3>
<blockquote>
<p>将 Go 编译成其他语言的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/Konstantin8105/c4go">c4go</a> – 将 C 代码转为 Go 代码</li>
<li><a href="https://github.com/Konstantin8105/f4go">f4go</a> – 将 FORTRAN 77 代码转为 Go 代码</li>
<li><a href="https://github.com/gopherjs/gopherjs">gopherjs</a> – 将 Go 代码编译为 JavaScript 代码</li>
<li><a href="https://github.com/tardisgo/tardisgo">tardisgo</a> -将 Golang 代码转化为 Haxe 再转化为 CPP/CSharp/Java/JavaScript 代码</li>
</ul>
<h3 id="协程">协程</h3>
<blockquote>
<p>管理和处理 Go 协程的工具</p>
</blockquote>
<ul>
<li><a href="https://github.com/panjf2000/ants">ants</a> – 高性能、低成本的 Go 协程池</li>
<li><a href="https://github.com/borderstech/artifex">artifex</a> – Golang 实现的简单内存作业队列，使用基于队列处理器的调度</li>
<li><a href="https://github.com/reugn/async">async</a> – 一个替代性的 Go 同步库（Future, Promise, Locks）</li>
<li><a href="https://github.com/studiosol/async">async</a> – 一种安全的异步执行函数的方式，在 panic 时恢复函数</li>
<li><a href="https://github.com/kamilsk/breaker">breaker</a> – 通过灵活的机制使执行流程可中断</li>
<li><a href="https://github.com/ddelizia/channelify">channelify</a> – 将函数转换为返回通道，以便进行简单而强大的并行处理</li>
<li><a href="https://github.com/vivek-ng/concurrency-limiter">concurrency-limiter</a> – 并发限制器，支持超时、动态优先级和取消协程的上下文</li>
<li><a href="https://github.com/ITcathyh/conexec">conexec</a> – 一个帮助高效安全并发执行 funcs 的并发工具箱，支持指定整体超时以避免阻塞，并使用 goroutine pool 提高效率</li>
<li><a href="https://github.com/marusama/cyclicbarrier">cyclicbarrier</a> – Golang 版 CyclicBarrier 实现</li>
<li><a href="https://github.com/workanator/go-floc">go-floc</a> – 轻松编排协程</li>
<li><a href="https://github.com/kamildrazkiewicz/go-flow">go-flow</a> – 控制协程执行顺序</li>
<li><a href="https://github.com/nikhilsaraf/go-tools">go-tools/multithreading</a> – 使用这个轻量级的库和一个简单的 API 来管理一个协程池</li>
<li><a href="https://github.com/subchen/go-trylock">go-trylock</a> – 在 Golang 的读写锁上支持 TryLock</li>
<li><a href="https://github.com/pieterclaerhout/go-waitgroup">go-waitgroup</a> – 像 <code>sync.WaitGroup</code> 一样具有错误处理和并发控制功能</li>
<li><a href="https://github.com/zenthangplus/goccm">goccm</a> – Go 并发管理包限制了允许并发运行的 goroutine 的数量</li>
<li><a href="https://github.com/loveleshsharma/gohive">gohive</a> – 用于 Golang 的高性能和易于使用的 goroutine 池</li>
<li><a href="https://github.com/vardius/gollback">gollback</a> – 异步简单函数实用工具，用于管理闭包和回调的执行</li>
<li><a href="https://github.com/benmanns/goworker">goworker</a> – goworker 是一个基于 Go 的后台处理器</li>
<li><a href="https://github.com/xxjwxc/gowp">gowp</a> – gowp 是限制并发量的协程池</li>
<li><a href="https://github.com/Sherifabdlnaby/gpool">gpool</a> – 管理一个可调整大小的上下文感知 goroutine 池，以约束并发量</li>
<li><a href="https://github.com/ivpusic/grpool">grpool</a> – 轻量级 Goroutine 池</li>
<li><a href="https://github.com/duanckham/hands">hands</a> – 用于控制多个goroutine的执行和返回策略的过程控制器</li>
<li><a href="https://github.com/AaronJan/Hunch">Hunch</a> – Hunch提供了诸如 <code>All</code>、<code>First</code>、<code>Retry</code>、<code>Waterfall</code> 之类的方法，使异步流控制更加直观</li>
<li><a href="https://github.com/dirkaholic/kyoo">kyoo</a> – 提供无限制的作业队列和并发的处理器池</li>
<li><a href="https://github.com/neilotoole/errgroup">neilotoole/errgroup</a> – 作为 <code>sync/errgroup</code> 的替代方案，仅限于 N 个 worker goroutine 的池子</li>
<li><a href="https://github.com/arunsworld/nursery">nursery</a> – 在 Go 中进行结构化并发</li>
<li><a href="https://cirello.io/oversight">oversight</a> – Oversight 是 Erlang 监督树的完整实现</li>
<li><a href="https://github.com/rafaeljesus/parallel-fn">parallel-fn</a> – 并行运行函数</li>
<li><a href="https://github.com/alitto/pond">pond</a> – 用 Go 编写的最小化和高性能的goroutine 处理器池</li>
<li><a href="https://github.com/go-playground/pool">pool</a> – 有限的协程消费者或者无限的协程池，以便更轻松地处理/取消协程</li>
<li><a href="https://github.com/AnikHasibul/queue">queue</a> – 给你一个类似于队列组的<code>sync.WaitGroup</code> 的访问权限，帮助你节制和限制协程，等待所有协程的结束等等</li>
<li><a href="https://github.com/x-mod/routine">routine</a> – 带上下文的协程控制，支持 Main、Go、Pool 以及其它执行器</li>
<li><a href="https://github.com/kamilsk/semaphore">semaphore</a> – Semaphore 模式实现，基于通道和上下文实现锁/解锁操作超时</li>
<li><a href="https://github.com/marusama/semaphore">semaphore</a> – 基于 CAS 的快速可调整 Semaphore 实现（比基于通道的 Semaphore 实现更快）</li>
<li><a href="https://github.com/ssgreg/stl">stl</a> – 基于软件事务内存（STM）并发控制机制的软件事务锁</li>
<li><a href="https://github.com/shettyh/threadpool">threadpool</a> – Golang 线程池实现</li>
<li><a href="https://github.com/Jeffail/tunny">tunny</a> – Golang 协程池实现</li>
<li><a href="https://github.com/vardius/worker-pool">worker-pool</a> – goworker 是一个简单的 Go 异步线程池实现</li>
<li><a href="https://github.com/gammazero/workerpool">workerpool</a> – 一个限制任务执行的并发量，而不是任务排队数量的协程池实现</li>
</ul>
<h3 id="gui图形化">GUI（图形化）</h3>
<blockquote>
<p>构建 GUI 应用的库</p>
</blockquote>
<h4 id="工具箱">工具箱</h4>
<ul>
<li><a href="https://github.com/murlokswarm/app">app</a> – 用 Go、HTML 和 CSS 创建应用程序的软件包，支持 MacOS、Windows 正在开发中</li>
<li><a href="https://github.com/fyne-io/fyne">fyne</a> – 基于 Material Design 为 Go 设计的跨平台原生 GUI，支持 Linux、macOS、Windows、BSD、iOS 和 Android</li>
<li><a href="https://github.com/asticode/go-astilectron">go-astilectron</a> – 使用 Go 和 HTML/JS/CSS（由 Electron 驱动）构建跨平台 GUI 应用程序</li>
<li><a href="http://mattn.github.io/go-gtk/">go-gtk</a> – 将 GTK 集成到 Go</li>
<li><a href="https://github.com/sciter-sdk/go-sciter">go-sciter</a> – 将 Sciter 集成到 Go: 嵌入式 HTML/CSS/JS 脚本引擎，用于现代桌面 UI 开发，跨平台</li>
<li><a href="https://github.com/gotk3/gotk3">gotk3</a> – 将 GTK3 集成到 Go</li>
<li><a href="https://github.com/dtylman/gowd">gowd</a> – 使用 GO、HTML、CSS 和 NW.js 进行快速简单的桌面 UI 开发，跨平台</li>
<li><a href="https://github.com/therecipe/qt">qt</a> – 将 Qt 集成到 Go（主持 Windows/macOS/Linux/Android/iOS/Sailfish OS/Raspberry Pi）</li>
<li><a href="https://github.com/andlabs/ui">ui</a> – Go 的平台原生 GUI 库，跨平台</li>
<li><a href="https://wails.app/">Wails</a> – Mac、Windows、Linux 桌面应用程序，使用操作系统内置的 HTML 渲染器渲染 HTML 用户界面</li>
<li><a href="https://github.com/lxn/walk">walk</a> – 适用于 Go 的 Windows 应用程序库包</li>
<li><a href="https://github.com/zserge/webview">webview</a> – 具有简单双向 JavaScript 绑定的跨平台 webview 窗口（Windows/macOS/Linux）</li>
</ul>
<h4 id="交互">交互</h4>
<ul>
<li><a href="https://github.com/dawidd6/go-appindicator">go-appindicator</a> – 在 Go 中集成 libappindicator3 C 库</li>
<li><a href="https://github.com/deckarep/gosx-notifier">gosx-notifier</a> – Go OSX 桌面通知库</li>
<li><a href="https://github.com/prashantgupta24/activity-tracker">mac-activity-tracker</a> – OSX 库，用于通知机器上的任何（可插拔）活动</li>
<li><a href="https://github.com/prashantgupta24/mac-sleep-notifier">mac-sleep-notifier</a> – Golang 中的 OSX 睡眠/唤醒通知</li>
<li><a href="https://github.com/go-vgo/robotgo">robotgo</a> – Go 原生跨平台 GUI 系统自动化，可用于控制鼠标、键盘等</li>
<li><a href="https://github.com/getlantern/systray">systray</a> – 跨平台的 Go 库，用于在通知区域放置图标和菜单</li>
<li><a href="https://github.com/shurcooL/trayhost">trayhost</a> – 跨平台的 Go 库，用于在主机操作系统的任务栏中放置一个图标</li>
</ul>
<h3 id="硬件">硬件</h3>
<blockquote>
<p>和硬件交互的库、工具、教程</p>
</blockquote>
<p>阅读 <a href="https://github.com/rakyll/go-hardware">go-hardware</a> 查看完整列表。</p>
<h3 id="图片处理">图片处理</h3>
<blockquote>
<p>图片操作库</p>
</blockquote>
<ul>
<li><a href="https://github.com/anthonynsimon/bild">bild</a> – 纯 Go 实现的图片处理算法集合</li>
<li><a href="https://github.com/h2non/bimg">bimg</a> – 使用 libvips 进行快速高效的图像处理包。</li>
<li><a href="https://github.com/aofei/cameron">cameron</a> – Go 头像生成器</li>
<li><a href="https://github.com/tdewolff/canvas">canvas</a> – 矢量图形转换为 PDF、SVG 或光栅化图像</li>
<li><a href="https://github.com/gojek/darkroom">darkroom</a> – 一个具有可改变的存储后端和图像处理引擎的图像代理，注重速度和弹性</li>
<li><a href="https://github.com/lucasepe/draft">draft</a> – 使用简单的 YAML 语法为 GraphViz 生成高级微服务架构图</li>
<li><a href="https://github.com/pravj/geopattern">geopattern</a> – 从字符串中创建美丽的生成图像模式</li>
<li><a href="https://github.com/fogleman/gg">gg</a> – 纯 Go 实现的 2D 渲染</li>
<li><a href="https://github.com/disintegration/gift">gift</a> – 图像处理过滤器包</li>
<li><a href="https://github.com/qmuntal/gltf">gltf</a> – 高效且强大的 glTF 2.0 读取器、写入器和验证器</li>
<li><a href="https://github.com/ungerik/go-cairo">go-cairo</a> – 在 Go 中集成开罗图形库</li>
<li><a href="https://github.com/bolknote/go-gd">go-gd</a> – 在 Go 中集成 GD 库</li>
<li><a href="https://github.com/koyachi/go-nude">go-nude</a> – 使用 Go 进行裸体检测</li>
<li><a href="https://github.com/lazywei/go-opencv">go-opencv</a> – 在 Go 中集成 OpenCV</li>
<li><a href="https://github.com/jyotiska/go-webcolors">go-webcolors</a> – 将 Python webcolors 库移植到 Go</li>
<li><a href="https://github.com/hybridgroup/gocv">gocv</a> – 使用 OpenCV 3.3+ 计算机视觉的 Go 扩展包</li>
<li><a href="https://github.com/corona10/goimagehash">goimagehash</a> – Go 感知图像散列包</li>
<li><a href="https://github.com/corona10/goimghdr">goimghdr</a> – 判断文件中包含的图像类型的 imghdr 模块</li>
<li><a href="https://github.com/o1egl/govatar">govatar</a> – 用于生成有趣头像的库和命令行工具</li>
<li><a href="https://github.com/davidbyttow/govips">govips</a> – Go 快速图像处理和大小调整库</li>
<li><a href="https://github.com/shomali11/gridder">gridder</a> – 基于网格的 2D 图形库</li>
<li><a href="https://github.com/qeesung/image2ascii">image2ascii</a> – 将图片转化为 ASCII</li>
<li><a href="https://github.com/gographics/imagick">imagick</a> – 在 Go 中集成 ImageMagick 的 MagickWand C API</li>
<li><a href="https://github.com/h2non/imaginary">imaginary</a> – 快速简单的 HTTP 微服务，用于调整图片大小</li>
<li><a href="https://github.com/disintegration/imaging">imaging</a> – 简单的 Go 图像处理扩展包</li>
<li><a href="https://github.com/hawx/img">img</a> – 选择图像处理工具</li>
<li><a href="https://github.com/fogleman/ln">ln</a> – 在 Go 中进行 3D 线条艺术渲染</li>
<li><a href="https://github.com/noelyahan/mergi">mergi</a> – 用于图像处理（合并、裁剪、调整大小、水印、动画）的工具 &amp; Go库</li>
<li><a href="https://github.com/aldor007/mort">mort</a> 用 Go 编写的存储和图像处理服务器</li>
<li><a href="https://github.com/donatj/mpo">mpo</a> – MPO 3D照片的解码和转换工具</li>
<li><a href="https://github.com/thoas/picfit">picfit</a> – 一个用 Go 编写的图像大小调整服务器</li>
<li><a href="https://github.com/fogleman/pt">pt</a> – 用 Go 编写的路径追踪引擎</li>
<li><a href="https://github.com/nfnt/resize">resize</a> – 在 Go 中用常见的插值方法调整图像大小</li>
<li><a href="https://github.com/bamiaux/rez">rez</a> – 在纯 Go 和 SIMD 中调整图片大小</li>
<li><a href="https://github.com/muesli/smartcrop">smartcrop</a> – 为任意图像和裁剪尺寸找到好的裁剪方式</li>
<li><a href="https://github.com/auyer/steganography">steganography</a> – 用于 LSB 加密的纯 Go 库</li>
<li><a href="https://github.com/DimitarPetrov/stegify">stegify</a> – 用于 LSB 窃取的工具，能够隐藏图像中的任何文件</li>
<li><a href="https://github.com/ajstarks/svgo">svgo</a> – 用于生成 SVG 的 Go 语言库</li>
<li><a href="https://github.com/ftrvxmtrx/tga">tga</a> – tga 扩展包是一个 TARGA 图像格式解码器/编码器</li>
<li><a href="https://github.com/mehdipourfar/webp-server">webp-server</a> – 最小化的简单图像服务器，能够对图片进行存储、调整大小、转换和缓存操作</li>
</ul>
<h3 id="iot-物联网">IoT (物联网)</h3>
<blockquote>
<p>用于物联网设备编程的库</p>
</blockquote>
<p><a href="https://github.com/connectordb/connectordb">connectordb</a> – 量化自身与物联网的开源平台</p>
<ul>
<li><a href="https://github.com/goiot/devices">devices</a> – 物联网设备的套件库，提供实验性 x/exp/io</li>
<li><a href="https://github.com/xcodersun/eywa">eywa</a> – Eywa 项目本质上是一个跟踪连接设备的连接管理器</li>
<li><a href="https://github.com/tibcosoftware/flogo">flogo</a> – Flogo 项目是一个开源的物联网边缘应用与集成框架</li>
<li><a href="https://github.com/paypal/gatt">gatt</a> – Gatt 是一个用于构建蓝牙低能耗外设的 Go 扩展包</li>
<li><a href="https://github.com/hybridgroup/gobot/">gobot</a> – Gobot 是一个机器人、物理计算和物联网的框架。</li>
<li><a href="https://github.com/amimof/huego">huego</a> – 为 Go 提供的飞利浦 Hue 客户端库</li>
<li><a href="https://github.com/vaelen/iot/">iot</a> – IoT 是实现谷歌物联网核心设备的一个简单框架</li>
<li><a href="https://github.com/Mainflux/mainflux">mainflux</a> – 工业物联网消息和设备管理服务器</li>
<li><a href="https://periph.io/">periph</a> – 外围设备 I/O 与低级板设施连接</li>
<li><a href="https://github.com/sensorbee/sensorbee">sensorbee</a> – 用于物联网的轻量级流处理引擎</li>
</ul>
<h3 id="任务调度">任务调度</h3>
<blockquote>
<p>处理调度任务的库</p>
</blockquote>
<p><a href="http://github.com/onatm/clockwerk">clockwerk</a> – 使用简单的流式语法来调度周期性任务的 Go 扩展包</p>
<ul>
<li><a href="https://github.com/whiteShtef/clockwork">clockwork</a> – 简单直观的 Go 任务调度库</li>
<li><a href="https://github.com/krayzpipes/cronticker">cronticker</a> – 一个支持 Cron 计划的 ticker 实现</li>
<li><a href="https://github.com/rk/go-cron">go-cron</a> – Go 的简单 Cron 库，可以在特定的日期和时间，以不同的时间间隔执行闭包或函数，从一秒钟一次到一年一次，主要用于 Web 应用和长期运行的守护进程</li>
<li><a href="https://github.com/reugn/go-quartz">go-quartz</a> – 简单、零依赖的 Go 调度库</li>
<li><a href="https://github.com/go-co-op/gocron">gocron</a> – 简单流畅的 Go 任务调度库，这是一个积极维护的<a href="https://github.com/jasonlvhit/gocron">jasonlvhit/gocron</a>分支</li>
<li><a href="https://github.com/roylee0704/gron">gron</a> – 使用一个简单的 Go API 定义基于时间的任务，Gron 的调度器将调用并运行它们</li>
<li><a href="https://github.com/bamzi/jobrunner">JobRunner</a> – 智能且功能丰富的 Cron 任务调度器，内置作业队列和实时监控</li>
<li><a href="https://github.com/albrow/jobs">jobs</a> – 持久而灵活的后台工作库</li>
<li><a href="https://github.com/kilgaloon/leprechaun">leprechaun</a> – 任务调度器，支持Webhook、Cron 和经典调度</li>
<li><a href="https://github.com/carlescere/scheduler">scheduler</a> – 让 Cron 任务调度变得简单</li>
</ul>
<h3 id="json">JSON</h3>
<blockquote>
<p>处理 JSON 的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/spyzhov/ajson">ajson</a> – 支持 JSONPath 的 Golang 抽象 JSON 库</li>
<li><a href="https://github.com/cocoonspace/dynjson">dynjson</a> – 适用于动态 API 的客户端可定制 JSON 格式</li>
<li><a href="https://github.com/lucassscaravelli/ej">ej</a> – 简明扼要地写入和读取不同来源的 JSON</li>
<li><a href="https://github.com/vtopc/epoch">epoch</a> – 内置时间和 Unix 时间戳的相互转化，时间类型是 JSON 格式</li>
<li><a href="https://github.com/valyala/fastjson">fastjson</a> – 快速 JSON 解析器和验证器，没有自定义结构，没有代码生成，没有反射</li>
<li><a href="https://github.com/skanehira/gjo">gjo</a> – 创建 JSON 对象的小型工具集</li>
<li><a href="https://github.com/tidwall/gjson">GJSON</a> – 只需一行代码即可获得 JSON 值</li>
<li><a href="https://github.com/ddymko/go-jsonerror">go-jsonerror</a> – Go-JsonError旨在让我们能够轻松创建符合 JsonApi 规范的 JSON 响应错误</li>
<li><a href="https://github.com/nicklaw5/go-respond">go-respond</a> – 用于处理常见 HTTP JSON 响应的 Go 扩展包</li>
<li><a href="https://github.com/elgs/gojq">gojq</a> – 在 Golang 中进行 JSON 查询</li>
<li><a href="https://github.com/ChimeraCoder/gojson">gojson</a> – 从 JSON 示例中自动生成 Go 结构体定义</li>
<li><a href="https://github.com/yazgazan/jaydiff">JayDiff</a> – 用 Go 编写的 JSON diff 工具</li>
<li><a href="https://github.com/wI2L/jettison">jettison</a> – 提供快速灵活的 Go JSON 编码器</li>
<li><a href="https://mholt.github.io/json-to-go/">JSON-to-Go</a> – 将 JSON 转化为 Go 结构体</li>
<li><a href="https://github.com/m-zajac/json2go">json2go</a> – JSON 与 Go 结构体的高级转换工具，提供了能够解析多个 JSON 文档并创建适合所有文档的结构体的包</li>
<li><a href="https://github.com/AmuzaTkts/jsonapi-errors">jsonapi-errors</a> – 基于 JSON API 错误引用的 Go 绑定</li>
<li><a href="https://github.com/wI2L/jsondiff">jsondiff</a> – 基于 RFC6902（JSON补丁）的 Go JSON diff 库</li>
<li><a href="https://github.com/miolini/jsonf">jsonf</a> – 用于高亮格式化和结构化查询匹配 JSON 的控制台工具</li>
<li><a href="https://github.com/ricardolonga/jsongo">jsongo</a> – 让创建 JSON 对象更容易的 Fluent API</li>
<li><a href="https://github.com/RichardKnop/jsonhal">jsonhal</a> – 一个简单的 Go 包，将自定义结构体编码为兼容 HAL 的 JSON 响应</li>
<li><a href="https://github.com/sinhashubham95/jsonic">jsonic</a> – 用来处理和查询 JSON 的工具，不需要以类型安全的方式定义结构</li>
<li><a href="https://github.com/zerosnake0/jzon">jzon</a> – 兼容标准 API/行为的 JSON 库</li>
<li><a href="https://github.com/Qntfy/kazaam">kazaam</a> – 对 JSON 文档进行任意转换的 API</li>
<li><a href="https://github.com/mickep76/mapslice-json">mapslice-json</a> – Go MapSlice，用于对 JSON 中的字典进行有序解析/反解析</li>
<li><a href="https://github.com/sanbornm/mp">mp</a> – 简单的命令行邮件解析器，它目前接受标准输入并输出 JSON</li>
</ul>
<h3 id="日志">日志</h3>
<blockquote>
<p>日志文件生成和处理库</p>
</blockquote>
<ul>
<li><a href="https://github.com/amoghe/distillog">distillog</a> – 精炼的分级日志（可以把它想象成stdlib + log levels）</li>
<li><a href="https://github.com/kpango/glg">glg</a> – glg 是一个简单、快速的 Go 分级日志库</li>
<li><a href="https://github.com/lajosbencz/glo">glo</a> – 受 PHP Monolog 启发的日志库，具有同样的日志等级</li>
<li><a href="https://github.com/golang/glog">glog</a> – 适用于 Go 的分级执行日志</li>
<li><a href="https://github.com/utahta/go-cronowriter">go-cronowriter</a> – 简单的写入器，可以根据当前日期和时间自动轮替日志文件，就像 cronolog 一样</li>
<li><a href="https://github.com/pieterclaerhout/go-log">go-log</a> – 一个包含轨迹追踪、对象转储和可选时间戳的日志库</li>
<li><a href="https://github.com/subchen/go-log">go-log</a> – 简单可配置的Go 记录库，包括级别、格式化和写入器</li>
<li><a href="https://github.com/siddontang/go-log">go-log</a> – 包含级别和多个处理器的 Go 日志库</li>
<li><a href="https://github.com/ian-kent/go-log">go-log</a> – Go 版本 Log4j 实现</li>
<li><a href="https://github.com/apsdehal/go-logger">go-logger</a> – 简单的 Go 程序日志库，包含级别处理器</li>
<li><a href="https://github.com/sadlil/gologger">gologger</a> – 简单易用的 Go 日志库，支持在 Colored Console、Simple Console、File 或 Elasticsearch 中记录日志</li>
<li><a href="https://github.com/aphistic/gomol">gomol</a> – 多输出、结构化的 Go 日志库，具有可扩展的日志输出功能</li>
<li><a href="https://github.com/One-com/gone/tree/master/log">gone/log</a> – 快速、可扩展、全功能、兼容 std-lib 源的日志库</li>
<li><a href="https://github.com/henvic/httpretty">httpretty</a> – 在终端美观打印出常规 HTTP 请求，以便于调试（类似 http.DumpRequest）</li>
<li><a href="https://github.com/ssgreg/journald">journald</a> – Systemd Journal 原生 API 的 Go 实现，用于日志记录</li>
<li><a href="https://github.com/clok/kemba">kemba</a> – 一个受<a href="https://github.com/visionmedia/debug">debug</a>启发的小型调试日志工具，非常适合 CLI 工具和应用程序</li>
<li><a href="https://github.com/aerogo/log">log</a> – 一个 O(1) 日志系统，支持将一个日志连接到多个写入器（例如 stdout、文件或者 TCP 连接）</li>
<li><a href="https://github.com/apex/log">log</a> – Go 结构化日志包</li>
<li><a href="https://github.com/go-playground/log">log</a> – 简单、可配置、可扩展的 Go 结构化日志库</li>
<li><a href="https://github.com/teris-io/log">log</a> – Go 的结构化日志接口，用于将日志门面与它的具体实现隔离开来</li>
<li><a href="https://github.com/firstrow/logvoyage">log-voyage</a> – 用 Go 编写的全功能日志 SAAS</li>
<li><a href="https://github.com/inconshreveable/log15">log15</a> – 简单、功能强大的 Go 日志库</li>
<li><a href="https://github.com/ewwwwwqm/logdump">logdump</a> – 多级日志包</li>
<li><a href="https://github.com/chzyer/logex">logex</a> – Golang 日志库，支持跟踪和级别，由标准日志库封装</li>
<li><a href="https://github.com/azer/logger">logger</a> – 适用于 Go 的最小化日志库</li>
<li><a href="https://github.com/borderstech/logmatic">logmatic</a> – 为 Golang 提供的具有动态日志级别配置的彩色日志库</li>
<li><a href="https://github.com/mbndr/logo">logo</a> – 可配置多个写入器的 Golang 日志</li>
<li><a href="https://github.com/Sirupsen/logrus">logrus</a> – Go 结构化日志库</li>
<li><a href="https://github.com/cabify/logrusiowriter">logrusiowriter</a> – 通过 <a href="https://github.com/sirupsen/logrus">logrus</a> 日志实现的 <code>io.Writer</code></li>
<li><a href="https://github.com/sebest/logrusly">logrusly</a> – 用于发送错误到 <a href="https://www.loggly.com/">Loggly</a> 的 <a href="https://github.com/sirupsen/logrus">logrus</a> 插件</li>
<li><a href="https://github.com/logur/logur">logur</a> – 一个优秀的日志接口，聚合了日志的最佳实践，并且为一些流行的日志库提供了适配器和集成（<a href="https://github.com/sirupsen/logrus">logrus</a>、<a href="https://github.com/go-kit/kit/tree/master/log">go-kit log</a>、<a href="https://github.com/uber-go/zap">zap</a>、<a href="https://github.com/rs/zerolog">zerolog</a> 等）</li>
<li><a href="https://github.com/hashicorp/logutils">logutils</a> – 用于在 Go 中扩展标准日志库的实用工具</li>
<li><a href="https://github.com/mgutz/logxi">logxi</a> – 12-factor 应用日志库</li>
<li><a href="https://github.com/natefinch/lumberjack">lumberjack</a> – 实现了 io.WriteCloser 的简单日志库.</li>
<li><a href="https://github.com/jbrodriguez/mlog">mlog</a> – 简单的 Go 日志模块，包含 5 个等级，1 个可选的轮替日志文件功能以及 stdout/stderr 输出</li>
<li><a href="https://github.com/francoispqt/onelog">onelog</a> – Onelog 是一个非常简单但又非常高效的 JSON 日志，它是目前所有场景下最快的 JSON 日志，同时，它也是资源分配最少的日志之一</li>
<li><a href="https://github.com/go-ozzo/ozzo-log">ozzo-log</a> – 高性能日志，支持日志级别、分类和过滤，可以发送过滤后的日志消息给多个目标（比如控制台、网络、邮件等）</li>
<li><a href="https://github.com/phuslu/log">phuslu/log</a> – Structured Logging Made Easy.</li>
<li><a href="https://github.com/arthurkiller/rollingWriter">rollingwriter</a> – RollingWriter 是一个自动轮替的 <code>io.Writer</code> 实现，支持通过多个策略来提供日志轮替功能</li>
<li><a href="https://github.com/cihub/seelog">seelog</a> – 有灵活的调度、过滤和格式化的日志功能</li>
<li><a href="https://github.com/davecgh/go-spew">spew</a> – 为 Go 数据结构实现一个深层的美观打印功能，以帮助调试</li>
<li><a href="https://github.com/simukti/sqldb-logger">sqldb-logger</a> – 一个用于 Go SQL 数据库驱动的日志，无需修改现有的 *sql.DB stdlib 用法。</li>
<li><a href="https://github.com/alexcesaro/log">stdlog</a> – Stdlog 是一个面向对象的分级日志库，适用于调度任务</li>
<li><a href="https://github.com/hpcloud/tail">tail</a> – 模仿 BSD tail 程序的 Go 包</li>
<li><a href="https://github.com/xfxdev/xlog">xlog</a> – 插件式架构的灵活 Go 日志系统，带有分级控制、多个日志输出目标和自定义日志格式等功能</li>
<li><a href="https://github.com/rs/xlog">xlog</a> – 为可以感知 <code>net/context</code> 的 HTTP 处理器提供的结构化日志库</li>
<li><a href="https://github.com/uber-go/zap">zap</a> – 快速、结构化、分级日志库</li>
<li><a href="https://github.com/rs/zerolog">zerolog</a> – 零分配 JSON 日志库</li>
<li><a href="https://github.com/edoger/zkits-logger">zkits-logger</a> – 一个功能强大的零分配 JSON 日志库</li>
</ul>
<h3 id="机器学习">机器学习</h3>
<blockquote>
<p>机器学习库</p>
</blockquote>
<ul>
<li><a href="https://github.com/jbrukh/bayesian">bayesian</a> – 基于 Golang 的原生贝叶斯分类</li>
<li><a href="https://github.com/ryanbressler/CloudForest">CloudForest</a> – 基于纯 Go 实现的、快速、灵活、多线程的、用于机器学习的决策树集合</li>
<li><a href="https://github.com/MaxHalford/eaopt">eaopt</a> – 一个演化优化库</li>
<li><a href="https://github.com/khezen/evoli">evoli</a> – 遗传算法与粒子群优化库</li>
<li><a href="https://github.com/Fontinalis/fonet">fonet</a> – 基于 Go 编写的深度神经网络库</li>
<li><a href="https://github.com/e-XpertSolutions/go-cluster">go-cluster</a> – k-models 和 k-prototypes 聚类算法的 Go 实现</li>
<li><a href="https://github.com/patrikeh/go-deep">go-deep</a> – 基于 Go 的、特征丰富的神经网络库</li>
<li><a href="https://github.com/white-pony/go-fann">go-fann</a> – 快速人工神经网络（FANN）库的 Go 实现</li>
<li><a href="https://github.com/nikolaydubina/go-featureprocessing">go-featureprocessing</a> – 在 Go 中进行快速便捷的特征处理，实现低延迟的机器学习</li>
<li><a href="https://github.com/thoj/go-galib">go-galib</a> – 基于 Go 编写的遗传算法库</li>
<li><a href="https://github.com/daviddengcn/go-pr">go-pr</a> – Golang 中的模式识别包</li>
<li><a href="https://github.com/goml/gobrain">gobrain</a> – 基于 Go 编写的神经网络</li>
<li><a href="https://github.com/e-dard/godist">godist</a> – 多种概率分布，以及相关方法</li>
<li><a href="https://github.com/tomcraven/goga">goga</a> – Go 遗传算法库</li>
<li><a href="https://github.com/sjwhitworth/golearn">GoLearn</a> – Go 通用机器学习库</li>
<li><a href="https://github.com/danieldk/golinear">golinear</a> – 在 Go 中集成 liblinear</li>
<li><a href="https://github.com/surenderthakran/gomind">GoMind</a> – 一个简单的 Go 神经网络库</li>
<li><a href="https://github.com/cdipaolo/goml">goml</a> – Go 在线机器学习库</li>
<li><a href="https://github.com/dathoangnd/gonet">gonet</a> – 适用于 Go 的神经网络</li>
<li><a href="https://github.com/c-bata/goptuna">Goptuna</a> – 用 Go 编写的黑盒函数的贝叶斯优化框架</li>
<li><a href="https://github.com/timkaye11/goRecommend">goRecommend</a> – 用 Go 编写的推荐算法库</li>
<li><a href="https://github.com/gorgonia/gorgonia">gorgonia</a> – 基于图的计算库，比如Theano for Go，它提供了构建各种机器学习和神经网络算法的基元</li>
<li><a href="https://github.com/zhenghaoz/gorse">gorse</a> – 一个用 Go 编写的、基于协同过滤的离线推荐系统后台</li>
<li><a href="https://github.com/asafschers/goscore">goscore</a> – 针对 PMML 的 Go Scoring API</li>
<li><a href="https://github.com/otiai10/gosseract">gosseract</a> – 使用 Tesseract C++ 库来实现 OCR（光学字符识别）的 Go 包</li>
<li><a href="https://github.com/datastream/libsvm">libsvm</a> – libsvm golang 版本，基于 LIBSVM 3.14</li>
<li><a href="https://github.com/jinyeom/neat">neat</a> – 即插即用、并行的 Go 框架，适用于 NeuroEvolution of Augmenting Topologies（NEAT）</li>
<li><a href="https://github.com/schuyler/neural-go">neural-go</a> – 在 Go 中实现多层感知器网络，通过反向传播进行训练</li>
<li><a href="https://github.com/otiai10/ocrserver">ocrserver</a> – 一个简单的 OCR API 服务器，很容易通过 Docker 和 Heroku 部署</li>
<li><a href="https://github.com/owulveryck/onnx-go">onnx-go</a> – Go 开放神经网络交换（ONNX）接口</li>
<li><a href="https://github.com/ThePaw/probab">probab</a> – 概率分布函数，贝叶斯推理，用纯 Go 语言编写</li>
<li><a href="https://github.com/malaschitz/randomForest">randomforest</a> – 易于使用的 Go Random Forest 库</li>
<li><a href="https://github.com/muesli/regommend">regommend</a> – 推荐与协同过滤引擎</li>
<li><a href="https://github.com/eaigner/shield">shield</a> – 适用于 Go 的贝叶斯文本分类器，具有灵活的 tokenizers 和存储后端</li>
<li><a href="https://github.com/galeone/tfgo">tfgo</a> – 简单易用的 Tensorflow 库：简化了 Tensorflow Go 官方库的使用，可以在 Go 中定义计算图形，加载并执行用 Python 训练的模型</li>
<li><a href="https://github.com/Xamber/Varis">Varis</a> – Golang 神经网络</li>
</ul>
<h3 id="消息系统">消息系统</h3>
<blockquote>
<p>消息系统实现库</p>
</blockquote>
<ul>
<li><a href="https://github.com/kak-tus/ami">ami</a> – 基于 Redis Cluster Streams 的可靠队列 Go 客户端</li>
<li><a href="https://github.com/sideshow/apns2">APNs2</a> – 适用于 Go 的 HTTP/2 苹果推送通知提供商 —— 可以向 iOS、tvOS、Safari 和 OSX 应用程序发送推送通知</li>
<li><a href="https://github.com/hibiken/asynq">Asynq</a> – 一个基于 Redis 构建的简单、可靠、高效的 Go 分布式任务队列</li>
<li><a href="https://github.com/Clivern/Beaver">Beaver</a> – 一个实时消息服务器，可用于构建可扩展的应用内通知、多人游戏、支持 Web 和 移动端的聊天应用</li>
<li><a href="https://github.com/Jeffail/benthos">Benthos</a> – 在多个协议之间传递消息流的库</li>
<li><a href="https://github.com/mustafaturan/bus">Bus</a> – 内部通信的最小化消息总线实现</li>
<li><a href="https://github.com/centrifugal/centrifugo">Centrifugo</a> – Go 实时消息（基于 Websockets 或 SockJS）服务器</li>
<li><a href="https://github.com/jeroenrinzema/commander">Commander</a> – 一个高级事件驱动的消费者/生产者，支持各种”方言”，如 Apache Kafka</li>
<li><a href="https://github.com/confluentinc/confluent-kafka-go">Confluent Kafka Golang Client</a> – confluent-kafka-go 是 Confluent 为 Apache Kafka 和 Confluent 平台开发的 Golang 客户端</li>
<li><a href="https://github.com/godbus/dbus">dbus</a> – D-Bus 的原生 Go 绑定</li>
<li><a href="https://github.com/appleboy/drone-line">drone-line</a> – 使用二进制、Docker 或者 Drone CI 发送 <a href="https://at.line.me/en">Line</a> 通知</li>
<li><a href="https://github.com/olebedev/emitter">emitter</a> – 用 Go 的方式发送事件，有通配符、谓语、取消以及很多其他好处</li>
<li><a href="https://github.com/agoalofalife/event">event</a> – 实现观察者模式</li>
<li><a href="https://github.com/asaskevich/EventBus">EventBus</a> – 具有异步兼容性的轻量级事件总线。</li>
<li><a href="https://github.com/osamingo/gaurun-client">gaurun-client</a> – Go 编写的 Gaurun 客户端</li>
<li><a href="https://github.com/desertbit/glue">Glue</a> – 健壮的 Go 和 Javascript Socket 库（替代 Socket.io）</li>
<li><a href="https://github.com/cheshir/go-mq">go-mq</a> – 具备声明式配置的 RabbitMQ 客户端</li>
<li><a href="https://github.com/TheCreeper/go-notify">go-notify</a> – freedesktop 通知规范的原生实现</li>
<li><a href="https://github.com/nsqio/go-nsq">go-nsq</a> – NSQ 的官方 Go 扩展包</li>
<li><a href="https://github.com/jirenius/go-res">go-res</a> – 使用 NATS 和 Resgate 构建 REST/实时服务扩展包，客户端是无缝同步的</li>
<li><a href="https://github.com/googollee/go-socket.io">go-socket.io</a> – golang socket.io 库， 一个实时应用框架</li>
<li><a href="https://github.com/maxatome/go-vitotrol">go-vitotrol</a> – Viessmann Vitotrol 网络服务的客户端库</li>
<li><a href="https://github.com/trivago/gollum">Gollum</a> – 多路复用器，收集不同来源的信息，并将其广播到一组目的地</li>
<li><a href="https://github.com/jcuga/golongpoll">golongpoll</a> – HTTP longpoll 服务器库，让 web pub-sub 变得简单</li>
<li><a href="https://github.com/Terry-Mao/gopush-cluster">gopush-cluster</a> – gopush-cluster 是一个 go 推送服务器集群</li>
<li><a href="https://github.com/appleboy/gorush">gorush</a> – 使用<a href="https://github.com/sideshow/apns2">APNs2</a> 和 Google <a href="https://github.com/google/go-gcm">GCM</a>实现的推送通知服务器</li>
<li><a href="https://github.com/alexsniffin/gosd">gosd</a> – 一个用于调度何时向通道发送消息的库</li>
<li><a href="https://github.com/smancke/guble">guble</a> – 使用推送通知（Google Firebase Cloud Messaging、Apple Push Notification 服务、SMS）以及 Websockets、REST API 构建的消息服务器，具有分布式操作和消息持久性功能</li>
<li><a href="https://github.com/leozz37/hare">hare</a> – 一个用于发送消息和监听 TCP 套接字的用户友好库</li>
<li><a href="https://github.com/leandro-lugaresi/hub">hub</a> – 一个用于 Go 应用程序的消息/事件集线器，使用发布/订阅模式，支持别名</li>
<li><a href="https://github.com/socifi/jazz">jazz</a> – 一个简单的 RabbitMQ 抽象层，用于队列管理以及消息的发布和消费</li>
<li><a href="https://github.com/RichardKnop/machinery">machinery</a> – 基于分布式消息传递的异步任务队列/作业队列。</li>
<li><a href="https://github.com/nanomsg/mangos">mangos</a> – 纯 Go 实现的、带有传输交互性的 Nanomsg（可伸缩协议）</li>
<li><a href="https://github.com/olahol/melody">melody</a> – 用于处理 Websocket 会话的极简框架，包括广播和自动 ping/pong 处理</li>
<li><a href="https://github.com/dunglas/mercure">Mercure</a> – 使用 Mercure 协议调度服务器发送更新（基于 Server-Sent Events）的库</li>
<li><a href="https://github.com/vardius/message-bus">messagebus</a> – messagebus 是一个简单的 Go 异步消息总线，尤其擅长于作为处理事件源、CQRS、DDD 的事件总线</li>
<li><a href="https://github.com/nats-io/nats">NATS Go Client</a> – 轻量级、高性能的发布订阅和分布式队列消息系统</li>
<li><a href="https://github.com/rafaeljesus/nsq-event-bus">nsq-event-bus</a> – 围绕 NSQ 话题和频道的小封装库</li>
<li><a href="https://github.com/dailymotion/oplog">oplog</a> – REST API 的通用 oplog/replication 系统</li>
<li><a href="https://github.com/tuxychandru/pubsub">pubsub</a> – 简单的 Go 发布订阅包</li>
<li><a href="https://github.com/rafaeljesus/rabbus">rabbus</a> – 在 amqp 交换和队列上的一个小封装库</li>
<li><a href="https://github.com/jandelgado/rabtap">rabtap</a> – RabbitMQ 瑞士军刀命令行应用</li>
<li><a href="https://github.com/sybrexsys/RapidMQ">RapidMQ</a> – RapidMQ 是用于管理本地消息队列的轻量级可靠库</li>
<li><a href="https://github.com/robinjoseph08/redisqueue">redisqueue</a> – redisqueue 是一个使用 Redis Streams 驱动的队列作为生产者和消费者的库</li>
<li><a href="https://github.com/sbabiv/rmqconn">rmqconn</a> – RabbitMQ 重连，封装了 amqp.Connection 和 amqp.Dial，当连接断开时会在调用 Close() 关闭连接前允许重连</li>
<li><a href="https://github.com/Shopify/sarama">sarama</a> – Apache Kafka Go 库</li>
<li><a href="https://github.com/uniqush/uniqush-push">Uniqush-Push</a> – Redis 驱动的统一推送服务，用于向移动设备发送应用通知</li>
<li><a href="https://github.com/pebbe/zmq4">zmq4</a> – 针对 ZeroMQ 版本 4 的 Go 接口，兼容 <a href="https://github.com/pebbe/zmq3">版本 3</a> 和 <a href="https://github.com/pebbe/zmq2">版本 2</a></li>
</ul>
<h3 id="office-软件">Office 软件</h3>
<ul>
<li><a href="https://github.com/unidoc/unioffice">unioffice</a> – 用于创建和处理 Word(.docx)、Excel(.xlsx) 和 Powerpoint(.pptx) 文档的纯 Go 库</li>
</ul>
<h4 id="excel">Excel</h4>
<blockquote>
<p>Excel 处理库</p>
</blockquote>
<ul>
<li><a href="https://github.com/360EntSecGroup-Skylar/excelize">excelize</a> – 用于读写 Microsoft Excel™ (XLSX) 文件的 Golang 库</li>
<li><a href="https://github.com/szyhf/go-excel">go-excel</a> – 一个简单轻巧的阅读器，可以把一个类似于 relative-db 的 Excel 当做一个表格来读</li>
<li><a href="https://github.com/fterrag/goxlsxwriter">goxlsxwriter</a> – Golang 集成 libxlsxwriter 编写 XLSX (Microsoft Excel) 文件</li>
<li><a href="https://github.com/tealeg/xlsx">xlsx</a> – 简化 Go 程序中最新版本 Microsoft Excel 所使用的 XML 格式的读取</li>
<li><a href="https://github.com/plandem/xlsx">xlsx</a> – 在 Go 程序中快速安全地读取/更新现有的 Microsoft Excel 文件</li>
</ul>
<h3 id="其他">其他</h3>
<h4 id="依赖注入">依赖注入</h4>
<blockquote>
<p>依赖注入处理库</p>
</blockquote>
<ul>
<li><a href="https://github.com/magic003/alice">alice</a> – 为 Golang 添加依赖注入容器</li>
<li><a href="https://github.com/golobby/container">container</a> – 一个功能强大的 IoC 容器，界面流畅，易于使用</li>
<li><a href="https://github.com/goava/di">di</a> – 一个用于 Go 语言的依赖注入容器</li>
<li><a href="https://github.com/uber-go/dig">dig</a> – 一个基于反射的 Go 依赖注入工具包</li>
<li><a href="https://github.com/i-love-flamingo/dingo">dingo</a> – 一个基于 Guice 的 Go 依赖注入工具包</li>
<li><a href="https://github.com/uber-go/fx">fx</a> – 一个基于依赖注入的 Go 应用框架（建立在 dig 之上）</li>
<li><a href="https://github.com/vardius/gocontainer">gocontainer</a> – 简单依赖注入容器</li>
<li><a href="https://github.com/goioc/di">goioc/di</a> – 受 Spring 启发的依赖注入容器</li>
<li><a href="https://github.com/logrange/linker">linker</a> – 一个基于反射的依赖注入和反转控制库，支持组件生命周期</li>
<li><a href="https://github.com/Fs02/wire">wire</a> – 为 Golang 提供严格的运行时依赖注入</li>
</ul>
<h4 id="项目布局">项目布局</h4>
<blockquote>
<p>非官方的项目目录结构模式集合</p>
</blockquote>
<ul>
<li><a href="https://github.com/lacion/cookiecutter-golang">cookiecutter-golang</a> – 一个 Go 应用程序模板，用于按照生产最佳实践快速启动项目</li>
<li><a href="https://github.com/zitryss/go-sample">go-sample</a> – 一个带有真实代码的 Go 应用项目的布局示例。</li>
<li><a href="https://github.com/Fs02/go-todo-backend">go-todo-backend</a> – Go Todo 项目后端示例，采用模块化项目布局以便于构建微服务</li>
<li><a href="https://github.com/golang-standards/project-layout">golang-standards/project-layout</a> – Go 生态系统中常见的传统和新兴项目布局模式合集</li>
<li><a href="https://github.com/golang-templates/seed">golang-templates/seed</a> – Go 应用 GitHub 仓库模板</li>
<li><a href="https://github.com/sagikazarmark/modern-go-application">modern-go-application</a> – 现代化的 Go 应用模板和示例</li>
<li><a href="https://github.com/catchplay/scaffold">scaffold</a> – Scaffold 可以生成一个入门级的 Go 项目布局，从而让开发者专注于业务逻辑的实现</li>
</ul>
<h4 id="字符串">字符串</h4>
<blockquote>
<p>字符串处理库</p>
</blockquote>
<ul>
<li><a href="https://gitlab.com/tymonx/go-formatter">go-formatter</a> – 实现<strong>替换字段</strong>，用大括号”{}”包裹格式化字符串</li>
<li><a href="https://github.com/gobeam/Stringy">gobeam/Stringy</a> – 字符串操作库，可将字符串转换为 camel case，snake case，kebab case / slugify 等</li>
<li><a href="https://github.com/ozgio/strutil">strutil</a> – 字符串工具集</li>
<li><a href="https://github.com/huandu/xstrings">xstrings</a> – 从其他语言移植过来的有用的字符串函数集合</li>
</ul>
<h4 id="未分类">未分类</h4>
<ul>
<li><a href="https://github.com/mudler/anagent">anagent</a> – 简约、可插拔的 Golang evloop/timer 处理程序，具有依赖注入功能</li>
<li><a href="https://github.com/antchfx/antch">antch</a> – 一个快速、强大、可扩展的网络爬虫框架</li>
<li><a href="https://github.com/mholt/archiver">archiver</a> – 用于制作和解压 .zip 和 .tar.gz 压缩文件的库和命令</li>
<li><a href="https://github.com/artyom/autoflags">autoflags</a> – 可以从结构体字段自动定义命令行标识的 Go 扩展包</li>
<li><a href="https://github.com/kirillDanshin/avgRating">avgRating</a> – 根据威尔逊得分公式计算平均得分和评分</li>
<li><a href="https://github.com/dimiro1/banner">banner</a> – 在您的 Go 应用程序中添加漂亮的横幅</li>
<li><a href="https://github.com/mojocn/base64Captcha">base64Captcha</a> – Base64captch 支持数字、字母、算术、音频和数字字母验证码</li>
<li><a href="https://github.com/distatus/battery">battery</a> – 跨平台、标准化的电池信息库</li>
<li><a href="https://github.com/icza/bitio">bitio</a> – 高度优化的 Go 位级读写器</li>
<li><a href="https://github.com/digitalcrab/browscap_go">browscap_go</a> – <a href="http://browscap.org/">Browser Capabilities Project</a> 的 Go 库</li>
<li><a href="https://github.com/steambap/captcha">captcha</a> – captcha 扩展包为验证码生成提供了一个易于使用的、配置优于约定的 API</li>
<li><a href="https://github.com/cstockton/go-conv">conv</a> – conv 扩展包为不同 Go 类型提供了快速直观的转化</li>
<li><a href="https://github.com/miolini/datacounter">datacounter</a> – readers/writer/http.ResponseWriter Go 计数器</li>
<li><a href="https://github.com/pioz/faker">faker</a> – Go 随机伪造数据和结构体生成器</li>
<li><a href="https://github.com/go-ffmt/ffmt">ffmt</a> – 显示人类可读的美观数据</li>
<li><a href="https://github.com/TwinProduction/gatus">gatus</a> – 自动化服务健康仪表盘</li>
<li><a href="https://github.com/gabrie30/ghorg">ghorg</a> – 快速将整个组织/用户仓库克隆到一个目录中，支持GitHub、GitLab 和 Bitbucket</li>
<li><a href="https://github.com/jolestar/go-commons-pool">go-commons-pool</a> – Golang 通用对象池</li>
<li><a href="https://github.com/go-openapi">go-openapi</a> – 用于解析和使用 open-api 协议的包集合</li>
<li><a href="https://github.com/eapache/go-resiliency">go-resiliency</a> – Golang 弹性模式</li>
<li><a href="https://github.com/gen2brain/go-unarr">go-unarr</a> – RAR、TAR、ZIP 和 7z 压缩文件的解压库</li>
<li><a href="https://github.com/brianvoe/gofakeit">gofakeit</a> – Go 编写的随机数据生成器</li>
<li><a href="https://github.com/antham/gommit">gommit</a> – 分析 git 提交消息，确保它们遵循定义的模式</li>
<li><a href="https://github.com/shirou/gopsutil">gopsutil</a> – 用于获取进程和系统利用率（CPU、内存、磁盘等）的跨平台库</li>
<li><a href="https://github.com/osamingo/gosh">gosh</a> – 提供 Go 统计处理器、结构体、测量方法</li>
<li><a href="https://github.com/haxpax/gosms">gosms</a> – 基于 Go 的本地短信网关，可以用来发送短信</li>
<li><a href="https://github.com/cabify/gotoprom">gotoprom</a> – 为官方 Prometheus 客户端提供的类型安全监控构建器封装库</li>
<li><a href="https://github.com/pariz/gountries">gountries</a> – 公开国家和分区数据的软件包</li>
<li><a href="https://github.com/dimiro1/health">health</a> – 易于使用、可扩展的健康检查库</li>
<li><a href="https://github.com/etherlabsio/healthcheck">healthcheck</a> – 一个针对 RESTful 服务的、约定优于配置的并发健康检查 HTTP 处理器</li>
<li><a href="https://github.com/Wing924/hostutils">hostutils</a> – 一个用于打包和解压 FQDNs 列表的 Golang 库</li>
<li><a href="https://github.com/osamingo/indigo">indigo</a> – 使用 Sonyflake 和 Base58 编码的分布式唯一 ID 生成器</li>
<li><a href="https://github.com/hyperboloide/lk">lk</a> – 一个简单的 Golang 授权许可库</li>
<li><a href="https://github.com/llir/llvm">llvm</a> – 在纯 Go 中与 LLVM IR 交互的库</li>
<li><a href="https://github.com/pascaldekloe/metrics">metrics</a> – 用于监控基础设施和 Prometheus 阐述的库</li>
<li><a href="https://github.com/alwindoss/morse">morse</a> – 用于转换摩尔斯电码的库</li>
<li><a href="https://github.com/lrita/numa">numa</a> – NUMA 是一个实用程序库，它是用 Go 编写的，它帮助我们编写一些 NUMA-AWARED 代码</li>
<li><a href="https://github.com/hyperboloide/pdfgen">pdfgen</a> – 从 JSON 请求中生成 PDF 的 HTTP 服务</li>
<li><a href="https://github.com/mavihq/persian">persian</a> – Go 中一些用于波斯语的实用工具</li>
<li><a href="https://github.com/aofei/sandid">sandid</a> – 地球上的每一粒沙子都有自己的 ID</li>
<li><a href="https://github.com/Wing924/shellwords">shellwords</a> – 一个 Golang 库，用于根据 UNIX Bourne shell 的单词解析规则操作字符串</li>
<li><a href="https://github.com/teris-io/shortid">shortid</a> – 分布式生成超短的、唯一的、非连续的、URL 友好的 ID</li>
<li><a href="https://github.com/containrrr/shoutrrr">shoutrrr</a> – 提供了对各种消息服务进行简单访问的通知库，如 slack、mattermost、gotify 和 smtp 等</li>
<li><a href="https://github.com/qmuntal/stateless">stateless</a> – 一个用于创建状态机的流式库</li>
<li><a href="https://github.com/go-playground/stats">stats</a> – 监控 Go MemStats + 系统统计，如内存、Swap 和 CPU，并通过 UDP 发送到任何你想记录的地方</li>
<li><a href="https://github.com/hackebrot/turtle">turtle</a> – Go Emoji 表情</li>
<li><a href="https://github.com/pantrif/url-shortener">url-shortener</a> – 一个现代的、强大的、健壮的、支持 MySQL 的短 URL 微服务</li>
<li><a href="https://github.com/azr/generators/tree/master/varhandler">VarHandler</a> – 生成 HTTP 输入和输出处理的模板</li>
<li><a href="https://github.com/rkoesters/xdg">xdg</a> – FreeDesktop.org (xdg) 规范在 Go 中的实现</li>
<li><a href="https://github.com/go-xkg/xkg">xkg</a> – X 键盘抓取器</li>
</ul>
<h3 id="自然语言处理">自然语言处理</h3>
<blockquote>
<p>自然语言处理库</p>
</blockquote>
<ul>
<li><a href="https://github.com/bojanz/address">address</a> – 处理地址表示，验证和格式化</li>
<li><a href="https://github.com/detectlanguage/detectlanguage-go">detectlanguage</a> – 语言检测 API Go 客户端，支持批量请求、短语或单词检测</li>
<li><a href="https://github.com/rylans/getlang">getlang</a> – 快速自然语言检测包</li>
<li><a href="https://github.com/nicksnyder/go-i18n/">go-i18n</a> – 包和附带的工具，用于处理本地化文本。</li>
<li><a href="https://github.com/m1/go-localize">go-localize</a> – 简单易于使用的 i18n（国际化和本地化）引擎，用于翻译本地字符串</li>
<li><a href="https://github.com/dveselov/mystem">go-mystem</a> – Yandex.Mystem 的 CGo 绑定 —— 俄语形态分析器</li>
<li><a href="https://github.com/nuance/go-nlp">go-nlp</a> – 用于处理离散概率分布的实用工具，以及其他对做 NLP 工作有用的工具</li>
<li><a href="https://github.com/mozillazg/go-pinyin">go-pinyin</a> – 中国汉字到汉语拼音的转换器</li>
<li><a href="https://github.com/agonopol/go-stem">go-stem</a> – 波特词干算法实现</li>
<li><a href="https://github.com/mozillazg/go-unidecode">go-unidecode</a> – Unicode 文本的 ASCII 码翻译</li>
<li><a href="https://github.com/danieldk/go2vec">go2vec</a> – word2vec 嵌入的读取器和实用函数</li>
<li><a href="https://github.com/yanyiwu/gojieba">gojieba</a> – 中文分词算法<a href="https://github.com/fxsjy/jieba">jieba</a>的 Go 实现</li>
<li><a href="https://github.com/rjohnsondev/golibstemmer">golibstemmer</a> – 雪球 libstemmer 库的 Go 绑定，包括 porter 2</li>
<li><a href="https://github.com/dinopuguh/gosentiwordnet">gosentiwordnet</a> – 在 Go 中使用 sentiwordnet 词典的情感分析器</li>
<li><a href="https://github.com/xujiajun/gotokenizer">gotokenizer</a> – 为 Golang 提供的基于字典和 Bigram 语言模型的 tokenizer，现在只支持中文分割</li>
<li><a href="https://github.com/fiam/gounidecode">gounidecode</a> – Go Unicode 翻译器</li>
<li><a href="https://github.com/jonreiter/govader">govader</a> – <a href="https://github.com/cjhutto/vaderSentiment">VADER Sentiment Analysis</a> 的 Go 实现</li>
<li><a href="https://github.com/go-ego/gse">gse</a> – 高效的文本分割，支持英文、中文、日文等</li>
<li><a href="https://github.com/goodsign/icu">icu</a> – icu4c C 库检测和转换功能的 Cgo 绑定，保证与 50.1 版本兼容</li>
<li><a href="https://github.com/mehanizm/iuliia-go">iuliia-go</a> – 将西里尔语翻译成拉丁语</li>
<li><a href="https://github.com/ikawaha/kagome">kagome</a> – 用纯 Go 编写的 JP 形态分析器</li>
<li><a href="https://github.com/goodsign/libtextcat">libtextcat</a> – 为 libtextcat C 库提供 Cgo 绑定，保证与 2.2 版本兼容</li>
<li><a href="https://github.com/awsong/MMSEGO">MMSEGO</a> – 这是中文分词算法<a href="http://technology.chtsai.org/mmseg/">MMSEG</a>的 GO 实现</li>
<li><a href="https://github.com/Shixzie/nlp">nlp</a> – 从字符串中提取值，并用 nlp 填充你的结构体</li>
<li><a href="https://github.com/james-bowman/nlp">nlp</a> – 支持 LSA（Latent Semantic Analysis）的 Go 自然语言处理库</li>
<li><a href="https://github.com/rookii/paicehusk">paicehusk</a> – Paice/Husk Stemming 算法的 Golang 实现</li>
<li><a href="https://github.com/striker2000/petrovich">petrovich</a> – Petrovich 是一个将俄文名称转变成给定语法规则的库</li>
<li><a href="https://github.com/a2800276/porter">porter</a> – 这是 Martin Porter 的波特词干算法的 C 语言实现的一个相当简单的移植</li>
<li><a href="https://github.com/zhenjl/porter2">porter2</a> – 非常快的 Porter 2 词干算法</li>
<li><a href="https://github.com/jdkato/prose">prose</a> – 用于文本处理的库，支持分词、语音部分标记、命名实体提取等，目前仅支持英文</li>
<li><a href="https://github.com/afjoseph/RAKE.Go">RAKE.go</a> – 快速自动关键词提取算法（RAKE）的 Go 端口</li>
<li><a href="https://github.com/blevesearch/segment">segment</a> – 按照<a href="http://www.unicode.org/reports/tr29/">Unicode标准附件#29</a>中的描述执行 Unicode 文本分割的 Go 库</li>
<li><a href="https://github.com/neurosnap/sentences">sentences</a> – 语句分词器：将文本转换为子句列表</li>
<li><a href="https://github.com/osamingo/shamoji">shamoji</a> – shamoji 是用 Go 编写的文字过滤包</li>
<li><a href="https://github.com/goodsign/snowball">snowball</a> – 为 Go 提供的 Snowball stemmer port (cgo 封装器)，提供词干提取功能 <a href="http://snowball.tartarus.org/">Snowball native</a></li>
<li><a href="https://github.com/nlpodyssey/spago">spaGO</a> – 适用于 Go 的机器学习和自然语言处理库</li>
<li><a href="https://github.com/dchest/stemmer">stemmer</a> – 适用于 Go 语言的 Stemmer 包，支持英文和德文</li>
<li><a href="https://github.com/pebbe/textcat">textcat</a> – 基于 n-gram 的文本分类包，支持 UTF-8 和原始文本</li>
<li><a href="https://github.com/alexsergivan/transliterator">transliterator</a> – 提供单向的字符串翻译，支持特定语言的翻译规则</li>
<li><a href="https://github.com/abadojack/whatlanggo">whatlanggo</a> – Go 自然语言检测包，支持 84 种语言和 24 种脚本（如拉丁文、西里尔文等）</li>
<li><a href="https://github.com/olebedev/when">when</a> – 自然 EN 和 RU 语言日期/时间解析器，具有可插拔规则</li>
</ul>
<h3 id="网络">网络</h3>
<blockquote>
<p>用于处理各层网络的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/mdlayher/arp">arp</a> – arp 包实现了 RFC 826 中描述的 ARP 协议</li>
<li><a href="https://github.com/stabbycutyou/buffstreams">buffstreams</a> – 通过 TCP 让流式协议缓冲区数据变得简单</li>
<li><a href="https://github.com/zubairhamed/canopus">canopus</a> – CoAP 客户端/服务器的实现（RFC 7252）</li>
<li><a href="https://github.com/yl2chen/cidranger">cidranger</a> – 将 IP 地址转化为 CIDR</li>
<li><a href="https://github.com/mdlayher/dhcp6">dhcp6</a> – dhcp6 包实现了符合 RFC 3315 规范的 DHCPv6 服务器</li>
<li><a href="https://github.com/miekg/dns">dns</a> – 处理 DNS 的 Go 库</li>
<li><a href="https://github.com/songgao/ether">ether</a> – 跨平台 Go 包，用于发送和接收以太帧</li>
<li><a href="https://github.com/mdlayher/ethernet">ethernet</a> – ethernet 包实现了 IEEE 802.3 Ethernet II 帧和 IEEE 802.1Q VLAN 标签的编码和解析</li>
<li><a href="https://github.com/valyala/fasthttp">fasthttp</a> – fasthttp 包是一个快速的 HTTP 实现，比 net/http 包快十倍</li>
<li><a href="https://github.com/fortio/fortio">fortio</a> – 提供了负载测试库、命令行工具、高级 echo 服务器和 Web UI，允许指定一组每秒查询的负载、记录延迟直方图和其他有用的统计数据，并将它们绘制成图，支持 Tcp、Http、gRPC</li>
<li><a href="https://github.com/jlaffaye/ftp">ftp</a> – ftp 包实现了一个遵循 <a href="http://tools.ietf.org/html/rfc959">RFC 959</a> 规范的 FTP 客户端</li>
<li><a href="https://github.com/xtaci/gaio">gaio</a> – Proactor 模式下高性能的 Golang 异步 IO 网络库</li>
<li><a href="https://github.com/Allenxuxu/gev">gev</a> – gev 是一个基于 Reactor 模式的、轻量级的、快速非阻塞的 TCP 网络库</li>
<li><a href="https://github.com/DrmagicE/gmqtt">gmqtt</a> – Gmqtt 是一个灵活的、高性能 MQTT broker 库，完整实现了 MQTT V3.1.1 协议</li>
<li><a href="https://github.com/panjf2000/gnet">gnet</a> – gnet 是一个基于纯 Go 实现的高性能、轻量级、非阻塞、事件驱动的网络框架</li>
<li><a href="https://github.com/google/gnxi">gNxI</a> – 使用 gNMI 和 gNOI 协议的网络管理工具集合</li>
<li><a href="https://github.com/hashicorp/go-getter">go-getter</a> – 使用 URL 从多个源下载文件或者目录的 Go 库</li>
<li><a href="https://github.com/joeig/go-powerdns">go-powerdns</a> – 在 Golang 中集成PowerDNS API 绑定</li>
<li><a href="https://github.com/ccding/go-stun">go-stun</a> – 通过 Go 语言实现的 STUN 客户端 (遵循 RFC 3489 和 RFC 5389 规范)</li>
<li><a href="https://github.com/osrg/gobgp">gobgp</a> – 基于 Go 语言实现的 BGP</li>
<li><a href="https://github.com/averageflow/gohooks">gohooks</a> – GoHooks 让发送和消费来自 Go 应用的安全 Web Hooks 变得简单，灵感来自 Spatie 的 Laravel Webhook 客户端和服务器</li>
<li><a href="https://github.com/sunwxg/golibwireshark">golibwireshark</a> – golibwireshark 包使用了 libwireshark 库来解码 pcap 文件并进行数据分析</li>
<li><a href="https://github.com/google/gopacket">gopacket</a> – 通过 libpcap 绑定的 packet 处理 Go 库</li>
<li><a href="https://github.com/akrennmair/gopcap">gopcap</a> – libpcap 的 Go 封装</li>
<li><a href="https://github.com/sunwxg/goshark">goshark</a> – goshark 包使用 tshark 解码 IP 包，并创建分析包的数据结构</li>
<li><a href="https://github.com/soniah/gosnmp">gosnmp</a> – 处理 SNMP 操作的原生 Go 库</li>
<li><a href="https://github.com/gansidui/gotcp">gotcp</a> – 快速编写 TCP 应用的 Go 包</li>
<li><a href="https://github.com/cavaliercoder/grab">grab</a> – 管理文件下载的 Go 包</li>
<li><a href="https://github.com/koofr/graval">graval</a> – 实验性 FTP 服务器框架</li>
<li><a href="https://github.com/gchaincl/httplab">HTTPLab</a> – HTTPLabs 用于接收 HTTP 请求并伪造响应</li>
<li><a href="https://github.com/wzshiming/httpproxy">httpproxy</a> – HTTP 代理处理器</li>
<li><a href="https://github.com/c-robinson/iplib">iplib</a> – 处理 IP 地址的库 (net.IP、net.IPNet)，灵感来自 Python <a href="https://docs.python.org/3/library/ipaddress.html">ipaddress</a> 和 Ruby <a href="https://ruby-doc.org/stdlib-2.5.1/libdoc/ipaddr/rdoc/IPAddr.html">ipaddr</a></li>
<li><a href="https://github.com/udhos/jazigo">jazigo</a> – Jazigo 是一个基于 Go 编写的工具，用于获取多个网络设备的配置</li>
<li><a href="https://github.com/xtaci/kcp-go">kcp-go</a> – KCP – 快速可靠的ARQ协议实现</li>
<li><a href="https://github.com/xtaci/kcptun">kcptun</a> – 基于 KCP 协议的、非常简单且快速的 UDP 隧道</li>
<li><a href="https://github.com/fanux/lhttp">lhttp</a> – 功能强大的 websocket 框架，让构建 IM 服务器更加简单轻松</li>
<li><a href="https://github.com/ian-kent/linkio">linkio</a> – 读取器/写入器接口的网络连接速度模拟</li>
<li><a href="https://github.com/kirillDanshin/llb">llb</a> – 这是一个非常简单但快速的代理服务器后台，可通过零内存分配和快速响应重定向到预定义域</li>
<li><a href="https://github.com/hashicorp/mdns">mdns</a> – 基于 Golang 的简单 mDNS (Multicast DNS) 客户端/服务端实现库</li>
<li><a href="https://eclipse.org/paho/clients/golang/">mqttPaho</a> – Paho Go Client 提供了一个 MQTT 客户端库，用于通过 TCP、TLS 或者 WebSocket 连接到 MQTT brokers</li>
<li><a href="https://github.com/intel-go/nff-go">NFF-Go</a> – 为云和裸机快速开发高性能网络功能的框架（原YANFF）</li>
<li><a href="https://github.com/aerogo/packet">packet</a> – 通过 TCP 和 UDP 发送包，它可以在需要时缓冲消息和热交换连接</li>
<li><a href="https://github.com/yahoo/panoptes-stream">panoptes-stream</a> – 一个云原生分布式流媒体网络遥测 (支持 gNMI、Juniper JTI 和 Cisco MDT)</li>
<li><a href="https://github.com/schollz/peerdiscovery">peerdiscovery</a> – 纯 Go 实现的、使用 UDP 组播的跨平台 Local Peer Discovery</li>
<li><a href="https://github.com/aybabtme/portproxy">portproxy</a> – 简单 TCP 代理，在 API 中添加了 CORS 支持</li>
<li><a href="https://github.com/polera/publicip">publicip</a> – publicip 包会返回你的公共 IPv4 地址（网络出口）</li>
<li><a href="https://github.com/lucas-clemente/quic-go">quic-go</a> – 通过纯 Go 实现 QUIC 协议</li>
<li><a href="https://github.com/mdlayher/raw">raw</a> – raw 包支持在设备驱动层对网络接口进行数据读写</li>
<li><a href="https://github.com/pkg/sftp">sftp</a> – sftp 包实现了 https://filezilla-project.org/specs/draft-ietf-secsh-filexfer-02.txt 中描述的 SSH File Transfer Protocol</li>
<li><a href="https://github.com/gliderlabs/ssh">ssh</a> – 用于构建 SSH 服务器的更高级的API（封装了 crypto/ssh）</li>
<li><a href="https://github.com/eduardonunesp/sslb">sslb</a> – 一个超级简单的负载均衡器，</li>
<li><a href="https://github.com/go-rtc/stun">stun</a> – RFC 5389 STUN 协议的 Go 实现</li>
<li><a href="https://github.com/firstrow/tcp_server">tcp_server</a> – 构建更快 TCP 服务器的 Go 库</li>
<li><a href="https://github.com/two/tspool">tspool</a> – 使用 worker pool 来提升性能、保护服务器的 TCP 库</li>
<li><a href="https://github.com/anacrolix/utp">utp</a> – Go uTP 微传输协议实现</li>
<li><a href="https://github.com/yahoo/vssh">vssh</a> – 通过 SSH 协议构建网络和服务器自动化的 Go 库</li>
<li><a href="https://github.com/songgao/water">water</a> – 简单 TUN/TAP 库</li>
<li><a href="https://github.com/pions/webrtc">webrtc</a> – 纯 Go 实现的 WebRTC API</li>
<li><a href="https://github.com/masterzen/winrm">winrm</a> – Go WinRM客户端，可以在 Windows 机器上远程执行命令</li>
<li><a href="https://github.com/xfxdev/xtcp">xtcp</a> – TCP 服务器框架，具有同步全双工通信、优雅关闭和自定义协议等功能特性</li>
</ul>
<h4 id="http-客户端">HTTP 客户端</h4>
<blockquote>
<p>发送 HTTP 请求的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/h2non/gentleman">gentleman</a> – 功能齐全、插件驱动的 HTTP 客户端库</li>
<li><a href="https://github.com/bozd4g/go-http-client">go-http-client</a> – 让 HTTP 调用更简单、更轻松</li>
<li><a href="https://github.com/levigross/grequests">grequests</a> – 著名的 requests 库的 Go 「克隆」实现版本</li>
<li><a href="https://github.com/gojektech/heimdall">heimdall</a> – 增强的 HTTP 客户端，支持重试和 Hystrix 功能</li>
<li><a href="https://github.com/ybbus/httpretry">httpretry</a> – 让默认的 Go HTTP 客户端具备重试功能</li>
<li><a href="https://github.com/sethgrid/pester">pester</a> – Go HTTP 客户端调用库，具备重试、后退和并发功能</li>
<li><a href="https://github.com/monaco-io/request">request</a> – Go HTTP 客户端，如果你有过 axios 或 requests 库的使用经验，你会喜欢它，该库没有任何第三方依赖</li>
<li><a href="https://github.com/go-resty/resty">resty</a> – 简单的 Go HTTP 和 REST 客户端，灵感来自 Ruby rest-client 库</li>
<li><a href="https://github.com/ddo/rq">rq</a> – 一个更好的 Golang stdlib HTTP 客户端接口</li>
<li><a href="https://github.com/dghubble/sling">sling</a> – Sling 是一个用于创建和发送 API 请求的 Go HTTP 客户端库</li>
</ul>
<h3 id="opengl">OpenGL</h3>
<blockquote>
<p>在 Go 中使用 OpenGL 的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/go-gl/gl">gl</a> – 在 Go 中集成 OpenGL</li>
<li><a href="https://github.com/go-gl/glfw">glfw</a> – 在 Go 中集成 GLFW 3</li>
<li><a href="https://github.com/technohippy/go-glmatrix">go-glmatrix</a> – <a href="http://glmatrix.net/">glMatrix</a> 库的 Go 移植版本</li>
<li><a href="https://github.com/goxjs/gl">goxjs/gl</a> – Go 跨平台 OpenGL 绑定（支持 OS X、Linux、Windows、浏览器、iOS、Android）</li>
<li><a href="https://github.com/goxjs/glfw">goxjs/glfw</a> – Go 跨平台 glfw 库，可用于创建 OpenGL 上下文和接收事件</li>
<li><a href="https://github.com/go-gl/mathgl">mathgl</a> – 纯 Go 数学包，专门用于 3D 数学，灵感来自 GLM</li>
</ul>
<h3 id="orm">ORM</h3>
<blockquote>
<p>实现 Object-Relational Mapping 和 datamapping 技术的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/astaxie/beego/tree/master/orm">beego orm</a> – 功能强大的 Go ORM 框架，支持 pq/mysql/sqlite3</li>
<li><a href="https://github.com/facebook/ent">ent</a> – Go 实体框架，简单但功能强大的 ORM ，可用于数据建模（Model）和查询（Query）</li>
<li><a href="https://github.com/jschoedt/go-firestorm">go-firestorm</a> – 适用于 Google/Firebase Cloud Firestore 的简单 ORM</li>
<li><a href="https://github.com/go-pg/pg">go-pg</a> – PostgreSQL ORM，专注于 PostgreSQL 的特定功能和性能优化</li>
<li><a href="https://github.com/jirfag/go-queryset">go-queryset</a> – 100% 类型安全的 ORM，具备基于 GORM 的代码生成功能，并支持 MySQL、PostgreSQL、Sqlite3、SQL Server 等数据库</li>
<li><a href="https://github.com/rushteam/gosql">go-sql</a> – 一个简单的 MySQL ORM</li>
<li><a href="https://github.com/huandu/go-sqlbuilder">go-sqlbuilder</a> – 一个灵活而强大的 SQL 字符串构建库，外加一个零配置的 ORM</li>
<li><a href="https://github.com/gosuri/go-store">go-store</a> – 基于 Redis 驱动的简单快速的 Go 键值对存储库</li>
<li><a href="https://github.com/go-gorm/gorm">GORM</a> – 一个为 Golang 设计的奇妙 ORM 库，对开发者非常友好</li>
<li><a href="https://github.com/xxjwxc/gormt">gormt</a> – 将 Mysql 数据库转化为 GORM 结构体</li>
<li><a href="https://github.com/go-gorp/gorp">gorp</a> – Go 关系型持久化，是 Go 的 ORM 库</li>
<li><a href="https://github.com/Fs02/grimoire">grimoire</a> – Grimoire 是 Golang 的数据库访问层和验证器，支持 MySQL、PostgreSQL 和 SQLite3</li>
<li><a href="https://github.com/abrahambotros/lore">lore</a> – 简单、轻量级的 pseudo-ORM/pseudo-struct-mapping 环境</li>
<li><a href="https://github.com/marlow/marlow">marlow</a> – 从项目结构中生成 ORM，用于编译时的安全保证</li>
<li><a href="https://github.com/gobuffalo/pop">pop/soda</a> – 数据库迁移，表创建、ORM 操作等，支持 MySQL、PostgreSQL 和 SQLite</li>
<li><a href="https://github.com/coocood/qbs">QBS</a> – 一个 Go ORM，支持 Query By Struct</li>
<li><a href="https://github.com/go-reform/reform">reform</a> – 更好的 Go ORM，基于非空接口和代码生成</li>
<li><a href="https://github.com/go-rel/rel">rel</a> – Golang 现代数据库访问层 —— 可测试、可扩展并可以生成一个简洁优雅的 API</li>
<li><a href="https://github.com/volatiletech/sqlboiler">SQLBoiler</a> – ORM 生成器，可以根据你的数据库表结构快速生成功能丰富的 ORM</li>
<li><a href="https://github.com/upper/db">upper.io/db</a> – 通过适配器与不同数据源进行交互的单一接口，这些适配器封装着成熟的数据库驱动程序</li>
<li><a href="https://gitea.com/xorm/xorm">XORM</a> – 简单而功能强大的 Go ORM (支持 MySQL、MyMysql、PostgreSQL、Tidb、SQLite3、MsSql 和 Oracle）</li>
<li><a href="https://github.com/albrow/zoom">Zoom</a> – 基于 Redis 的极速数据存储和查询引擎</li>
</ul>
<h3 id="包管理">包管理</h3>
<blockquote>
<p>包和依赖管理的官方工具</p>
</blockquote>
<ul>
<li><a href="https://golang.org/cmd/go/#hdr-Modules__module_versions__and_more">go modules</a> – Modules 是源代码交换和版本管理的单位，Go 命令直接支持 Modules，包括记录和解决对其他模块的依赖</li>
</ul>
<blockquote>
<p>包管理的官方实验性工具</p>
</blockquote>
<ul>
<li><a href="https://github.com/golang/dep">dep</a> – Go 依赖管理工具</li>
<li><a href="https://go.googlesource.com/vgo/">vgo</a> – 版本化 Go</li>
</ul>
<blockquote>
<p>包和依赖管理的非官方库</p>
</blockquote>
<ul>
<li><a href="https://github.com/Masterminds/glide">glide</a> – 轻松管理 Golang vendor 和 vendored 包，灵感来自 Maven、Bundler 以及 Pip</li>
<li><a href="https://github.com/tools/godep">godep</a> – Go 依赖管理工具，godep 通过修复依赖关系来帮助构建可重用的包</li>
<li><a href="https://github.com/mattn/gom">gom</a> – Go Manager – bundle for go.</li>
<li><a href="https://github.com/nitrous-io/goop">goop</a> – Go 简单依赖管理器，受 Bundler 启发</li>
<li><a href="https://github.com/lunny/gop">gop</a> – 在 GOPATH 之外构建和管理 Go 应用</li>
<li><a href="https://github.com/gpmgo/gopm">gopm</a> – Go 包管理器</li>
<li><a href="https://github.com/kardianos/govendor">govendor</a> – Go 包管理器，用于处理标准 vendor 文件的 Go vendor 工具</li>
<li><a href="https://github.com/pote/gpm">gpm</a> – Go 依赖管理器</li>
<li><a href="https://github.com/VividCortex/johnny-deps">johnny-deps</a> – 使用 Git 的最小依赖版本</li>
<li><a href="https://github.com/lucasepe/modgv">modgv</a> – 将 ‘go mod graph’ 输出转化为 Graphviz 的 DOT 语言</li>
<li><a href="https://github.com/raydac/mvn-golang">mvn-golang</a> – 该插件提供了自动加载 Golang SDK、依赖管理和在 Maven 项目基础架构中启动构建环境的方法</li>
<li><a href="https://github.com/jingweno/nut">nut</a> – Vendor Go 依赖</li>
<li><a href="https://github.com/DamnWidget/VenGO">VenGO</a> – 创建和管理可导出的隔离的 Go 虚拟环境</li>
</ul>
<h3 id="性能">性能</h3>
<ul>
<li><a href="https://github.com/jaegertracing/jaeger">jaeger</a> – 分布式追踪系统</li>
<li><a href="https://github.com/pixie-labs/pixie">pixie</a> – 通过 eBPF 对 Go 应用进行无设备追踪</li>
<li><a href="https://github.com/pkg/profile">profile</a> – 为 Go 提供简单的分析支持包</li>
<li><a href="https://github.com/arl/statsviz">statsviz</a> – 实时可视化 Go 应用程序运行时的统计数据</li>
<li><a href="https://github.com/kamilsk/tracer">tracer</a> – 简单、轻量级追踪</li>
</ul>
<h3 id="查询语言">查询语言</h3>
<ul>
<li><a href="https://github.com/ccbrown/api-fu">api-fu</a> – 全面的 GraphQL 实现</li>
<li><a href="https://github.com/tomwright/dasel">dasel</a> – 在命令行中使用选择器查询和更新数据结构，类似于 jq/yq，但支持 JSON、YAML、TOML 和 XML，运行时零依赖</li>
<li><a href="https://github.com/thedevsaddam/gojsonq">gojsonq</a> – 一个用于查询 JSON 数据的简单 Go 包</li>
<li><a href="https://github.com/tmc/graphql">graphql</a> – GraphQL 解析器 + 工具集</li>
<li><a href="https://github.com/neelance/graphql-go">graphql</a> – 注重易用性的 GraphQL 服务器</li>
<li><a href="https://github.com/graphql-go/graphql">graphql-go</a> – 适用于 Go 的 GraphQL 实现</li>
<li><a href="https://github.com/Zaba505/gws">gws</a> – Apollos 的 GraphQL over Websocket 客户端和服务器实现</li>
<li><a href="https://github.com/elgs/jsonql">jsonql</a> – JSON 查询表达式库</li>
<li><a href="https://github.com/bhmj/jsonslice">jsonslice</a> – 带有高级过滤器的 Jsonpath 查询</li>
<li><a href="https://github.com/a8m/rql">rql</a> – REST API 资源查询语言</li>
<li><a href="https://github.com/timsolov/rest-query-parser">rqp</a> – REST API 查询解析、过滤、验证，支持在查询中直接使用 <code>AND</code>、<code>OR</code> 操作符</li>
<li><a href="https://github.com/SonicRoshan/straf">straf</a> – 将 Golang 结构体轻松地转换为 GraphQL 对象</li>
</ul>
<h3 id="资源嵌入">资源嵌入</h3>
<ul>
<li><a href="https://github.com/mjibson/esc">esc</a> – 将文件嵌入到 Go 程序中，并为其提供 http.FileSystem 接口</li>
<li><a href="https://github.com/UnnoTed/fileb0x">fileb0x</a> – 在 Go 中嵌入文件的简单工具，注重”自定义”和易用性</li>
<li><a href="https://github.com/pyros2097/go-embed">go-embed</a> – 生成将资源文件嵌入到库或可执行文件中的 Go 代码</li>
<li><a href="https://github.com/omeid/go-resources">go-resources</a> – 不花哨的 Go 资源嵌入</li>
<li><a href="https://github.com/GeertJohan/go.rice">go.rice</a> – go.rice 是一个让 HTML、JS、CSS、图片和模板等资源使用更简单的 Go 包</li>
<li><a href="https://github.com/wlbr/mule">mule</a> – 使用 <code>go generate</code> 创建单文件二进制文件，将外部资源如图片、电影……嵌入到 Go 源码中</li>
<li><a href="https://github.com/gobuffalo/packr">packr</a> – 将静态文件嵌入 Go 二进制文件的简单实现</li>
<li><a href="https://github.com/go-playground/statics">statics</a> – 将静态资源嵌入到 Go 文件中，以便让单文件二进制编译 + http.FileSystem + symlinks 可以整合到一起</li>
<li><a href="https://github.com/rakyll/statik">statik</a> – 嵌入静态文件到 Go 可执行文件</li>
<li><a href="https://github.com/wlbr/templify">templify</a> – 嵌入外部模板文件到 Go 代码以便创建单个二进制文件</li>
<li><a href="https://github.com/shurcooL/vfsgen">vfsgen</a> – 生成一个静态地实现了给定虚拟文件系统的 vfsdata.go 文件</li>
</ul>
<h3 id="科学和数据分析">科学和数据分析</h3>
<blockquote>
<p>科学计算和数据分析库</p>
</blockquote>
<ul>
<li><a href="https://github.com/ndabAP/assocentity">assocentity</a> – assocentity 包可以返回单词到给定实体的平均距离</li>
<li><a href="https://github.com/seanhagen/bradleyterry">bradleyterry</a> – 提供 Bradley-Terry 模型用于配对比较</li>
<li><a href="https://github.com/nikolaydubina/calendarheatmap">calendarheatmap</a> – 受 Github 贡献活动启发，通过纯 Go 实现日历热图</li>
<li><a href="https://github.com/vdobler/chart">chart</a> – 适用于 Go 的简单图表绘制库，支持多种图形类型</li>
<li><a href="https://github.com/rocketlaunchr/dataframe-go">dataframe-go</a> – 用于机器学习和统计的数据框架（类似于 pandas）</li>
<li><a href="https://github.com/db47h/decimal">decimal</a> – decimal 包实现了实现任意精度十进制浮点运算</li>
<li><a href="https://github.com/soniah/evaler">evaler</a> – 简单的浮点算术表达式计算器</li>
<li><a href="https://github.com/VividCortex/ewma">ewma</a> – 指数加权移动均线</li>
<li><a href="https://github.com/skelterjohn/geom">geom</a> – Golang 2D 几何</li>
<li><a href="https://github.com/mjibson/go-dsp">go-dsp</a> – Go 数字信号处理</li>
<li><a href="https://github.com/ThePaw/go-gt">go-gt</a> – 用 Go 语言编写的图论算法</li>
<li><a href="https://github.com/kzahedi/goent">goent</a> – 基于 Go 实现熵测量</li>
<li><a href="https://github.com/VividCortex/gohistogram">gohistogram</a> – 数据流的近似直方图</li>
<li><a href="https://github.com/gonum/gonum">gonum</a> – Gonum 是一套用于 Go 编程语言的数值库，包含矩阵、统计、优化等</li>
<li><a href="https://github.com/gonum/plot">gonum/plot</a> – gonum/plot 提供了一个在 Go 中构建和绘制小区的 API</li>
<li><a href="https://github.com/gyuho/goraph">goraph</a> – 纯 Go 图论库（数据结构、算法可视化）</li>
<li><a href="https://github.com/cpmech/gosl">gosl</a> – Go科学库，包含线性代数、FFT、几何、NURBS、数值方法、概率、优化、微分方程等</li>
<li><a href="https://github.com/OGFris/GoStats">GoStats</a> – GoStats 是一个开源的 Golang 数学统计库，主要用于机器学习领域，它涵盖了大部分的统计测量函数</li>
<li><a href="https://github.com/yourbasic/graph">graph</a> – 基础图形算法库</li>
<li><a href="https://github.com/ChristopherRabotin/ode">ode</a> – 普通微分方程（ODE）求解器，支持扩展状态和基于通道的迭代停止条件</li>
<li><a href="https://github.com/paulmach/orb">orb</a> – 支持剪贴、GeoJSON 和 Mapbox Vector Tile 的 2D 几何类型</li>
<li><a href="https://github.com/alixaxel/pagerank">pagerank</a> – 在 Go 中实现的加权 PageRank 算法</li>
<li><a href="https://github.com/sgreben/piecewiselinear">piecewiselinear</a> – 微型线性插值库</li>
<li><a href="https://github.com/claygod/PiHex">PiHex</a> – 十六进制数 Pi 的 Bailey-Borwein-Plouffe 算法实现</li>
<li><a href="https://github.com/khezen/rootfinding">rootfinding</a> – 根查找算法库，用于查找二次函数的根</li>
<li><a href="https://github.com/james-bowman/sparse">sparse</a> – Go 稀疏矩阵格式，用于支持科学和机器学习应用的线性代数，与 gonum 矩阵库兼容</li>
<li><a href="https://github.com/montanaflynn/stats">stats</a> – 包含 Golang 标准库中缺少的常用函数的统计包</li>
<li><a href="https://github.com/nytlabs/streamtools">streamtools</a> – 用于处理数据流的通用图形工具</li>
<li><a href="https://github.com/DavidBelicza/TextRank">TextRank</a> – 在 Golang 中实现的 TextRank，具有可扩展的特征（总结、加权、短语提取）和多线程（goroutine）支持</li>
<li><a href="https://github.com/tchayen/triangolatte">triangolatte</a> – 2D 三角函数库，允许将线条和多边形（都是基于点）翻译成 GPU 语言</li>
</ul>
<h3 id="安全">安全</h3>
<blockquote>
<p>让你的应用更加安全的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/hlandau/acme">acmetool</a> – ACME (Let’s Encrypt) client tool with automatic renewal.</li>
<li><a href="https://github.com/cossacklabs/acra">acra</a> – Network encryption proxy to protect database-based applications from data leaks: strong selective encryption, SQL injections prevention, intrusion detection system.</li>
<li><a href="https://github.com/andskur/argon2-hashing">argon2-hashing</a> – light wrapper around Go’s argon2 package that closely mirrors with Go’s standard library Bcrypt and simple-scrypt package.</li>
<li><a href="https://github.com/raja/argon2pw">argon2pw</a> – Argon2 password hash generation with constant-time password comparison.</li>
<li><a href="https://godoc.org/golang.org/x/crypto/acme/autocert">autocert</a> – Auto provision Let’s Encrypt certificates and start a TLS server.</li>
<li><a href="https://github.com/jaredfolkins/badactor">BadActor</a> – In-memory, application-driven jailer built in the spirit of fail2ban.</li>
<li><a href="https://github.com/Ullaakut/cameradar">Cameradar</a> – Tool and library to remotely hack RTSP streams from surveillance cameras.</li>
<li><a href="https://github.com/mvmaasakkers/certificates">certificates</a> – An opinionated tool for generating tls certificates.</li>
<li><a href="https://github.com/prashantgupta24/firewalld-rest">firewalld-rest</a> – A rest application to dynamically update firewalld rules on a linux server.</li>
<li><a href="https://github.com/m1/go-generate-password">go-generate-password</a> – Password generator that can be used on the cli or as a library.</li>
<li><a href="https://github.com/lane-c-wagner/go-password-validator">go-password-validator</a> – Password validator based on raw cryptographic entropy values.</li>
<li><a href="https://github.com/hillu/go-yara">go-yara</a> – Go Bindings for <a href="https://github.com/plusvic/yara">YARA</a>, the “pattern matching swiss knife for malware researchers (and everyone else)”.</li>
<li><a href="https://github.com/dwin/goArgonPass">goArgonPass</a> – Argon2 password hash and verification designed to be compatible with existing Python and PHP implementations.</li>
<li><a href="https://github.com/dwin/goSecretBoxPassword">goSecretBoxPassword</a> – A probably paranoid package for securely hashing and encrypting passwords.</li>
<li><a href="https://bitbucket.org/vahidi/interpol">Interpol</a> – Rule-based data generator for fuzzing and penetration testing.</li>
<li><a href="https://github.com/go-acme/lego">lego</a> – Pure Go ACME client library and CLI tool (for use with Let’s Encrypt).</li>
<li><a href="https://github.com/awnumar/memguard">memguard</a> – A pure Go library for handling sensitive values in memory.</li>
<li><a href="https://github.com/kevinburke/nacl">nacl</a> – Go implementation of the NaCL set of API’s.</li>
<li><a href="https://github.com/pjebs/optimus-go">optimus-go</a> – ID hashing and Obfuscation using Knuth’s Algorithm.</li>
<li><a href="https://github.com/hlandau/passlib">passlib</a> – Futureproof password hashing library.</li>
<li><a href="https://github.com/unrolled/secure">secure</a> – HTTP middleware for Go that facilitates some quick security wins.</li>
<li><a href="https://github.com/xaionaro-go/secureio">secureio</a> – An keyexchanging+authenticating+encrypting wrapper and multiplexer for <code>io.ReadWriteCloser</code> based on XChaCha20-poly1305, ECDH and ED25519.</li>
<li><a href="https://github.com/elithrar/simple-scrypt">simple-scrypt</a> – Scrypt package with a simple, obvious API and automatic cost calibration built-in.</li>
<li><a href="https://github.com/ssh-vault/ssh-vault">ssh-vault</a> – encrypt/decrypt using ssh keys.</li>
<li><a href="https://github.com/adrianosela/sslmgr">sslmgr</a> – SSL certificates made easy with a high level wrapper around acme/autocert.</li>
<li><a href="https://github.com/cossacklabs/themis">themis</a> – high-level cryptographic library for solving typical data security tasks (secure data storage, secure messaging, zero-knowledge proof authentication), available for 14 languages, best fit for multi-platform apps.</li>
</ul>
<h3 id="序列化">序列化</h3>
<blockquote>
<p>二进制序列化库和工具</p>
</blockquote>
<ul>
<li><a href="https://github.com/PromonLogicalis/asn1">asn1</a> – Asn.1 BER and DER encoding library for golang.</li>
<li><a href="https://github.com/glycerine/bambam">bambam</a> – generator for Cap’n Proto schemas from go.</li>
<li><a href="https://github.com/32leaves/bel">bel</a> – Generate TypeScript interfaces from Go structs/interfaces. Useful for JSON RPC.</li>
<li><a href="https://github.com/ghostiam/binstruct">binstruct</a> – Golang binary decoder for mapping data into the structure.</li>
<li><a href="https://github.com/fxamacker/cbor">cbor</a> – Small, safe, and easy CBOR encoding and decoding library.</li>
<li><a href="https://github.com/pascaldekloe/colfer">colfer</a> – Code generation for the Colfer binary format.</li>
<li><a href="https://github.com/jszwec/csvutil">csvutil</a> – High Performance, idiomatic CSV record encoding and decoding to native Go structures.</li>
<li><a href="https://github.com/epiclabs-io/elastic">elastic</a> – Convert slices, maps or any other unknown value across different types at run-time, no matter what.</li>
<li><a href="https://github.com/huydang284/fixedwidth">fixedwidth</a> – Fixed-width text formatting (UTF-8 supported).</li>
<li><a href="https://github.com/o1egl/fwencoder">fwencoder</a> – Fixed width file parser (encoding and decoding library) for Go.</li>
<li><a href="https://github.com/glycerine/go-capnproto">go-capnproto</a> – Cap’n Proto library and parser for go.</li>
<li><a href="https://github.com/ugorji/go">go-codec</a> – High Performance, feature-Rich, idiomatic encode, decode and rpc library for msgpack, cbor and json, with runtime-based OR code-generation support.</li>
<li><a href="https://github.com/sbourlon/go-lctree">go-lctree</a> – Provides a CLI and primitives to serialize and deserialize <a href="https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation">LeetCode binary trees</a>.</li>
<li><a href="https://github.com/gogo/protobuf">gogoprotobuf</a> – Protocol Buffers for Go with Gadgets.</li>
<li><a href="https://github.com/golang/protobuf">goprotobuf</a> – Go support, in the form of a library and protocol compiler plugin, for Google’s protocol buffers.</li>
<li><a href="https://github.com/json-iterator/go">jsoniter</a> – High-performance 100% compatible drop-in replacement of “encoding/json”.</li>
<li><a href="https://github.com/mitchellh/mapstructure">mapstructure</a> – Go library for decoding generic map values into native Go structures.</li>
<li><a href="https://github.com/yvasiyarov/php_session_decoder">php_session_decoder</a> – GoLang library for working with PHP session format and PHP Serialize/Unserialize functions.</li>
<li><a href="https://github.com/vimeda/pletter">pletter</a> – A standard way to wrap a proto message for message brokers.</li>
<li><a href="https://github.com/tuvistavie/structomap">structomap</a> – Library to easily and dynamically generate maps from static structures.</li>
</ul>
<h3 id="服务器应用">服务器应用</h3>
<ul>
<li><a href="https://github.com/xyproto/algernon">algernon</a> – HTTP/2 web server with built-in support for Lua, Markdown, GCSS and Amber.</li>
<li><a href="https://github.com/caddyserver/caddy">Caddy</a> – Caddy is an alternative, HTTP/2 web server that’s easy to configure and use.</li>
<li><a href="https://www.consul.io/">consul</a> – Consul is a tool for service discovery, monitoring and configuration.</li>
<li><a href="https://github.com/cortesi/devd">devd</a> – Local webserver for developers.</li>
<li><a href="https://github.com/Bilibili/discovery">discovery</a> – A registry for resilient mid-tier load balancing and failover.</li>
<li><a href="https://github.com/krotik/dudeldu">dudeldu</a> – A simple SHOUTcast server.</li>
<li><a href="https://github.com/coreos/etcd">etcd</a> – Highly-available key value store for shared configuration and service discovery.</li>
<li><a href="https://github.com/getfider/fider">Fider</a> – Fider is an open platform to collect and organize customer feedback.</li>
<li><a href="https://github.com/checkr/flagr">Flagr</a> – Flagr is an open-source feature flagging and A/B testing service.</li>
<li><a href="https://github.com/markphelps/flipt">flipt</a> – A self contained feature flag solution written in Go and Vue.js</li>
<li><a href="https://github.com/thomaspoignant/go-feature-flag">go-feature-flag</a> – A feature flag solution, with only a YAML file in the backend (S3, GitHub, HTTP, local file …), no server to install, just add a file in a central system and refer to it.</li>
<li><a href="https://github.com/fabiocicerchia/go-proxy-cache">go-proxy-cache</a> – Simple Reverse Proxy with Caching, written in Go, using Redis.</li>
<li><a href="https://github.com/ortuman/jackal">jackal</a> – An XMPP server written in Go.</li>
<li><a href="https://github.com/rekby/lets-proxy2">lets-proxy2</a> – Reverse proxy for handle https with issue certificates in fly from lets-encrypt.</li>
<li><a href="https://github.com/minio/minio">minio</a> – Minio is a distributed object storage server.</li>
<li><a href="https://github.com/blind-oracle/nginx-prometheus">nginx-prometheus</a> – Nginx log parser and exporter to Prometheus.</li>
<li><a href="http://nsq.io/">nsq</a> – A realtime distributed messaging platform.</li>
<li><a href="https://github.com/camgraff/protoxy">protoxy</a> – A proxy server that converts JSON request bodies to Protocol Buffers.</li>
<li><a href="https://github.com/blind-oracle/psql-streamer">psql-streamer</a> – Stream database events from PostgreSQL to Kafka.</li>
<li><a href="https://github.com/blind-oracle/riemann-relay">riemann-relay</a> – Relay to load-balance Riemann events and/or convert them to Carbon.</li>
<li><a href="https://github.com/spiral/roadrunner">RoadRunner</a> – High-performance PHP application server, load-balancer and process manager.</li>
<li><a href="https://github.com/drakkan/sftpgo">SFTPGo</a> – Fully featured and highly configurable SFTP server with optional FTP/S and WebDAV support. It can serve local filesystem and Cloud Storage backends such as S3 and Google Cloud Storage.</li>
<li><a href="https://github.com/leberKleber/simple-jwt-provider">simple-jwt-provider</a> – Simple and lightweight provider which exhibits JWTs, supports login, password-reset (via mail) and user management.</li>
<li><a href="https://github.com/tricksterproxy/trickster">Trickster</a> – HTTP reverse proxy cache and time series accelerator.</li>
</ul>
<h3 id="流处理">流处理</h3>
<blockquote>
<p>流处理和被动式编程库、工具</p>
</blockquote>
<ul>
<li><a href="https://github.com/reugn/go-streams">go-streams</a> – Go stream processing library.</li>
<li><a href="https://github.com/whitaker-io/machine">machine</a> – Go library for writing and generating stream workers with built in metrics and traceability.</li>
<li><a href="https://github.com/youthlin/stream">stream</a> – Go Stream, like Java 8 Stream: Filter/Map/FlatMap/Peek/Sorted/ForEach/Reduce…</li>
</ul>
<h3 id="模板引擎">模板引擎</h3>
<blockquote>
<p>模板化和词典化的库和工具</p>
</blockquote>
<ul>
<li><a href="https://github.com/yosssi/ace">ace</a> – Ace is an HTML template engine for Go, inspired by Slim and Jade. Ace is a refinement of Gold.</li>
<li><a href="https://github.com/eknkc/amber">amber</a> – Amber is an elegant templating engine for Go Programming Language It is inspired from HAML and Jade.</li>
<li><a href="https://github.com/dskinner/damsel">damsel</a> – Markup language featuring html outlining via css-selectors, extensible via pkg html/template and others.</li>
<li><a href="https://github.com/benbjohnson/ego">ego</a> – Lightweight templating language that lets you write templates in Go. Templates are translated into Go and compiled.</li>
<li><a href="https://github.com/dannyvankooten/extemplate">extemplate</a> – Tiny wrapper around html/template to allow for easy file-based template inheritance.</li>
<li><a href="https://github.com/valyala/fasttemplate">fasttemplate</a> – Simple and fast template engine. Substitutes template placeholders up to 10x faster than <a href="http://golang.org/pkg/text/template/">text/template</a>.</li>
<li><a href="https://github.com/jung-kurt/gofpdf">gofpdf</a> – PDF document generator with high level support for text, drawing and images.</li>
<li><a href="https://github.com/m1/gospin">gospin</a> – Article spinning and spintax/spinning syntax engine, useful for A/B, testing pieces of text/articles and creating more natural conversations.</li>
<li><a href="https://github.com/foolin/goview">goview</a> – Goview is a lightweight, minimalist and idiomatic template library based on golang html/template for building Go web application.</li>
<li><a href="https://github.com/shiyanhui/hero">hero</a> – Hero is a handy, fast and powerful go template engine.</li>
<li><a href="https://github.com/CloudyKit/jet">jet</a> – Jet template engine.</li>
<li><a href="https://github.com/ziutek/kasia.go">kasia.go</a> – Templating system for HTML and other text documents – go implementation.</li>
<li><a href="https://github.com/osteele/liquid">liquid</a> – Go implementation of Shopify Liquid templates.</li>
<li><a href="https://github.com/johnfercher/maroto">maroto</a> – A maroto way to create PDFs. Maroto is inspired in Bootstrap and uses gofpdf. Fast and simple.</li>
<li><a href="https://github.com/hoisie/mustache">mustache</a> – Go implementation of the Mustache template language.</li>
<li><a href="https://github.com/flosch/pongo2">pongo2</a> – Django-like template-engine for Go.</li>
<li><a href="https://github.com/valyala/quicktemplate">quicktemplate</a> – Fast, powerful, yet easy to use template engine. Converts templates into Go code and then compiles it.</li>
<li><a href="https://github.com/aymerick/raymond">raymond</a> – Complete handlebars implementation in Go.</li>
<li><a href="https://github.com/sipin/gorazor">Razor</a> – Razor view engine for Golang.</li>
<li><a href="https://github.com/robfig/soy">Soy</a> – Closure templates (aka Soy templates) for Go, following the <a href="https://developers.google.com/closure/templates/">official spec</a>.</li>
<li><a href="https://github.com/Masterminds/sprig">sprig</a> – Useful template functions for Go templates.</li>
<li><a href="https://github.com/gobuffalo/velvet">velvet</a> – Complete handlebars implementation in Go.</li>
</ul>
<h3 id="测试">测试</h3>
<p>测试代码库和生成测试数据的库*</p>
<h4 id="测试框架">测试框架</h4>
<ul>
<li><a href="https://apitest.dev/">apitest</a> – Simple and extensible behavioural testing library for REST based services or HTTP handlers that supports mocking external http calls and rendering of sequence diagrams.</li>
<li><a href="https://github.com/go-playground/assert">assert</a> – Basic Assertion Library used along side native go testing, with building blocks for custom assertions.</li>
<li><a href="https://github.com/cavaliercoder/badio">badio</a> – Extensions to Go’s <code>testing/iotest</code> package.</li>
<li><a href="https://github.com/h2non/baloo">baloo</a> – Expressive and versatile end-to-end HTTP API testing made easy.</li>
<li><a href="https://github.com/fulldump/biff">biff</a> – Bifurcation testing framework, BDD compatible.</li>
<li><a href="https://github.com/percolate/charlatan">charlatan</a> – Tool to generate fake interface implementations for tests.</li>
<li><a href="https://github.com/SimonBaeumer/commander">commander</a> – Tool for testing cli applications on windows, linux and osx.</li>
<li><a href="https://github.com/covergates/covergates">covergates</a> – Self-hosted code coverage report review and management service.</li>
<li><a href="https://github.com/bradleyjkemp/cupaloy">cupaloy</a> – Simple snapshot testing addon for your test framework.</li>
<li><a href="https://github.com/khaiql/dbcleaner">dbcleaner</a> – Clean database for testing purpose, inspired by <code>database_cleaner</code> in Ruby.</li>
<li><a href="https://github.com/viant/dsunit">dsunit</a> – Datastore testing for SQL, NoSQL, structured files.</li>
<li><a href="https://github.com/fergusstrange/embedded-postgres">embedded-postgres</a> – Run a real Postgres database locally on Linux, OSX or Windows as part of another Go application or test.</li>
<li><a href="https://github.com/viant/endly">endly</a> – Declarative end to end functional testing.</li>
<li><a href="https://github.com/suzuki-shunsuke/flute">flute</a> – HTTP client testing framework.</li>
<li><a href="https://github.com/verdverm/frisby">frisby</a> – REST API testing framework.</li>
<li><a href="http://onsi.github.io/ginkgo/">ginkgo</a> – BDD Testing Framework for Go.</li>
<li><a href="https://github.com/orlangure/gnomock">gnomock</a> – integration testing with real dependencies (database, cache, even Kubernetes or AWS) running in Docker, without mocks.</li>
<li><a href="https://github.com/msoap/go-carpet">go-carpet</a> – Tool for viewing test coverage in terminal.</li>
<li><a href="https://github.com/google/go-cmp">go-cmp</a> – Package for comparing Go values in tests.</li>
<li><a href="https://github.com/Eun/go-hit">go-hit</a> – Hit is an http integration test framework written in golang.</li>
<li><a href="https://github.com/zimmski/go-mutesting">go-mutesting</a> – Mutation testing for Go source code.</li>
<li><a href="https://github.com/maxatome/go-testdeep">go-testdeep</a> – Extremely flexible golang deep comparison, extends the go testing package.</li>
<li><a href="https://github.com/dnaeon/go-vcr">go-vcr</a> – Record and replay your HTTP interactions for fast, deterministic and accurate tests.</li>
<li><a href="https://github.com/franela/goblin">goblin</a> – Mocha like testing framework fo Go.</li>
<li><a href="https://github.com/qiniu/goc">goc</a> – Goc is a comprehensive coverage testing system for The Go Programming Language.</li>
<li><a href="http://labix.org/gocheck">gocheck</a> – More advanced testing framework alternative to gotest.</li>
<li><a href="https://github.com/smartystreets/goconvey/">GoConvey</a> – BDD-style framework with web UI and live reload.</li>
<li><a href="https://github.com/corbym/gocrest">gocrest</a> – Composable hamcrest-like matchers for Go assertions.</li>
<li><a href="https://github.com/DATA-DOG/godog">godog</a> – Cucumber or Behat like BDD framework for Go.</li>
<li><a href="https://github.com/appleboy/gofight">gofight</a> – API Handler Testing for Golang Router framework.</li>
<li><a href="https://github.com/corbym/gogiven">gogiven</a> – YATSPEC-like BDD testing framework for Go.</li>
<li><a href="https://github.com/jfilipczyk/gomatch">gomatch</a> – library created for testing JSON against patterns.</li>
<li><a href="http://onsi.github.io/gomega/">gomega</a> – Rspec like matcher/assertion library.</li>
<li><a href="https://github.com/orfjackal/gospec">GoSpec</a> – BDD-style testing framework for the Go programming language.</li>
<li><a href="https://github.com/stesla/gospecify">gospecify</a> – This provides a BDD syntax for testing your Go code. It should be familiar to anybody who has used libraries such as rspec.</li>
<li><a href="https://github.com/pavlo/gosuite">gosuite</a> – Brings lightweight test suites with setup/teardown facilities to <code>testing</code> by leveraging Go1.7’s Subtests.</li>
<li><a href="https://github.com/gotestyourself/gotest.tools">gotest.tools</a> – A collection of packages to augment the go testing package and support common patterns.</li>
<li><a href="https://github.com/rdrdr/hamcrest">Hamcrest</a> – fluent framework for declarative Matcher objects that, when applied to input values, produce self-describing results.</li>
<li><a href="https://github.com/gavv/httpexpect">httpexpect</a> – Concise, declarative, and easy to use end-to-end HTTP and REST API testing.</li>
<li><a href="https://github.com/kinbiko/jsonassert">jsonassert</a> – Package for verifying that your JSON payloads are serialized correctly.</li>
<li><a href="https://github.com/yookoala/restit">restit</a> – Go micro framework to help writing RESTful API integration test.</li>
<li><a href="https://github.com/jgroeneveld/schema">schema</a> – Quick and easy expression matching for JSON schemas used in requests and responses.</li>
<li><a href="https://github.com/elgohr/stop-and-go">stop-and-go</a> – Testing helper for concurrency.</li>
<li><a href="https://github.com/adamluzsi/testcase">testcase</a> – Idiomatic testing framework for Behavior Driven Development.</li>
<li><a href="https://github.com/go-testfixtures/testfixtures">testfixtures</a> – A helper for Rails’ like test fixtures to test database applications.</li>
<li><a href="https://github.com/stretchr/testify">Testify</a> – Sacred extension to the standard go testing package.</li>
<li><a href="https://godoc.org/github.com/tvastar/test/cmd/testmd">testmd</a> – Convert markdown snippets into testable go code.</li>
<li><a href="https://github.com/zhulongcheng/testsql">testsql</a> – Generate test data from SQL files before testing and clear it after finished.</li>
<li><a href="https://github.com/jgroeneveld/trial">trial</a> – Quick and easy extendable assertions without introducing much boilerplate.</li>
<li><a href="https://github.com/vcaesar/tt">Tt</a> – Simple and colorful test tools.</li>
<li><a href="https://github.com/posener/wstest">wstest</a> – Websocket client for unit-testing a websocket http.Handler.</li>
</ul>
<h4 id="模拟">模拟</h4>
<ul>
<li><a href="https://github.com/maxbrunsfeld/counterfeiter">counterfeiter</a> – Tool for generating self-contained mock objects.</li>
<li><a href="https://github.com/elgohr/go-localstack">go-localstack</a> – Tool for using localstack in AWS testing.</li>
<li><a href="https://github.com/DATA-DOG/go-sqlmock">go-sqlmock</a> – Mock SQL driver for testing database interactions.</li>
<li><a href="https://github.com/DATA-DOG/go-txdb">go-txdb</a> – Single transaction based database driver mainly for testing purposes.</li>
<li><a href="https://github.com/h2non/gock">gock</a> – Versatile HTTP mocking made easy.</li>
<li><a href="https://github.com/golang/mock">gomock</a> – Mocking framework for the Go programming language.</li>
<li><a href="https://github.com/seborama/govcr">govcr</a> – HTTP mock for Golang: record and replay HTTP interactions for offline testing.</li>
<li><a href="https://github.com/SpectoLabs/hoverfly">hoverfly</a> – HTTP(S) proxy for recording and simulating REST/SOAP APIs with extensible middleware and easy-to-use CLI.</li>
<li><a href="https://github.com/jarcoal/httpmock">httpmock</a> – Easy mocking of HTTP responses from external resources.</li>
<li><a href="https://github.com/gojuno/minimock">minimock</a> – Mock generator for Go interfaces.</li>
<li><a href="https://github.com/tv42/mockhttp">mockhttp</a> – Mock object for Go http.ResponseWriter.</li>
<li><a href="https://github.com/pasdam/mockit">mockit</a> – Allows functions and method easy mocking, without defining new types; it’s similar to Mockito for Java.</li>
<li><a href="https://github.com/cabify/timex">timex</a> – A test-friendly replacement for the native <code>time</code> package.</li>
</ul>
<h4 id="模糊化和增量调试减少缩小">模糊化和增量调试/减少/缩小</h4>
<ul>
<li><a href="https://github.com/dvyukov/go-fuzz">go-fuzz</a> – Randomized testing system.</li>
<li><a href="https://github.com/google/gofuzz">gofuzz</a> – Library for populating go objects with random values.</li>
<li><a href="https://github.com/zimmski/tavor">Tavor</a> – Generic fuzzing and delta-debugging framework.</li>
</ul>
<h4 id="selenium-和浏览器控制工具">Selenium 和浏览器控制工具</h4>
<ul>
<li><a href="https://github.com/mafredri/cdp">cdp</a> – Type-safe bindings for the Chrome Debugging Protocol that can be used with browsers or other debug targets that implement it.</li>
<li><a href="https://github.com/knq/chromedp">chromedp</a> – a way to drive/test Chrome, Safari, Edge, Android Webviews, and other browsers supporting the Chrome Debugging Protocol.</li>
<li><a href="https://github.com/aerokube/ggr">ggr</a> – a lightweight server that routes and proxies Selenium WebDriver requests to multiple Selenium hubs.</li>
<li><a href="https://github.com/mxschmitt/playwright-go">playwright-go</a> – browser automation library to control Chromium, Firefox and WebKit with a single API.</li>
<li><a href="https://github.com/go-rod/rod">rod</a> – A Devtools driver to make web automation and scraping easy.</li>
<li><a href="https://github.com/aerokube/selenoid">selenoid</a> – alternative Selenium hub server that launches browsers within containers.</li>
</ul>
<h4 id="注入失败">注入失败</h4>
<ul>
<li><a href="https://github.com/pingcap/failpoint">failpoint</a> – An implementation of <a href="http://www.freebsd.org/cgi/man.cgi?query=fail">failpoints</a> for Golang.</li>
</ul>
<h3 id="文本处理">文本处理</h3>
<blockquote>
<p>文本解析和处理库</p>
</blockquote>
<h4 id="指定格式">指定格式</h4>
<ul>
<li><a href="https://github.com/Guitarbum722/align">align</a> – A general purpose application that aligns text.</li>
<li><a href="https://github.com/sbstjn/allot">allot</a> – Placeholder and wildcard text parsing for CLI tools and bots.</li>
<li><a href="https://github.com/CalebQ42/bbConvert">bbConvert</a> – Converts bbCode to HTML that allows you to add support for custom bbCode tags.</li>
<li><a href="https://github.com/russross/blackfriday">blackfriday</a> – Markdown processor in Go.</li>
<li><a href="https://github.com/microcosm-cc/bluemonday">bluemonday</a> – HTML Sanitizer.</li>
<li><a href="https://github.com/aerogo/codetree">codetree</a> – Parses indented code (python, pixy, scarlet, etc.) and returns a tree structure.</li>
<li><a href="https://github.com/asciimoo/colly">colly</a> – Fast and Elegant Scraping Framework for Gophers.</li>
<li><a href="https://github.com/mingrammer/commonregex">commonregex</a> – A collection of common regular expressions for Go.</li>
<li><a href="https://github.com/slotix/dataflowkit">dataflowkit</a> – Web scraping Framework to turn websites into structured data.</li>
<li><a href="https://github.com/ockam-network/did">did</a> – DID (Decentralized Identifiers) Parser and Stringer in Go.</li>
<li><a href="https://github.com/hscells/doi">doi</a> – Document object identifier (doi) parser in Go.</li>
<li><a href="https://github.com/editorconfig/editorconfig-core-go">editorconfig-core-go</a> – Editorconfig file parser and manipulator for Go.</li>
<li><a href="https://github.com/endeveit/enca">enca</a> – Minimal cgo bindings for <a href="http://cihar.com/software/enca/">libenca</a>.</li>
<li><a href="https://github.com/mickep76/encdec">encdec</a> – Package provides a generic interface to encoders and decodersa.</li>
<li><a href="https://github.com/alixaxel/genex">genex</a> – Count and expand Regular Expressions into all matching Strings.</li>
<li><a href="https://godoc.org/github.com/shurcooL/github_flavored_markdown">github_flavored_markdown</a> – GitHub Flavored Markdown renderer (using blackfriday) with fenced code block highlighting, clickable header anchor links.</li>
<li><a href="https://github.com/ianlopshire/go-fixedwidth">go-fixedwidth</a> – Fixed-width text formatting (encoder/decoder with reflection).</li>
<li><a href="https://github.com/dustin/go-humanize">go-humanize</a> – Formatters for time, numbers, and memory size to human readable format.</li>
<li><a href="https://github.com/adrianmo/go-nmea">go-nmea</a> – NMEA parser library for the Go language.</li>
<li><a href="https://github.com/mattn/go-runewidth">go-runewidth</a> – Functions to get fixed width of the character or string.</li>
<li><a href="https://github.com/mozillazg/go-slugify">go-slugify</a> – Make pretty slug with multiple languages support.</li>
<li><a href="https://github.com/pelletier/go-toml">go-toml</a> – Go library for the TOML format with query support and handy cli tools.</li>
<li><a href="https://github.com/emersion/go-vcard">go-vcard</a> – Parse and format vCard.</li>
<li><a href="https://github.com/trubitsyn/go-zero-width">go-zero-width</a> – Zero-width character detection and removal for Go.</li>
<li><a href="https://github.com/mmcdole/gofeed">gofeed</a> – Parse RSS and Atom feeds in Go.</li>
<li><a href="https://github.com/awalterschulze/gographviz">gographviz</a> – Parses the Graphviz DOT language.</li>
<li><a href="https://github.com/labstack/gommon/tree/master/bytes">gommon/bytes</a> – Format bytes to string.</li>
<li><a href="https://github.com/polera/gonameparts">gonameparts</a> – Parses human names into individual name parts.</li>
<li><a href="https://github.com/andrewstuart/goq">goq</a> – Declarative unmarshaling of HTML using struct tags with jQuery syntax (uses GoQuery).</li>
<li><a href="https://github.com/PuerkitoBio/goquery">GoQuery</a> – GoQuery brings a syntax and a set of features similar to jQuery to the Go language.</li>
<li><a href="https://github.com/zach-klippenstein/goregen">goregen</a> – Library for generating random strings from regular expressions.</li>
<li><a href="https://github.com/zhshch2002/goribot">goribot</a> – A simple golang spider/scraping framework,build a spider in 3 lines.</li>
<li><a href="https://github.com/leonelquinteros/gotext">gotext</a> – GNU gettext utilities for Go.</li>
<li><a href="https://github.com/endeveit/guesslanguage">guesslanguage</a> – Functions to determine the natural language of a unicode text.</li>
<li><a href="https://github.com/JohannesKaufmann/html-to-markdown">html-to-markdown</a> – Convert HTML to Markdown. Even works with entire websites and can be extended through rules.</li>
<li><a href="https://github.com/antchfx/htmlquery">htmlquery</a> – An XPath query package for HTML, lets you extract data or evaluate from HTML documents by an XPath expression.</li>
<li><a href="https://github.com/facebookgo/inject">inject</a> – Package inject provides a reflect based injector.</li>
<li><a href="https://github.com/Wing924/ltsv">ltsv</a> – High performance <a href="http://ltsv.org/">LTSV (Labeled Tab Separated Value)</a> reader for Go.</li>
<li><a href="https://github.com/clbanning/mxj">mxj</a> – Encode / decode XML as JSON or map[string]interface{}; extract values with dot-notation paths and wildcards. Replaces x2j and j2x packages.</li>
<li><a href="https://github.com/jf-tech/omniparser">omniparser</a> – A versatile ETL library that parses text input (CSV/txt/JSON/XML/EDI/X12/EDIFACT/etc) in streaming fashion and transforms data into JSON output using data-driven schema.</li>
<li><a href="https://github.com/foolin/pagser">pagser</a> – Pagser is a simple, extensible, configurable parse and deserialize html page to struct based on goquery and struct tags for golang crawler.</li>
<li><a href="https://github.com/eduncan911/podcast">podcast</a> – iTunes Compliant and RSS 2.0 Podcast Generator in Golang</li>
<li><a href="https://github.com/gortc/sdp">sdp</a> – SDP: Session Description Protocol [<a href="https://tools.ietf.org/html/rfc4566">RFC 4566</a>].</li>
<li><a href="https://github.com/mvdan/sh">sh</a> – Shell parser and formatter.</li>
<li><a href="https://github.com/gosimple/slug">slug</a> – URL-friendly slugify with multiple languages support.</li>
<li><a href="https://github.com/avelino/slugify">Slugify</a> – Go slugify application that handles string.</li>
<li><a href="https://github.com/zhengchun/syndfeed">syndfeed</a> – A syndication feed for Atom 1.0 and RSS 2.0.</li>
<li><a href="https://github.com/BurntSushi/toml">toml</a> – TOML configuration format (encoder/decoder with reflection).</li>
</ul>
<h4 id="实用工具">实用工具</h4>
<ul>
<li><a href="https://github.com/JoshuaDoes/gofuckyourself">gofuckyourself</a> – A sanitization-based swear filter for Go.</li>
<li><a href="https://github.com/bndr/gotabulate">gotabulate</a> – Easily pretty-print your tabular data with Go.</li>
<li><a href="https://github.com/codemodus/kace">kace</a> – Common case conversions covering common initialisms.</li>
<li><a href="https://github.com/nproc/parseargs-go">parseargs-go</a> – string argument parser that understands quotes and backslashes.</li>
<li><a href="https://github.com/codemodus/parth">parth</a> – URL path segmentation parsing.</li>
<li><a href="https://github.com/yourbasic/radix">radix</a> – fast string sorting algorithm.</li>
<li><a href="https://github.com/oriser/regroup">regroup</a> – Match regex expression named groups into go struct using struct tags and automatic parsing.</li>
<li><a href="https://github.com/zoomio/tagify">Tagify</a> – Produces a set of tags from given source.</li>
<li><a href="https://github.com/isbm/textwrap">textwrap</a> – Implementation of <code>textwrap</code> module from Python.</li>
<li><a href="https://github.com/Dynom/TySug">TySug</a> – Alternative suggestions with respect to keyboard layouts.</li>
<li><a href="https://github.com/stackerzzq/xj2go">xj2go</a> – Convert xml or json to go struct.</li>
<li><a href="https://github.com/mvdan/xurls">xurls</a> – Extract urls from text.</li>
</ul>
<h3 id="第三方-apis">第三方 APIs</h3>
<blockquote>
<p>访问第三方 APIs 的库</p>
</blockquote>
<ul>
<li><a href="https://github.com/mehanizm/airtable">airtable</a> – Go client library for the <a href="https://airtable.com/api">Airtable API</a>.</li>
<li><a href="https://github.com/ngs/go-amazon-product-advertising-api">amazon-product-advertising-api</a> – Go Client Library for <a href="https://affiliate-program.amazon.com/gp/advertising/api/detail/main.html">Amazon Product Advertising API</a>.</li>
<li><a href="https://github.com/ChimeraCoder/anaconda">anaconda</a> – Go client library for the Twitter 1.1 API.</li>
<li><a href="https://github.com/aws/aws-sdk-go">aws-sdk-go</a> – The official AWS SDK for the Go programming language.</li>
<li><a href="https://github.com/naegelejd/brewerydb">brewerydb</a> – Go library for accessing the BreweryDB API.</li>
<li><a href="https://github.com/andygrunwald/cachet">cachet</a> – Go client library for <a href="https://cachethq.io/">Cachet (open source status page system)</a>.</li>
<li><a href="https://github.com/jszwedko/go-circleci">circleci</a> – Go client library for interacting with CircleCI’s API.</li>
<li><a href="https://github.com/samuelcouch/clarifai">clarifai</a> – Go client library for interfacing with the Clarifai API.</li>
<li><a href="https://github.com/codeship/codeship-go">codeship-go</a> – Go client library for interacting with Codeship’s API v2.</li>
<li><a href="https://github.com/coinpaprika/coinpaprika-api-go-client">coinpaprika-go</a> – Go client library for interacting with Coinpaprika’s API.</li>
<li><a href="https://github.com/rinchsan/device-check-go">device-check-go</a> – Go client library for interacting with <a href="https://developer.apple.com/documentation/devicecheck">iOS DeviceCheck API</a> v1.</li>
<li><a href="https://github.com/bwmarrin/discordgo">discordgo</a> – Go bindings for the Discord Chat API.</li>
<li><a href="https://github.com/onrik/ethrpc">ethrpc</a> – Go bindings for Ethereum JSON RPC API.</li>
<li><a href="https://github.com/huandu/facebook">facebook</a> – Go Library that supports the Facebook Graph API.</li>
<li><a href="https://github.com/maddevsio/fcm">fcm</a> – Go library for Firebase Cloud Messaging.</li>
<li><a href="https://github.com/emiddleton/gads">gads</a> – Google Adwords Unofficial API.</li>
<li><a href="https://github.com/bit4bit/gami">gami</a> – Go library for Asterisk Manager Interface.</li>
<li><a href="https://github.com/Aorioli/gcm">gcm</a> – Go library for Google Cloud Messaging.</li>
<li><a href="https://github.com/codingsince1985/geo-golang">geo-golang</a> – Go Library to access <a href="https://developers.google.com/maps/documentation/geocoding/intro">Google Maps</a>, <a href="http://open.mapquestapi.com/geocoding/">MapQuest</a>, <a href="https://developer.mapquest.com/documentation/open/nominatim-search">Nominatim</a>, <a href="http://geocoder.opencagedata.com/api.html">OpenCage</a>, <a href="https://msdn.microsoft.com/en-us/library/ff701715.aspx">Bing</a>, <a href="https://www.mapbox.com/developers/api/geocoding/">Mapbox</a>, and <a href="https://wiki.openstreetmap.org/wiki/Nominatim">OpenStreetMap</a> geocoding / reverse geocoding APIs.</li>
<li><a href="https://github.com/google/go-github">github</a> – Go library for accessing the GitHub REST API v3.</li>
<li><a href="https://github.com/shurcooL/githubql">githubql</a> – Go library for accessing the GitHub GraphQL API v4.</li>
<li><a href="https://github.com/circa10a/go-aws-news">go-aws-news</a> – Go application and library to fetch what’s new from AWS.</li>
<li><a href="https://github.com/axelspringer/go-chronos">go-chronos</a> – Go library for interacting with the <a href="https://mesos.github.io/chronos/">Chronos</a> Job Scheduler</li>
<li><a href="https://github.com/PaulRosset/go-hacknews">go-hacknews</a> – Tiny Go client for HackerNews API.</li>
<li><a href="https://github.com/abdullahselek/go-here">go-here</a> – Go client library around the HERE location based APIs.</li>
<li><a href="https://github.com/koffeinsource/go-imgur">go-imgur</a> – Go client library for <a href="https://imgur.com/">imgur</a></li>
<li><a href="https://github.com/andygrunwald/go-jira">go-jira</a> – Go client library for <a href="https://www.atlassian.com/software/jira">Atlassian JIRA</a></li>
<li><a href="https://github.com/gambol99/go-marathon">go-marathon</a> – Go library for interacting with Mesosphere’s Marathon PAAS.</li>
<li><a href="https://github.com/nstratos/go-myanimelist">go-myanimelist</a> – Go client library for accessing the <a href="http://myanimelist.net/modules.php?go=api">MyAnimeList API</a>.</li>
<li><a href="https://github.com/rbretecher/go-postman-collection">go-postman-collection</a> – Go module to work with <a href="https://learning.getpostman.com/docs/postman/collections/creating-collections/">Postman Collections</a> (compatible with Insomnia).</li>
<li><a href="https://github.com/esurdam/go-sophos">go-sophos</a> – Go client library for the <a href="https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en">Sophos UTM REST API</a> with zero dependencies.</li>
<li><a href="https://github.com/sergioaugrod/go-sptrans">go-sptrans</a> – Go client library for the SPTrans Olho Vivo API.</li>
<li><a href="https://gitlab.com/toby3d/telegraph">go-telegraph</a> – Telegraph publishing platform API client.</li>
<li><a href="https://github.com/andygrunwald/go-trending">go-trending</a> – Go library for accessing <a href="https://github.com/trending">trending repositories</a> and <a href="https://github.com/trending/developers">developers</a> at Github.</li>
<li><a href="https://github.com/knspriggs/go-twitch">go-twitch</a> – Go client for interacting with the Twitch v3 API.</li>
<li><a href="https://github.com/dghubble/go-twitter">go-twitter</a> – Go client library for the Twitter v1.1 APIs.</li>
<li><a href="https://github.com/hbagdi/go-unsplash">go-unsplash</a> – Go client library for the <a href="https://unsplash.com/">Unsplash.com</a> API.</li>
<li><a href="https://github.com/nishanths/go-xkcd">go-xkcd</a> – Go client for the xkcd API.</li>
<li><a href="https://github.com/groovili/gogtrends">gogtrends</a> – Google Trends Unofficial API.</li>
<li><a href="https://github.com/cyruzin/golang-tmdb">golang-tmdb</a> – Golang wrapper for The Movie Database API v3.</li>
<li><a href="https://github.com/mamal72/golyrics">golyrics</a> – Golyrics is a Go library to fetch music lyrics data from the Wikia website.</li>
<li><a href="https://github.com/MonaxGT/gomalshare">gomalshare</a> – Go library MalShare API <a href="http://www.malshare.com/">malshare.com</a></li>
<li><a href="https://github.com/michiwend/gomusicbrainz">GoMusicBrainz</a> – Go MusicBrainz WS2 client library.</li>
<li><a href="https://github.com/google/google-api-go-client">google</a> – Auto-generated Google APIs for Go.</li>
<li><a href="https://github.com/chonthu/go-google-analytics">google-analytics</a> – Simple wrapper for easy google analytics reporting.</li>
<li><a href="https://github.com/GoogleCloudPlatform/gcloud-golang">google-cloud</a> – Google Cloud APIs Go Client Library.</li>
<li><a href="https://github.com/ngs/go-google-email-audit-api">google-email-audit-api</a> – Go client library for <a href="https://developers.google.com/admin-sdk/email-audit/">Google G Suite Email Audit API</a>.</li>
<li><a href="https://github.com/n0madic/google-play-scraper">google-play-scraper</a> – Get data from Google Play Store.</li>
<li><a href="https://github.com/utekaravinash/gopaapi5">gopaapi5</a> – Go Client Library for <a href="https://webservices.amazon.com/paapi5/documentation/">Amazon Product Advertising API 5.0</a>.</li>
<li><a href="https://github.com/koltyakov/gosip">gosip</a> – Go client library SharePoint API.</li>
<li><a href="https://github.com/jsgilmore/gostorm">gostorm</a> – GoStorm is a Go library that implements the communications protocol required to write Storm spouts and Bolts in Go that communicate with the Storm shells.</li>
<li><a href="https://github.com/andybons/hipchat">hipchat</a> – This project implements a golang client library for the Hipchat API.</li>
<li><a href="https://github.com/daneharrigan/hipchat">hipchat (xmpp)</a> – A golang package to communicate with HipChat over XMPP.</li>
<li><a href="https://github.com/Henry-Sarabia/igdb">igdb</a> – Go client for the <a href="https://api.igdb.com/">Internet Game Database API</a>.</li>
<li><a href="https://github.com/Henry-Sarabia/kanka">kanka</a> – Go client for the <a href="https://kanka.io/en-US/docs/1.0">Kanka API</a>.</li>
<li><a href="https://github.com/ansd/lastpass-go">lastpass-go</a> – Go client library for the <a href="https://www.lastpass.com/">LastPass</a> API.</li>
<li><a href="https://github.com/clevabit/libgoffi">libgoffi</a> – Library adapter toolbox for native <a href="http://sourceware.org/libffi/">libffi</a> integration</li>
<li><a href="https://github.com/Medium/medium-sdk-go">Medium</a> – Golang SDK for Medium’s OAuth2 API.</li>
<li><a href="https://github.com/andygrunwald/megos">megos</a> – Client library for accessing an <a href="http://mesos.apache.org/">Apache Mesos</a> cluster.</li>
<li><a href="https://github.com/minio/minio-go">minio-go</a> – Minio Go Library for Amazon S3 compatible cloud storage.</li>
<li><a href="https://github.com/dukex/mixpanel">mixpanel</a> – Mixpanel is a library for tracking events and sending Mixpanel profile updates to Mixpanel from your go applications.</li>
<li><a href="https://github.com/mxpv/patreon-go">patreon-go</a> – Go library for Patreon API.</li>
<li><a href="https://github.com/logpacker/PayPal-Go-SDK">paypal</a> – Wrapper for PayPal payment API.</li>
<li><a href="https://github.com/playlyfe/playlyfe-go-sdk">playlyfe</a> – The Playlyfe Rest API Go SDK.</li>
<li><a href="https://github.com/gregdel/pushover">pushover</a> – Go wrapper for the Pushover API.</li>
<li><a href="https://github.com/dimuska139/rawg-sdk-go">rawg-sdk-go</a> – Go library for the <a href="https://rawg.io/">RAWG Video Games Database</a> API</li>
<li><a href="https://github.com/Omie/rrdaclient">rrdaclient</a> – Go Library to access statdns.com API, which is in turn RRDA API. DNS Queries over HTTP.</li>
<li><a href="https://github.com/rapito/go-shopify">shopify</a> – Go Library to make CRUD request to the Shopify API.</li>
<li><a href="https://github.com/rhnvrm/simples3">simples3</a> – Simple no frills AWS S3 Library using REST with V4 Signing written in Go.</li>
<li><a href="https://github.com/nlopes/slack">slack</a> – Slack API in Go.</li>
<li><a href="https://github.com/sergiotapia/smitego">smite</a> – Go package to wraps access to the Smite game API.</li>
<li><a href="https://github.com/rapito/go-spotify">spotify</a> – Go Library to access Spotify WEB API.</li>
<li><a href="https://github.com/sostronk/go-steam">steam</a> – Go Library to interact with Steam game servers.</li>
<li><a href="https://github.com/stripe/stripe-go">stripe</a> – Go client for the Stripe API.</li>
<li><a href="https://github.com/dietsche/textbelt">textbelt</a> – Go client for the textbelt.com txt messaging API.</li>
<li><a href="https://github.com/poorny/translate">translate</a> – Go online translation package.</li>
<li><a href="https://github.com/adlio/trello">Trello</a> – Go wrapper for the Trello API.</li>
<li><a href="https://github.com/mrbenosborne/tripadvisor-golang">TripAdvisor</a> – Go wrapper for the TripAdvisor API.</li>
<li><a href="https://github.com/mattcunningham/gumblr">tumblr</a> – Go wrapper for the Tumblr v2 API.</li>
<li><a href="https://github.com/n0madic/twitter-scraper">twitter-scraper</a> – Scrape the Twitter Frontend API without authentication and limits.</li>
<li><a href="https://github.com/bitfield/uptimerobot">uptimerobot</a> – Go wrapper and command-line client for the Uptime Robot v2 API.</li>
<li><a href="https://github.com/verifid/vl-go">vl-go</a> – Go client library around the VerifID identity verification layer API.</li>
<li><a href="https://github.com/go-playground/webhooks">webhooks</a> – Webhook receiver for GitHub and Bitbucket.</li>
<li><a href="https://github.com/wit-ai/wit-go">wit-go</a> – Go client for wit.ai HTTP API.</li>
<li><a href="https://github.com/brunomvsouza/ynab.go">ynab</a> – Go wrapper for the YNAB API.</li>
<li><a href="https://github.com/gojuno/go-zooz">zooz</a> – Go client for the Zooz API.</li>
</ul>
<h3 id="实用工具-2">实用工具</h3>
<blockquote>
<p>让你工作生活更轻松的通用实用工具集</p>
</blockquote>
<ul>
<li><a href="https://github.com/topfreegames/apm">apm</a> – Process manager for Golang applications with an HTTP API.</li>
<li><a href="https://github.com/icza/backscanner">backscanner</a> – A scanner similar to bufio.Scanner, but it reads and returns lines in reverse order, starting at a given position and going backward.</li>
<li><a href="https://github.com/wesovilabs/beyond">beyond</a> – The Go tool that will drive you to the AOP world!</li>
<li><a href="https://github.com/Henry-Sarabia/blank">blank</a> – Verify or remove blanks and whitespace from strings.</li>
<li><a href="https://github.com/sinhashubham95/bleep">bleep</a> – Perform any number of actions on any set of OS signals in Go.</li>
<li><a href="https://github.com/tmrts/boilr">boilr</a> – Blazingly fast CLI tool for creating projects from boilerplate templates.</li>
<li><a href="https://github.com/miniscruff/changie">changie</a> – Automated changelog tool for preparing releases with lots of customization options.</li>
<li><a href="https://github.com/antham/chyle">chyle</a> – Changelog generator using a git repository with multiple configuration possibilities.</li>
<li><a href="https://github.com/cep21/circuit">circuit</a> – An efficient and feature complete Hystrix like Go implementation of the circuit breaker pattern.</li>
<li><a href="https://github.com/rubyist/circuitbreaker">circuitbreaker</a> – Circuit Breakers in Go.</li>
<li><a href="https://github.com/jonboulle/clockwork">clockwork</a> – A simple fake clock for golang.</li>
<li><a href="https://github.com/SimonBaeumer/cmd">cmd</a> – Library for executing shell commands on osx, windows and linux.</li>
<li><a href="https://github.com/txgruppi/command">command</a> – Command pattern for Go with thread safe serial and parallel dispatcher.</li>
<li><a href="https://github.com/gotidy/copy">copy</a> – Package for fast copying structs of different types.</li>
<li><a href="https://github.com/jutkko/copy-pasta">copy-pasta</a> – Universal multi-workstation clipboard that uses S3 like backend for the storage.</li>
<li><a href="https://github.com/biter777/countries">countries</a> – Full implementation of ISO-3166-1, ISO-4217, ITU-T E.164, Unicode CLDR and IANA ccTLD standarts.</li>
<li><a href="https://github.com/create-go-app/cli">create-go-app</a> – A powerful CLI for create a new production-ready project with backend (Golang), frontend (JavaScript, TypeScript) &amp; deploy automation (Ansible, Docker) by running one command.</li>
<li><a href="https://github.com/bcicen/ctop">ctop</a> – <a href="http://ctop.sh/">Top-like</a> interface (e.g. htop) for container metrics.</li>
<li><a href="https://github.com/posener/ctxutil">ctxutil</a> – A collection of utility functions for contexts.</li>
<li><a href="https://github.com/nikogura/dbt">dbt</a> – A framework for running self-updating signed binaries from a central, trusted repository.</li>
<li><a href="https://github.com/vrecan/death">Death</a> – Managing go application shutdown with signals.</li>
<li><a href="https://github.com/ulule/deepcopier">Deepcopier</a> – Simple struct copying for Go.</li>
<li><a href="https://github.com/derekparker/delve">delve</a> – Go debugger.</li>
<li><a href="https://github.com/kirillDanshin/dlog">dlog</a> – Compile-time controlled logger to make your release smaller without removing debug calls.</li>
<li><a href="https://github.com/reugn/equalizer">equalizer</a> – Quota manager and rate limiter collection for Go.</li>
<li><a href="https://github.com/cristianoliveira/ergo">ergo</a> – The management of multiple local services running over different ports made easy.</li>
<li><a href="https://github.com/nullne/evaluator">evaluator</a> – Evaluate an expression dynamicly based on s-expression. It’s simple and easy to extend.</li>
<li><a href="https://github.com/h2non/filetype">filetype</a> – Small package to infer the file type checking the magic numbers signature.</li>
<li><a href="https://github.com/yaronsumel/filler">filler</a> – small utility to fill structs using “fill” tag.</li>
<li><a href="https://github.com/gookit/filter">filter</a> – provide filtering, sanitizing, and conversion of Go data.</li>
<li><a href="https://github.com/junegunn/fzf">fzf</a> – Command-line fuzzy finder written in Go.</li>
<li><a href="https://github.com/go-playground/generate">generate</a> – runs go generate recursively on a specified path or environment variable and can filter by regex.</li>
<li><a href="https://github.com/antham/ghokin">ghokin</a> – Parallelized formatter with no external dependencies for gherkin (cucumber, behat…).</li>
<li><a href="https://github.com/git-time-metric/gtm">git-time-metric</a> – Simple, seamless, lightweight time tracking for Git.</li>
<li><a href="https://github.com/asticode/go-astitodo">go-astitodo</a> – Parse TODOs in your GO code.</li>
<li><a href="https://github.com/wendigo/go-bind-plugin">go-bind-plugin</a> – go:generate tool for wrapping symbols exported by golang plugins (1.8 only).</li>
<li><a href="https://github.com/gabstv/go-bsdiff">go-bsdiff</a> – Pure Go bsdiff and bspatch libraries and CLI tools.</li>
<li><a href="https://github.com/Eun/go-convert">go-convert</a> – Package go-convert enbles you to convert a value into another type.</li>
<li><a href="https://github.com/mikekonan/go-countries">go-countries</a> – Lightweight lookup over ISO-3166 codes.</li>
<li><a href="https://github.com/ungerik/go-dry">go-dry</a> – DRY (don’t repeat yourself) package for Go.</li>
<li><a href="https://github.com/thoas/go-funk">go-funk</a> – Modern Go utility library which provides helpers (map, find, contains, filter, chunk, reverse, …).</li>
<li><a href="https://github.com/Talento90/go-health">go-health</a> – Health package simplifies the way you add health check to your services.</li>
<li><a href="https://github.com/mozillazg/go-httpheader">go-httpheader</a> – Go library for encoding structs into Header fields.</li>
<li><a href="https://github.com/viney-shih/go-lock">go-lock</a> – go-lock is a lock library implementing read-write mutex and read-write trylock without starvation.</li>
<li><a href="https://github.com/mvmaasakkers/go-problemdetails">go-problemdetails</a> – Go package for working with Problem Details.</li>
<li><a href="https://github.com/beefsack/go-rate">go-rate</a> – Timed rate limiter for Go.</li>
<li><a href="https://github.com/kenkyu392/go-safe">go-safe</a> – Panic-safe sandbox.</li>
<li><a href="https://github.com/ikeikeikeike/go-sitemap-generator">go-sitemap-generator</a> – XML Sitemap generator written in Go.</li>
<li><a href="https://github.com/sadlil/go-trigger">go-trigger</a> – Go-lang global event triggerer, Register Events with an id and trigger the event from anywhere from your project.</li>
<li><a href="https://github.com/carlescere/goback">goback</a> – Go simple exponential backoff package.</li>
<li><a href="https://github.com/zerosnake0/goctx">goctx</a> – Get your context value with high performance.</li>
<li><a href="https://github.com/VividCortex/godaemon">godaemon</a> – Utility to write daemons.</li>
<li><a href="https://github.com/dropbox/godropbox">godropbox</a> – Common libraries for writing Go services/applications from Dropbox.</li>
<li><a href="https://github.com/cosiner/gohper">gohper</a> – Various tools/modules help for development.</li>
<li><a href="https://github.com/msempere/golarm">golarm</a> – Fire alarms with system events.</li>
<li><a href="https://github.com/mlimaloureiro/golog">golog</a> – Easy and lightweight CLI tool to time track your tasks.</li>
<li><a href="https://github.com/bndr/gopencils">gopencils</a> – Small and simple package to easily consume REST APIs.</li>
<li><a href="https://github.com/michiwend/goplaceholder">goplaceholder</a> – a small golang lib to generate placeholder images.</li>
<li><a href="https://github.com/philipjkim/goreadability">goreadability</a> – Webpage summary extractor using Facebook Open Graph and arc90’s readability.</li>
<li><a href="https://github.com/goreleaser/goreleaser">goreleaser</a> – Deliver Go binaries as fast and easily as possible.</li>
<li><a href="https://github.com/wgliang/goreporter">goreporter</a> – Golang tool that does static analysis, unit testing, code review and generate code quality report.</li>
<li><a href="https://github.com/linxGnu/goseaweedfs">goseaweedfs</a> – SeaweedFS client library with almost full features.</li>
<li><a href="https://github.com/ik5/gostrutils">gostrutils</a> – Collections of string manipulation and conversion functions.</li>
<li><a href="https://github.com/subosito/gotenv">gotenv</a> – Load environment variables from <code>.env</code> or any <code>io.Reader</code> in Go.</li>
<li><a href="https://github.com/tenntenn/gpath">gpath</a> – Library to simplify access struct fields with Go’s expression in reflection.</li>
<li><a href="https://github.com/novalagung/gubrak">gubrak</a> – Golang utility library with syntactic sugar. It’s like lodash, but for golang.</li>
<li><a href="https://github.com/miguelpragier/handy">handy</a> – Many utilities and helpers like string handlers/formatters and validators.</li>
<li><a href="https://github.com/guumaster/hostctl">hostctl</a> – A CLI tool to manage /etc/hosts with easy commands.</li>
<li><a href="https://github.com/htcat/htcat">htcat</a> – Parallel and Pipelined HTTP GET Utility.</li>
<li><a href="https://github.com/github/hub">hub</a> – wrap git commands with additional functionality to interact with github from the terminal.</li>
<li><a href="https://github.com/afex/hystrix-go">hystrix-go</a> – Implements Hystrix patterns of programmer-defined fallbacks aka circuit breaker.</li>
<li><a href="https://github.com/immortal/immortal">immortal</a> – *nix cross-platform (OS agnostic) supervisor.</li>
<li><a href="https://github.com/mengzhuo/intrinsic">intrinsic</a> – Use x86 SIMD without writing any assembly code.</li>
<li><a href="https://github.com/clevergo/jsend">jsend</a> – JSend’s implementation writen in Go.</li>
<li><a href="https://github.com/gsamokovarov/jump">jump</a> – Jump helps you navigate faster by learning your habits.</li>
<li><a href="https://github.com/wesovilabs/koazee">koazee</a> – Library inspired in Lazy evaluation and functional programming that takes the hassle out of working with arrays.</li>
<li><a href="https://github.com/aplescia-chwy/lets-go">lets-go</a> – Go module that provides common utilities for Cloud Native REST API development. Also contains AWS Specific utilities.</li>
<li><a href="https://github.com/mennanov/limiters">limiters</a> – Rate limiters for distributed applications in Golang with configurable back-ends and distributed locks.</li>
<li><a href="https://github.com/jaschaephraim/lrserver">lrserver</a> – LiveReload server for Go.</li>
<li><a href="https://github.com/minio/mc">mc</a> – Minio Client provides minimal tools to work with Amazon S3 compatible cloud storage and filesystems.</li>
<li><a href="https://github.com/imdario/mergo">mergo</a> – Helper to merge structs and maps in Golang. Useful for configuration default values, avoiding messy if-statements.</li>
<li><a href="https://github.com/zRedShift/mimemagic">mimemagic</a> – Pure Go ultra performant MIME sniffing library/utility.</li>
<li><a href="https://github.com/aofei/mimesniffer">mimesniffer</a> – A MIME type sniffer for Go.</li>
<li><a href="https://github.com/gabriel-vasile/mimetype">mimetype</a> – Package for MIME type detection based on magic numbers.</li>
<li><a href="https://github.com/tdewolff/minify">minify</a> – Fast minifiers for HTML, CSS, JS, XML, JSON and SVG file formats.</li>
<li><a href="https://github.com/icza/minquery">minquery</a> – MongoDB / mgo.v2 query that supports efficient pagination (cursors to continue listing documents where we left off).</li>
<li><a href="https://github.com/StabbyCutyou/moldova">moldova</a> – Utility for generating random data based on an input template.</li>
<li><a href="https://github.com/davrodpin/mole">mole</a> – cli app to easily create ssh tunnels.</li>
<li><a href="https://github.com/gobeam/mongo-go-pagination">mongo-go-pagination</a> – Mongodb Pagination for official mongodb/mongo-go-driver package which supports both normal queries and Aggregation pipelines.</li>
<li><a href="https://github.com/linxGnu/mssqlx">mssqlx</a> – Database client library, proxy for any master slave, master master structures. Lightweight and auto balancing in mind.</li>
<li><a href="https://github.com/VividCortex/multitick">multitick</a> – Multiplexor for aligned tickers.</li>
<li><a href="https://github.com/inancgumus/myhttp">myhttp</a> – Simple API to make HTTP GET requests with timeout support.</li>
<li><a href="https://github.com/e-dard/netbug">netbug</a> – Easy remote profiling of your services.</li>
<li><a href="https://github.com/chrispassas/nfdump">nfdump</a> – Read nfdump netflow files.</li>
<li><a href="https://github.com/pokanop/nostromo">nostromo</a> – CLI for building powerful aliases.</li>
<li><a href="https://github.com/xta/okrun">okrun</a> – go run error steamroller.</li>
<li><a href="https://github.com/btnguyen2k/olaf">olaf</a> – Twitter Snowflake implemented in Go.</li>
<li><a href="https://github.com/adelowo/onecache">onecache</a> – Caching library with support for multiple backend stores (Redis, Memcached, filesystem etc).</li>
<li><a href="https://github.com/maruel/panicparse">panicparse</a> – Groups similar goroutines and colorizes stack dump.</li>
<li><a href="https://github.com/alexpantyukhin/go-pattern-match">pattern-match</a> – Pattern matching libray.</li>
<li><a href="https://github.com/peco/peco">peco</a> – Simplistic interactive filtering tool.</li>
<li><a href="https://github.com/arthurkushman/pgo">pgo</a> – Convenient functions for PHP community.</li>
<li><a href="https://github.com/VividCortex/pm">pm</a> – Process (i.e. goroutine) manager with an HTTP API.</li>
<li><a href="https://github.com/gotidy/ptr">ptr</a> – Package that provide functions for simplified creation of pointers from constants of basic types.</li>
<li><a href="https://github.com/zpatrick/rclient">rclient</a> – Readable, flexible, simple-to-use client for REST APIs.</li>
<li><a href="https://github.com/ssgreg/repeat">repeat</a> – Go implementation of different backoff strategies useful for retrying operations and heartbeating.</li>
<li><a href="https://github.com/mozillazg/request">request</a> – Go HTTP Requests for Humans™.</li>
<li><a href="https://github.com/abo/rerate">rerate</a> – Redis-based rate counter and rate limiter for Go.</li>
<li><a href="https://github.com/ivpusic/rerun">rerun</a> – Recompiling and rerunning go apps when source changes.</li>
<li><a href="https://github.com/edermanoel94/rest-go">rest-go</a> – A package that provide many helpful methods for working with rest api.</li>
<li><a href="https://github.com/kamilsk/retry">retry</a> – The most advanced functional mechanism to perform actions repetitively until successful.</li>
<li><a href="https://github.com/percolate/retry">retry</a> – A simple but highly configurable retry package for Go.</li>
<li><a href="https://github.com/thedevsaddam/retry">retry</a> – Simple and easy retry mechanism package for Go.</li>
<li><a href="https://github.com/shafreeck/retry">retry</a> – A pretty simple library to ensure your work to be done.</li>
<li><a href="https://github.com/rafaeljesus/retry-go">retry-go</a> – Retrying made simple and easy for golang.</li>
<li><a href="https://github.com/VividCortex/robustly">robustly</a> – Runs functions resiliently, catching and restarting panics.</li>
<li><a href="https://github.com/blockloop/scan">scan</a> – Scan golang <code>sql.Rows</code> directly to structs, slices, or primitive types.</li>
<li><a href="https://github.com/georgysavva/scany">scany</a> – Library for scanning data from a database into Go structs and more.</li>
<li><a href="https://github.com/syntaqx/serve">serve</a> – A static http server anywhere you need.</li>
<li><a href="https://github.com/ztrue/shutdown">shutdown</a> – App shutdown hooks for <code>os.Signal</code> handling.</li>
<li><a href="https://github.com/chrispassas/silk">silk</a> – Read silk netflow files.</li>
<li><a href="https://github.com/psampaz/slice">slice</a> – Type-safe functions for common Go slice operations.</li>
<li><a href="https://github.com/Henry-Sarabia/sliceconv">sliceconv</a> – Slice conversion between primitive types.</li>
<li><a href="https://github.com/leaanthony/slicer">slicer</a> – Makes working with slices easier.</li>
<li><a href="https://github.com/jfcg/sorty">sorty</a> – Fast Concurrent / Parallel Sorting.</li>
<li><a href="https://github.com/briandowns/spinner">spinner</a> – Go package to easily provide a terminal spinner with options.</li>
<li><a href="https://github.com/jmoiron/sqlx">sqlx</a> – provides a set of extensions on top of the excellent built-in database/sql package.</li>
<li><a href="https://github.com/janiltonmaciel/statiks">statiks</a> – Fast, zero-configuration, static HTTP filer server.</li>
<li><a href="https://github.com/asdine/storm">Storm</a> – Simple and powerful toolkit for BoltDB.</li>
<li><a href="https://github.com/PumpkinSeed/structs">structs</a> – Implement simple functions to manipulate structs.</li>
<li><a href="https://github.com/andy2046/tik">tik</a> – Simple and easy timing wheel package for Go.</li>
<li><a href="https://github.com/cyruzin/tome">tome</a> – Tome was designed to paginate simple RESTful APIs.</li>
<li><a href="https://github.com/viant/toolbox">toolbox</a> – Slice, map, multimap, struct, function, data conversion utilities. Service router, macro evaluator, tokenizer.</li>
<li><a href="https://github.com/alxrm/ugo">ugo</a> – ugo is slice toolbox with concise syntax for Go.</li>
<li><a href="https://github.com/esemplastic/unis">UNIS</a> – Common Architecture™ for String Utilities in Go.</li>
<li><a href="https://github.com/knq/usql">usql</a> – usql is a universal command-line interface for SQL databases.</li>
<li><a href="https://github.com/shomali11/util">util</a> – Collection of useful utility functions. (strings, concurrency, manipulations, …).</li>
<li><a href="https://github.com/asciimoo/wuzz">wuzz</a> – Interactive cli tool for HTTP inspection.</li>
<li><a href="https://github.com/monmohan/xferspdy">xferspdy</a> – Xferspdy provides binary diff and patch library in golang.</li>
</ul>
<h3 id="uuid">UUID</h3>
<blockquote>
<p>UUID 处理库</p>
</blockquote>
<ul>
<li><a href="https://github.com/jakehl/goid">goid</a> – Generate and Parse RFC4122 compliant V4 UUIDs.</li>
<li><a href="https://github.com/twharmon/gouid">gouid</a> – Generate cryptographically secure random string IDs with just one allocation.</li>
<li><a href="https://github.com/aidarkhanov/nanoid">nanoid</a> – A tiny and efficient Go unique string ID generator.</li>
<li><a href="https://github.com/muyo/sno">sno</a> – Compact, sortable and fast unique IDs with embedded metadata.</li>
<li><a href="https://github.com/oklog/ulid">ulid</a> – Go implementation of ULID (Universally Unique Lexicographically Sortable Identifier).</li>
<li><a href="https://gitlab.com/skilstak/code/go/uniq">uniq</a> – No hassle safe, fast unique identifiers with commands.</li>
<li><a href="https://github.com/agext/uuid">uuid</a> – Generate, encode, and decode UUIDs v1 with fast or cryptographic-quality random node identifier.</li>
<li><a href="https://github.com/gofrs/uuid">uuid</a> – Implementation of Universally Unique Identifier (UUID). Supports both creation and parsing of UUIDs. Actively maintained fork of satori uuid.</li>
<li><a href="https://github.com/google/uuid">uuid</a> – Go package for UUIDs based on RFC 4122 and DCE 1.1: Authentication and Security Services.</li>
<li><a href="https://github.com/edwingeng/wuid">wuid</a> – An extremely fast unique number generator, 10-135 times faster than UUID.</li>
</ul>
<h3 id="验证">验证</h3>
<blockquote>
<p>验证库</p>
</blockquote>
<ul>
<li><a href="https://github.com/osamingo/checkdigit">checkdigit</a> – Provide check digit algorithms (Luhn, Verhoeff, Damm) and calculators (ISBN, EAN, JAN, UPC, etc.).</li>
<li><a href="https://github.com/guiferpa/gody">gody</a> – 🎈 A lightweight struct validator for Go.</li>
<li><a href="https://github.com/twharmon/govalid">govalid</a> – Fast, tag-based validation for structs.</li>
<li><a href="https://github.com/asaskevich/govalidator">govalidator</a> – Validators and sanitizers for strings, numerics, slices and structs.</li>
<li><a href="https://github.com/thedevsaddam/govalidator">govalidator</a> – Validate Golang request data with simple rules. Highly inspired by Laravel’s request validation.</li>
<li><a href="https://github.com/faceair/jio">jio</a> – jio is a json schema validator similar to <a href="https://github.com/hapijs/joi">joi</a>.</li>
<li><a href="https://github.com/go-ozzo/ozzo-validation">ozzo-validation</a> – Supports validation of various data types (structs, strings, maps, slices, etc.) with configurable and extensible validation rules specified in usual code constructs instead of struct tags.</li>
<li><a href="https://github.com/thazelart/terraform-validator">terraform-validator</a> – A norms and conventions validator for Terraform.</li>
<li><a href="https://github.com/gookit/validate">validate</a> – Go package for data validation and filtering. support validate Map, Struct, Request(Form, JSON, url.Values, Uploaded Files) data and more features.</li>
<li><a href="https://github.com/gobuffalo/validate">validate</a> – This package provides a framework for writing validations for Go applications.</li>
<li><a href="https://github.com/go-playground/validator">validator</a> – Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving.</li>
</ul>
<h3 id="版本控制">版本控制</h3>
<blockquote>
<p>版本控制库</p>
</blockquote>
<ul>
<li><a href="https://github.com/rjeczalik/gh">gh</a> – Scriptable server and net/http middleware for GitHub Webhooks.</li>
<li><a href="https://github.com/libgit2/git2go">git2go</a> – Go bindings for libgit2.</li>
<li><a href="https://github.com/go-git/go-git">go-git</a> – highly extensible Git implementation in pure Go.</li>
<li><a href="https://github.com/sourcegraph/go-vcs">go-vcs</a> – manipulate and inspect VCS repositories in Go.</li>
<li><a href="https://github.com/src-d/hercules">hercules</a> – gaining advanced insights from Git repository history.</li>
<li><a href="https://github.com/beyang/hgo">hgo</a> – Hgo is a collection of Go packages providing read-access to local Mercurial repositories.</li>
</ul>
<h3 id="视频">视频</h3>
<blockquote>
<p>视频处理库</p>
</blockquote>
<ul>
<li><a href="https://github.com/3d0c/gmf">gmf</a> – Go bindings for FFmpeg av* libraries.</li>
<li><a href="https://github.com/asticode/go-astisub">go-astisub</a> – Manipulate subtitles in GO (.srt, .stl, .ttml, .webvtt, .ssa/.ass, teletext, .smi, etc.).</li>
<li><a href="https://github.com/asticode/go-astits">go-astits</a> – Parse and demux MPEG Transport Streams (.ts) natively in GO.</li>
<li><a href="https://github.com/quangngotan95/go-m3u8">go-m3u8</a> – Parser and generator library for Apple m3u8 playlists.</li>
<li><a href="https://github.com/unki2aut/go-mpd">go-mpd</a> – Parser and generator library for MPEG-DASH manifest files.</li>
<li><a href="https://github.com/giorgisio/goav">goav</a> – Comprehensive Go bindings for FFmpeg.</li>
<li><a href="https://github.com/ziutek/gst">gst</a> – Go bindings for GStreamer.</li>
<li><a href="https://github.com/wargarblgarbl/libgosubs">libgosubs</a> – Subtitle format support for go. Supports .srt, .ttml, and .ass.</li>
<li><a href="https://github.com/adrg/libvlc-go">libvlc-go</a> – Go bindings for libvlc 2.X/3.X/4.X (used by the VLC media player).</li>
<li><a href="https://github.com/grafov/m3u8">m3u8</a> – Parser and generator library of M3U8 playlists for Apple HLS.</li>
<li><a href="https://github.com/korandiz/v4l">v4l</a> – Video capture library for Linux, written in Go.</li>
</ul>
<h3 id="web-框架">Web 框架</h3>
<blockquote>
<p>全栈 Web 开发框架</p>
</blockquote>
<ul>
<li><a href="https://aahframework.org/">aah</a> – Scalable, performant, rapid development Web framework for Go.</li>
<li><a href="https://github.com/aerogo/aero">Aero</a> – High-performance web framework for Go, reaches top scores in Lighthouse.</li>
<li><a href="https://github.com/aofei/air">Air</a> – An ideally refined web framework for Go.</li>
<li><a href="https://github.com/appist/appy">appy</a> – An opinionated productive web framework that helps scaling business easier.</li>
<li><a href="https://github.com/nsheremet/banjo">Banjo</a> – Very simple and fast web framework for Go.</li>
<li><a href="https://github.com/astaxie/beego">Beego</a> – beego is an open-source, high-performance web framework for the Go programming language.</li>
<li><a href="http://gobuffalo.io/">Buffalo</a> – Bringing the productivity of Rails to Go!</li>
<li><a href="https://github.com/labstack/echo">Echo</a> – High performance, minimalist Go web framework.</li>
<li><a href="https://github.com/gofiber/fiber">Fiber</a> – An Express.js inspired web framework build on Fasthttp.</li>
<li><a href="https://github.com/zpatrick/fireball">Fireball</a> – More “natural” feeling web framework.</li>
<li><a href="https://github.com/i-love-flamingo/flamingo">Flamingo</a> – Framework for pluggable web projects. Including a concept for modules and offering features for DI, Configareas, i18n, template engines, graphql, observability, security, events, routing &amp; reverse routing etc.</li>
<li><a href="https://github.com/i-love-flamingo/flamingo-commerce">Flamingo Commerce</a> – Providing e-commerce features using clean architecture like DDD and ports and adapters, that you can use to build flexible e-commerce applications.</li>
<li><a href="https://github.com/abahmed/gearbox">Gearbox</a> – A web framework written in Go with a focus on high performance and memory optimization.</li>
<li><a href="https://github.com/gin-gonic/gin">Gin</a> – Gin is a web framework written in Go! It features a martini-like API with much better performance, up to 40 times faster. If you need performance and good productivity.</li>
<li><a href="https://github.com/xxjwxc/ginrpc">Ginrpc</a> – Gin parameter automatic binding tool,gin rpc tools.</li>
<li><a href="https://github.com/NYTimes/gizmo">Gizmo</a> – Microservice toolkit used by the New York Times.</li>
<li><a href="https://github.com/ant0ine/go-json-rest">go-json-rest</a> – Quick and easy way to setup a RESTful JSON API.</li>
<li><a href="https://github.com/ungerik/go-rest">go-rest</a> – Small and evil REST framework for Go.</li>
<li><a href="https://github.com/goadesign/goa">Goa</a> – Goa provides a holistic approach for developing remote APIs and microservices in Go.</li>
<li><a href="https://github.com/goa-go/goa">goa</a> – goa is just like koajs for golang, it is a flexible, light, high-performance and extensible web framework based on middleware.</li>
<li><a href="https://github.com/fulldump/golax">Golax</a> – A non Sinatra fast HTTP framework with support for Google custom methods, deep interceptors, recursion and more.</li>
<li><a href="https://github.com/dinever/golf">Golf</a> – Golf is a fast, simple and lightweight micro-web framework for Go. It comes with powerful features and has no dependencies other than the Go Standard Library.</li>
<li><a href="https://github.com/rainycape/gondola">Gondola</a> – The web framework for writing faster sites, faster.</li>
<li><a href="https://github.com/mustafaakin/gongular">gongular</a> – Fast Go web framework with input mapping/validation and (DI) Dependency Injection.</li>
<li><a href="https://github.com/twharmon/goweb">goweb</a> – Web framework with routing, websockets, logging, middleware, static file server (optional gzip), and automatic TLS.</li>
<li><a href="https://github.com/System-Glitch/goyave">Goyave</a> – Feature-complete web framework aimed at clean code and fast development, with powerful built-in functionalities.</li>
<li><a href="https://github.com/hidevopsio/hiboot">hiboot</a> – hiboot is a high performance web application framework with auto configuration and dependency injection support.</li>
<li><a href="https://github.com/go-macaron/macaron">Macaron</a> – Macaron is a high productive and modular design web framework in Go.</li>
<li><a href="https://github.com/paulbellamy/mango">mango</a> – Mango is a modular web-application framework for Go, inspired by Rack, and PEP333.</li>
<li><a href="https://github.com/claygod/microservice">Microservice</a> – The framework for the creation of microservices, written in Golang.</li>
<li><a href="https://github.com/ivpusic/neo">neo</a> – Neo is minimal and fast Go Web Framework with extremely simple API.</li>
<li><a href="https://github.com/beatlabs/patron">patron</a> – Patron is a microservice framework following best cloud practices with a focus on productivity.</li>
<li><a href="https://github.com/resoursea/api">Resoursea</a> – REST framework for quickly writing resource based services.</li>
<li><a href="http://rest-layer.io/">REST Layer</a> – Framework to build REST/GraphQL API on top of databases with mostly configuration over code.</li>
<li><a href="https://github.com/revel/revel">Revel</a> – High-productivity web framework for the Go language.</li>
<li><a href="https://github.com/goanywhere/rex">rex</a> – Rex is a library for modular development built upon gorilla/mux, fully compatible with <code>net/http</code>.</li>
<li><a href="https://github.com/gookit/rux">rux</a> – Simple and fast web framework for build golang HTTP applications.</li>
<li><a href="https://github.com/lunny/tango">tango</a> – Micro &amp; pluggable web framework for Go.</li>
<li><a href="https://github.com/rcrowley/go-tigertonic">tigertonic</a> – Go framework for building JSON web services inspired by Dropwizard.</li>
<li><a href="https://github.com/uadmin/uadmin">uAdmin</a> – Fully featured web framework for Golang, inspired by Django.</li>
<li><a href="https://github.com/gernest/utron">utron</a> – Lightweight MVC framework for Go(Golang).</li>
<li><a href="https://github.com/aisk/vox">vox</a> – A golang web framework for humans, inspired by Koa heavily.</li>
<li><a href="https://github.com/bnkamalesh/webgo">WebGo</a> – A micro-framework to build web apps; with handler chaining, middleware and context injection. With standard library compliant HTTP handlers(i.e. http.HandlerFunc).</li>
<li><a href="https://github.com/yarf-framework/yarf">YARF</a> – Fast micro-framework designed to build REST APIs and web services in a fast and simple way.</li>
</ul>
<h4 id="中间件">中间件</h4>
<p><strong>常用的中间件</strong></p>
<ul>
<li><a href="https://github.com/posener/client-timing">client-timing</a> – An HTTP client for Server-Timing header.</li>
<li><a href="https://github.com/rs/cors">CORS</a> – Easily add CORS capabilities to your API.</li>
<li><a href="https://github.com/rs/formjson">formjson</a> – Transparently handle JSON input as a standard form POST.</li>
<li><a href="https://github.com/github/go-fault">go-fault</a> – Fault injection middleware for Go.</li>
<li><a href="https://github.com/mitchellh/go-server-timing">go-server-timing</a> – Add/parse Server-Timing header.</li>
<li><a href="https://github.com/ulule/limiter">Limiter</a> – Dead simple rate limit middleware for Go.</li>
<li><a href="https://github.com/philippgille/ln-paywall">ln-paywall</a> – Go middleware for monetizing APIs on a per-request basis with the Lightning Network (Bitcoin).</li>
<li><a href="https://github.com/didip/tollbooth">Tollbooth</a> – Rate limit HTTP request handler.</li>
<li><a href="https://github.com/sebest/xff">XFF</a> – Handle <code>X-Forwarded-For</code> header and friends.</li>
</ul>
<p><strong>创建 HTTP 中间件的库</strong></p>
<ul>
<li><a href="https://github.com/justinas/alice">alice</a> – Painless middleware chaining for Go.</li>
<li><a href="https://github.com/codemodus/catena">catena</a> – http.Handler wrapper catenation (same API as “chain”).</li>
<li><a href="https://github.com/codemodus/chain">chain</a> – Handler wrapper chaining with scoped data (net/context-based “middleware”).</li>
<li><a href="https://github.com/go-on/wrap">go-wrap</a> – Small middlewares package for net/http.</li>
<li><a href="https://github.com/alioygur/gores">gores</a> – Go package that handles HTML, JSON, XML and etc. responses. Useful for RESTful APIs.</li>
<li><a href="https://github.com/carbocation/interpose">interpose</a> – Minimalist net/http middleware for golang.</li>
<li><a href="https://github.com/HereMobilityDevelopers/mediary">mediary</a> – add interceptors to <code>http.Client</code> to allow dumping/shaping/tracing/… of requests/responses.</li>
<li><a href="https://github.com/stephens2424/muxchain">muxchain</a> – Lightweight middleware for net/http.</li>
<li><a href="https://github.com/urfave/negroni">negroni</a> – Idiomatic HTTP middleware for Golang.</li>
<li><a href="https://github.com/unrolled/render">render</a> – Go package for easily rendering JSON, XML, and HTML template responses.</li>
<li><a href="https://github.com/thedevsaddam/renderer">renderer</a> – Simple, lightweight and faster response (JSON, JSONP, XML, YAML, HTML, File) rendering package for Go.</li>
<li><a href="https://github.com/InVisionApp/rye">rye</a> – Tiny Go middleware library (with canned Middlewares) that supports JWT, CORS, Statsd, and Go 1.7 context.</li>
<li><a href="https://github.com/thoas/stats">stats</a> – Go middleware that stores various information about your web application.</li>
</ul>
<h4 id="路由器">路由器</h4>
<ul>
<li><a href="https://github.com/gernest/alien">alien</a> – Lightweight and fast http router from outer space.</li>
<li><a href="https://github.com/GuilhermeCaruso/bellt">bellt</a> – A simple Go HTTP router.</li>
<li><a href="https://github.com/go-zoo/bone">Bone</a> – Lightning Fast HTTP Multiplexer.</li>
<li><a href="https://github.com/claygod/Bxog">Bxog</a> – Simple and fast HTTP router for Go. It works with routes of varying difficulty, length and nesting. And he knows how to create a URL from the received parameters.</li>
<li><a href="https://github.com/go-chi/chi">chi</a> – Small, fast and expressive HTTP router built on net/context.</li>
<li><a href="https://github.com/buaazp/fasthttprouter">fasthttprouter</a> – High performance router forked from <code>httprouter</code>. The first router fit for <code>fasthttp</code>.</li>
<li><a href="https://github.com/razonyang/fastrouter">FastRouter</a> – a fast, flexible HTTP router written in Go.</li>
<li><a href="https://github.com/gocraft/web">gocraft/web</a> – Mux and middleware package in Go.</li>
<li><a href="https://github.com/goji/goji">Goji</a> – Goji is a minimalistic and flexible HTTP request multiplexer with support for <code>net/context</code>.</li>
<li><a href="https://github.com/goroute/route">goroute</a> – Simple yet powerful HTTP request multiplexer.</li>
<li><a href="https://github.com/vardius/gorouter">GoRouter</a> – GoRouter is a Server/API micro framwework, HTTP request router, multiplexer, mux that provides request router with middleware supporting <code>net/context</code>.</li>
<li><a href="https://github.com/gowww/router">gowww/router</a> – Lightning fast HTTP router fully compatible with the net/http.Handler interface.</li>
<li><a href="https://github.com/julienschmidt/httprouter">httprouter</a> – High performance router. Use this and the standard http handlers to form a very high performance web framework.</li>
<li><a href="https://github.com/dimfeld/httptreemux">httptreemux</a> – High-speed, flexible tree-based HTTP router for Go. Inspiration from httprouter.</li>
<li><a href="https://github.com/go-playground/lars">lars</a> – Is a lightweight, fast and extensible zero allocation HTTP router for Go used to create customizable frameworks.</li>
<li><a href="https://github.com/gorilla/mux">mux</a> – Powerful URL router and dispatcher for golang.</li>
<li><a href="https://github.com/go-ozzo/ozzo-routing">ozzo-routing</a> – An extremely fast Go (golang) HTTP router that supports regular expression route matching. Comes with full support for building RESTful APIs.</li>
<li><a href="https://github.com/go-playground/pure">pure</a> – Is a lightweight HTTP router that sticks to the std “net/http” implementation.</li>
<li><a href="https://github.com/VividCortex/siesta">Siesta</a> – Composable framework to write middleware and handlers.</li>
<li><a href="https://github.com/husobee/vestigo">vestigo</a> – Performant, stand-alone, HTTP compliant URL Router for go web applications.</li>
<li><a href="https://github.com/nbari/violetear">violetear</a> – Go HTTP router.</li>
<li><a href="https://github.com/rs/xmux">xmux</a> – High performance muxer based on <code>httprouter</code> with <code>net/context</code> support.</li>
<li><a href="https://github.com/xujiajun/gorouter">xujiajun/gorouter</a> – A simple and fast HTTP router for Go.</li>
</ul>
<h3 id="webassembly">WebAssembly</h3>
<ul>
<li><a href="https://github.com/dennwc/dom">dom</a> – DOM library.</li>
<li><a href="https://github.com/markfarnan/go-canvas">go-canvas</a> – Library to use HTML5 Canvas, with all drawing within go code.</li>
<li><a href="https://github.com/tinygo-org/tinygo">tinygo</a> – Go compiler for small places. Microcontrollers, WebAssembly, and command-line tools. Based on LLVM.</li>
<li><a href="https://github.com/norunners/vert">vert</a> – Interop between Go and JS values.</li>
<li><a href="https://github.com/agnivade/wasmbrowsertest">wasmbrowsertest</a> – Run Go WASM tests in your browser.</li>
<li><a href="https://github.com/gowebapi/webapi">webapi</a> – Bindings for DOM and HTML generated from WebIDL.</li>
</ul>
<h3 id="windows">Windows</h3>
<ul>
<li><a href="https://github.com/gonutz/d3d9">d3d9</a> – Go bindings for Direct3D9.</li>
<li><a href="https://github.com/go-ole/go-ole">go-ole</a> – Win32 OLE implementation for golang.</li>
<li><a href="https://github.com/MonaxGT/gosddl">gosddl</a> – Converter from SDDL-string to user-friendly JSON. SDDL consist of four part: Owner, Primary Group, DACL, SACL.</li>
</ul>
<h3 id="xml">XML</h3>
<blockquote>
<p>XML 处理库</p>
</blockquote>
<ul>
<li><a href="https://github.com/xml-comp/xml-comp">XML-Comp</a> – Simple command line XML comparer that generates diffs of folders, files and tags.</li>
<li><a href="https://github.com/sbabiv/xml2map">xml2map</a> – XML to MAP converter written Golang.</li>
<li><a href="https://github.com/shabbyrobe/xmlwriter">xmlwriter</a> – Procedural XML generation API based on libxml2’s xmlwriter module.</li>
<li><a href="https://github.com/antchfx/xpath">xpath</a> – XPath package for Go.</li>
<li><a href="https://github.com/antchfx/xquery">xquery</a> – XQuery lets you extract data from HTML/XML documents using XPath expression.</li>
<li><a href="https://github.com/miku/zek">zek</a> – Generate a Go struct from XML.</li>
</ul>
<h2 id="工具">工具</h2>
<blockquote>
<p>Go 相关软件和插件</p>
</blockquote>
<h3 id="代码分析">代码分析</h3>
<ul>
<li><a href="https://github.com/bradleyfalzon/apicompat">apicompat</a> – Checks recent changes to a Go project for backwards incompatible changes.</li>
<li><a href="https://github.com/mibk/dupl">dupl</a> – Tool for code clone detection.</li>
<li><a href="https://github.com/kisielk/errcheck">errcheck</a> – Errcheck is a program for checking for unchecked errors in Go programs.</li>
<li><a href="https://github.com/davecheney/gcvis">gcvis</a> – Visualise Go program GC trace data in real time.</li>
<li><a href="https://github.com/qiniu/checkstyle">go-checkstyle</a> – checkstyle is a style check tool like java checkstyle. This tool inspired by java checkstyle, golint. The style referred to some points in Go Code Review Comments.</li>
<li><a href="https://github.com/roblaszczak/go-cleanarch">go-cleanarch</a> – go-cleanarch was created to validate Clean Architecture rules, like a The Dependency Rule and interaction between packages in your Go projects.</li>
<li><a href="https://github.com/go-critic/go-critic">go-critic</a> – source code linter that brings checks that are currently not implemented in other linters.</li>
<li><a href="https://github.com/psampaz/go-mod-outdated">go-mod-outdated</a> – An easy way to find outdated dependencies of your Go projects.</li>
<li><a href="https://github.com/firstrow/go-outdated">go-outdated</a> – Console application that displays outdated packages.</li>
<li><a href="https://github.com/yuroyoro/goast-viewer">goast-viewer</a> – Web based Golang AST visualizer.</li>
<li><a href="http://gocover.io/">GoCover.io</a> – GoCover.io offers the code coverage of any golang package as a service.</li>
<li><a href="https://godoc.org/golang.org/x/tools/cmd/goimports">goimports</a> – Tool to fix (add, remove) your Go imports automatically.</li>
<li><a href="https://github.com/segmentio/golines">golines</a> – Formatter that automatically shortens long lines in Go code.</li>
<li><a href="https://github.com/golang/lint">GoLint</a> – Golint is a linter for Go source code.</li>
<li><a href="http://go-lint.appspot.com/">Golint online</a> – Lints online Go source files on GitHub, Bitbucket and Google Project Hosting using the golint package.</li>
<li><a href="https://github.com/jfeliu007/goplantuml">GoPlantUML</a> – Library and CLI that generates text plantump class diagram containing information about structures and interfaces with the relationship among them.</li>
<li><a href="https://sourcegraph.com/github.com/sqs/goreturns">goreturns</a> – Adds zero-value return statements to match the func return types.</li>
<li><a href="https://github.com/dominikh/go-tools/tree/master/cmd/gosimple">gosimple</a> – gosimple is a linter for Go source code that specialises on simplifying code.</li>
<li><a href="https://github.com/shurcooL/gostatus">gostatus</a> – Command line tool, shows the status of repositories that contain Go packages.</li>
<li><a href="https://github.com/surullabs/lint">lint</a> – Run linters as part of go test.</li>
<li><a href="https://github.com/z7zmey/php-parser">php-parser</a> – A Parser for PHP written in Go.</li>
<li><a href="https://github.com/dominikh/go-tools/tree/master/cmd/staticcheck">staticcheck</a> – staticcheck is <code>go vet</code> on steroids, applying a ton of static analysis checks you might be used to from tools like ReSharper for C#.</li>
<li><a href="https://github.com/verygoodsoftwarenotvirus/tarp">tarp</a> – tarp finds functions and methods without direct unit tests in Go source code.</li>
<li><a href="https://github.com/augmentable-dev/tickgit">tickgit</a> – CLI and go package for surfacing code comment TODOs (in any language) and applying a <code>git blame</code>to identify the author.</li>
<li><a href="https://github.com/mdempsky/unconvert">unconvert</a> – Remove unnecessary type conversions from Go source.</li>
<li><a href="https://github.com/dominikh/go-tools/tree/master/cmd/unused">unused</a> – unused checks Go code for unused constants, variables, functions and types.</li>
<li><a href="https://github.com/mccoyst/validate">validate</a> – Automatically validates struct fields with tags.</li>
</ul>
<h3 id="编辑器插件">编辑器插件</h3>
<ul>
<li><a href="https://plugins.jetbrains.com/plugin/9568-go">Go plugin for JetBrains IDEs</a> – Go plugin for JetBrains IDEs.</li>
<li><a href="https://github.com/theia-ide/go-language-server">go-language-server</a> – A wrapper to turn the VSCode go extension into a language server supporting the language-server-protocol.</li>
<li><a href="https://github.com/dominikh/go-mode.el">go-mode</a> – Go mode for GNU/Emacs.</li>
<li><a href="https://github.com/joefitzgerald/go-plus">go-plus</a> – Go (Golang) Package For Atom That Adds Autocomplete, Formatting, Syntax Checking, Linting and Vetting.</li>
<li><a href="https://github.com/nsf/gocode">gocode</a> – Autocompletion daemon for the Go programming language.</li>
<li><a href="https://github.com/incu6us/goimports-reviser">goimports-reviser</a> – Formatting tool for imports.</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=MaxMedia.go-prof">goprofiling</a> – This extension adds benchmark profiling support for the Go language to VS Code.</li>
<li><a href="https://github.com/DisposaBoy/GoSublime">GoSublime</a> – Golang plugin collection for the text editor SublimeText 3 providing code completion and other IDE-like features.</li>
<li><a href="https://github.com/hexdigest/gounit-vim">gounit-vim</a> – Vim plugin for generating Go tests based on the function’s or method’s signature.</li>
<li><a href="https://github.com/theia-ide/theia-go-extension">theia-go-extension</a> – Go language support for the Theia IDE.</li>
<li><a href="https://github.com/rjohnsondev/vim-compiler-go">vim-compiler-go</a> – Vim plugin to highlight syntax errors on save.</li>
<li><a href="https://github.com/fatih/vim-go">vim-go</a> – Go development plugin for Vim.</li>
<li><a href="https://github.com/golang/vscode-go">vscode-go</a> – Extension for Visual Studio Code (VS Code) which provides support for the Go language.</li>
<li><a href="https://github.com/eaburns/Watch">Watch</a> – Runs a command in an acme win on file changes.</li>
</ul>
<h3 id="go-代码生成工具">Go 代码生成工具</h3>
<ul>
<li><a href="https://github.com/usk81/generic">generic</a> – flexible data type for Go.</li>
<li><a href="https://github.com/cheekybits/genny">genny</a> – Elegant generics for Go.</li>
<li><a href="https://github.com/Parquery/gocontracts">gocontracts</a> – brings design-by-contract to Go by synchronizing the code with the documentation.</li>
<li><a href="http://github.com/bouk/gonerics">gonerics</a> – Idiomatic Generics in Go.</li>
<li><a href="https://github.com/cweill/gotests">gotests</a> – Generate Go tests from your source code.</li>
<li><a href="https://github.com/hexdigest/gounit">gounit</a> – Generate Go tests using your own templates.</li>
<li><a href="https://github.com/DylanMeeus/hasgo">hasgo</a> – Generate Haskell inspired functions for your slices.</li>
<li><a href="https://github.com/opennota/re2dfa">re2dfa</a> – Transform regular expressions into finite state machines and output Go source code.</li>
<li><a href="https://xuri.me/toml-to-go">TOML-to-Go</a> – Translates TOML into a Go type in the browser instantly.</li>
<li><a href="https://github.com/xuri/xgen">xgen</a> – XSD (XML Schema Definition) parser and Go/C/Java/Rust/TypeScript code generator.</li>
</ul>
<h3 id="go-工具">Go 工具</h3>
<ul>
<li><a href="https://github.com/songgao/colorgo">colorgo</a> – Wrapper around <code>go</code> command for colorized <code>go build</code> output.</li>
<li><a href="https://github.com/KyleBanks/depth">depth</a> – Visualize dependency trees of any package by analyzing imports.</li>
<li><a href="https://github.com/axelspringer/generator-go-lang">generator-go-lang</a> – A <a href="http://yeoman.io/">Yeoman</a> generator to get new Go projects started.</li>
<li><a href="https://github.com/TrueFurby/go-callvis">go-callvis</a> – Visualize call graph of your Go program using dot format.</li>
<li><a href="https://github.com/pieterclaerhout/go-james">go-james</a> – Go project skeleton creator, builds and tests your projects without the manual setup.</li>
<li><a href="https://github.com/skelterjohn/go-pkg-complete">go-pkg-complete</a> – Bash completion for go and wgo.</li>
<li><a href="https://github.com/go-swagger/go-swagger">go-swagger</a> – Swagger 2.0 implementation for go. Swagger is a simple yet powerful representation of your RESTful API.</li>
<li><a href="https://github.com/tylerwince/godbg">godbg</a> – Implementation of Rusts <code>dbg!</code> macro for quick and easy debugging during development.</li>
<li><a href="https://github.com/dustinblackman/gomodrun/">gomodrun</a> – Go tool that executes and caches binaries included in go.mod files.</li>
<li><a href="https://github.com/psampaz/gothanks">gothanks</a> – GoThanks automatically stars your go.mod github dependencies, sending this way some love to their maintainers.</li>
<li><a href="https://github.com/rocketlaunchr/igo">igo</a> – An igo to go transpiler (new language features for Go language!)</li>
<li><a href="https://github.com/OctoLinker/browser-extension">OctoLinker</a> – Navigate through go files efficiently with the OctoLinker browser extension for GitHub.</li>
<li><a href="https://github.com/kyoh86/richgo">richgo</a> – Enrich <code>go test</code> outputs with text decorations.</li>
<li><a href="https://github.com/galeone/rts">rts</a> – RTS: response to struct. Generates Go structs from server responses.</li>
<li><a href="https://github.com/dtgorski/typex">typex</a> – Examine Go types and their transitive dependencies, alternatively export results as TypeScript value objects (or types) declaration.</li>
</ul>
<h3 id="软件包">软件包</h3>
<blockquote>
<p>Go 编写的软件</p>
</blockquote>
<h4 id="devops-工具集">DevOps 工具集</h4>
<ul>
<li><a href="https://github.com/dnnrly/abbreviate">abbreviate</a> – abbreviate is a tool turning long strings in to shorter ones with configurable seperaters, for example to embed branch names in to deployment stack IDs.</li>
<li><a href="https://github.com/smira/aptly">aptly</a> – aptly is a Debian repository management tool.</li>
<li><a href="https://github.com/xuri/aurora">aurora</a> – Cross-platform web-based Beanstalkd queue server console.</li>
<li><a href="https://github.com/soniah/awsenv">awsenv</a> – Small binary that loads Amazon (AWS) environment variables for a profile.</li>
<li><a href="https://github.com/dave/blast">Blast</a> – A simple tool for API load testing and batch jobs.</li>
<li><a href="https://github.com/codesenberg/bombardier">bombardier</a> – Fast cross-platform HTTP benchmarking tool.</li>
<li><a href="https://github.com/bosun-monitor/bosun">bosun</a> – Time Series Alerting Framework.</li>
<li><a href="https://github.com/rogerwelin/cassowary">cassowary</a> – Modern cross-platform HTTP load-testing tool written in Go.</li>
<li><a href="https://github.com/centerorbit/depcharge">DepCharge</a> – Helps orchestrating the execution of commands across the many dependencies in larger projects.</li>
<li><a href="https://github.com/ozankasikci/dockerfile-generator">Dockerfile-Generator</a> – A go library and an executable that produces valid Dockerfiles using various input channels.</li>
<li><a href="https://github.com/liudng/dogo">dogo</a> – Monitoring changes in the source file and automatically compile and run (restart).</li>
<li><a href="https://github.com/appleboy/drone-jenkins">drone-jenkins</a> – Trigger downstream Jenkins jobs using a binary, docker or Drone CI.</li>
<li><a href="https://github.com/appleboy/drone-scp">drone-scp</a> – Copy files and artifacts via SSH using a binary, docker or Drone CI.</li>
<li><a href="https://github.com/chrismckenzie/dropship">Dropship</a> – Tool for deploying code via cdn.</li>
<li><a href="https://github.com/appleboy/easyssh-proxy">easyssh-proxy</a> – Golang package for easy remote execution through SSH and SCP downloading via <code>ProxyCommand</code>.</li>
<li><a href="https://github.com/mkchoi212/fac">fac</a> – Command-line user interface to fix git merge conflicts.</li>
<li><a href="https://github.com/gaia-pipeline/gaia">gaia</a> – Build powerful pipelines in any programming language.</li>
<li><a href="https://github.com/go-gitea/gitea">Gitea</a> – Fork of Gogs, entirely community driven.</li>
<li><a href="https://git.jonasfranz.software/JonasFranzDEV/gitea-github-migrator">gitea-github-migrator</a> – Migrate all your GitHub repositories, issues, milestones and labels to your Gitea instance.</li>
<li><a href="https://github.com/go-furnace/go-furnace">go-furnace</a> – Hosting solution written in Go. Deploy your Application with ease on AWS, GCP or DigitalOcean.</li>
<li><a href="https://github.com/sanbornm/go-selfupdate">go-selfupdate</a> – Enable your Go applications to self update.</li>
<li><a href="https://github.com/cryptojuice/gobrew">gobrew</a> – gobrew lets you easily switch between multiple versions of go.</li>
<li><a href="https://github.com/sirnewton01/godbg">godbg</a> – Web-based gdb front-end application.</li>
<li><a href="https://gogs.io/">Gogs</a> – A Self Hosted Git Service in the Go Programming Language.</li>
<li><a href="https://github.com/inconshreveable/gonative">gonative</a> – Tool which creates a build of Go that can cross compile to all platforms while still using the Cgo-enabled versions of the stdlib packages.</li>
<li><a href="https://github.com/ahmetalpbalkan/govvv">govvv</a> – “go build” wrapper to easily add version information into Go binaries.</li>
<li><a href="https://github.com/mitchellh/gox">gox</a> – Dead simple, no frills Go cross compile tool.</li>
<li><a href="https://github.com/laher/goxc">goxc</a> – build tool for Go, with a focus on cross-compiling and packaging.</li>
<li><a href="https://github.com/yaronsumel/grapes">grapes</a> – Lightweight tool designed to distribute commands over ssh with ease.</li>
<li><a href="https://github.com/moovweb/gvm">GVM</a> – GVM provides an interface to manage Go versions.</li>
<li><a href="https://github.com/rakyll/hey">Hey</a> – Hey is a tiny program that sends some load to a web application.</li>
<li><a href="https://github.com/jenkins-zh/jenkins-cli">jcli</a> – Jenkins CLI allows you manage your Jenkins as an easy way.</li>
<li><a href="https://github.com/ajvb/kala">kala</a> – Simplistic, modern, and performant job scheduler.</li>
<li><a href="https://github.com/cswank/kcli">kcli</a> – Command line tool for inspecting kafka topics/partitions/messages.</li>
<li><a href="https://github.com/kubernetes/kubernetes">kubernetes</a> – Container Cluster Manager from Google.</li>
<li><a href="https://github.com/ivanilves/lstags">lstags</a> – Tool and API to sync Docker images across different registries.</li>
<li><a href="https://github.com/timdp/lwc">lwc</a> – A live-updating version of the UNIX wc command.</li>
<li><a href="https://github.com/xwjdsh/manssh">manssh</a> – manssh is a command line tool for managing your ssh alias config easily.</li>
<li><a href="https://github.com/moby/moby">Moby</a> – Collaborative project for the container ecosystem to assemble container-based systems.</li>
<li><a href="https://github.com/emicklei/mora">Mora</a> – REST server for accessing MongoDB documents and meta data.</li>
<li><a href="https://github.com/ostrost/ostent">ostent</a> – collects and displays system metrics and optionally relays to Graphite and/or InfluxDB.</li>
<li><a href="https://github.com/mitchellh/packer">Packer</a> – Packer is a tool for creating identical machine images for multiple platforms from a single source configuration.</li>
<li><a href="https://github.com/bengadbois/pewpew">Pewpew</a> – Flexible HTTP command line stress tester.</li>
<li><a href="https://github.com/pomerium/pomerium">Pomerium</a> – Pomerium is an identity-aware access proxy.</li>
<li><a href="https://github.com/alouche/rodent">Rodent</a> – Rodent helps you manage Go versions, projects and track dependencies.</li>
<li><a href="https://github.com/oxyno-zeta/s3-proxy">s3-proxy</a> – S3 Proxy with GET, PUT and DELETE methods and authentication (OpenID Connect and Basic Auth).</li>
<li><a href="https://github.com/rlmcpherson/s3gof3r">s3gof3r</a> – Small utility/library optimized for high speed transfer of large objects into and out of Amazon S3.</li>
<li><a href="https://github.com/peak/s5cmd">s5cmd</a> – Blazing fast S3 and local filesystem execution tool.</li>
<li><a href="https://github.com/scaleway/scaleway-cli">Scaleway-cli</a> – Manage BareMetal Servers from Command Line (as easily as with Docker).</li>
<li><a href="https://github.com/bitfield/script">script</a> – Making it easy to write shell-like scripts in Go for DevOps and system administration tasks.</li>
<li><a href="https://github.com/ChristopherRabotin/sg">sg</a> – Benchmarks a set of HTTP endpoints (like ab), with possibility to use the response code and data between each call for specific server stress based on its previous response.</li>
<li><a href="https://github.com/TimothyYe/skm">skm</a> – SKM is a simple and powerful SSH Keys Manager, it helps you to manage your multiple SSH keys easily!</li>
<li><a href="https://github.com/sanathp/statusok">StatusOK</a> – Monitor your Website and REST APIs.Get Notified through Slack, E-mail when your server is down or response time is more than expected.</li>
<li><a href="https://github.com/dikhan/terraform-provider-openapi">terraform-provider-openapi</a> – Terraform provider plugin that dynamically configures itself at runtime based on an OpenAPI document (formerly known as swagger file) containing the definitions of the APIs exposed.</li>
<li><a href="https://github.com/containous/traefik">traefik</a> – Reverse proxy and load balancer with support for multiple backends.</li>
<li><a href="https://github.com/xitonix/trubka">trubka</a> – A CLI tool to manage and troubleshoot Apache Kafka clusters with the ability of generically publishing/consuming protocol buffer and plain text events to/from Kafka.</li>
<li><a href="https://github.com/ovh/utask">uTask</a> – Automation engine that models and executes business processes declared in yaml.</li>
<li><a href="https://github.com/tsenart/vegeta">Vegeta</a> – HTTP load testing tool and library. It’s over 9000!</li>
<li><a href="https://github.com/adnanh/webhook">webhook</a> – Tool which allows user to create HTTP endpoints (hooks) that execute commands on the server.</li>
<li><a href="https://wide.b3log.org/login">Wide</a> – Web-based IDE for Teams using Golang.</li>
<li><a href="https://github.com/masterzen/winrm-cli">winrm-cli</a> – Cli tool to remotely execute commands on Windows machines.</li>
</ul>
<h4 id="其他软件">其他软件</h4>
<ul>
<li><a href="https://goplay.tools/">Better Go Playground</a> – Go playground with syntax highlight, code completion and other features.</li>
<li><a href="https://github.com/crufter/borg">borg</a> – Terminal based search engine for bash snippets.</li>
<li><a href="https://github.com/tejo/boxed">boxed</a> – Dropbox based blog engine.</li>
<li><a href="https://github.com/rafael-santiago/cherry">Cherry</a> – Tiny webchat server in Go.</li>
<li><a href="https://github.com/gocircuit/circuit">Circuit</a> – Circuit is a programmable platform-as-a-service (PaaS) and/or Infrastructure-as-a-Service (IaaS), for management, discovery, synchronization and orchestration of services and hosts comprising cloud applications.</li>
<li><a href="https://github.com/tylertreat/Comcast">Comcast</a> – Simulate bad network connections.</li>
<li><a href="https://github.com/kelseyhightower/confd">confd</a> – Manage local application configuration files using templates and data from etcd or consul.</li>
<li><a href="https://github.com/schollz/croc">croc</a> – Easily and securely send files or folders from one computer to another.</li>
<li><a href="http://www.docker.com/">Docker</a> – Open platform for distributed applications for developers and sysadmins.</li>
<li><a href="https://github.com/documize/community">Documize</a> – Modern wiki software that integrates data from SaaS tools.</li>
<li><a href="https://github.com/scryinfo/dp">dp</a> – Through SDK for data exchange with blockchain, developers can get easy access to DAPP development.</li>
<li><a href="https://github.com/odeke-em/drive">drive</a> – Google Drive client for the commandline.</li>
<li><a href="https://github.com/gilbertchen/duplicacy">Duplicacy</a> – A cross-platform network and cloud backup tool based on the idea of lock-free deduplication.</li>
<li><a href="https://github.com/moshebe/gebug">Gebug</a> – A tool that makes debugging of Dockerized Go applications super easy by enabling Debugger and Hot-Reload features, seamlessly.</li>
<li><a href="https://github.com/Antonito/gfile">gfile</a> – Securely transfer files between two computers, without any third party, over WebRTC.</li>
<li><a href="https://github.com/shurcooL/Go-Package-Store">Go Package Store</a> – App that displays updates for the Go packages in your GOPATH.</li>
<li><a href="https://github.com/Sioro-Neoku/go-peerflix">go-peerflix</a> – Video streaming torrent client.</li>
<li><a href="https://github.com/Humpheh/goboy">GoBoy</a> – Nintendo Game Boy Color emulator written in Go.</li>
<li><a href="https://github.com/goccmack/gocc">gocc</a> – Gocc is a compiler kit for Go written in Go.</li>
<li><a href="https://github.com/diankong/GoDocTooltip">GoDocTooltip</a> – Chrome extension for Go Doc sites, which shows function description as tooltip at function list.</li>
<li><a href="https://jetbrains.com/go">GoLand</a> – Full featured cross-platform Go IDE.</li>
<li><a href="https://github.com/buger/gor">Gor</a> – Http traffic replication tool, for replaying traffic from production to stage/dev environments in real-time.</li>
<li><a href="https://github.com/meloalright/guora">Guora</a> – A self-hosted Quora like web application written in Go.</li>
<li><a href="http://gohugo.io/">hugo</a> – Fast and Modern Static Website Engine.</li>
<li><a href="https://github.com/thestrukture/ide">ide</a> – Browser accessible IDE. Designed for Go with Go.</li>
<li><a href="https://github.com/dimiro1/ipe">ipe</a> – Open source Pusher server implementation compatible with Pusher client libraries written in GO.</li>
<li><a href="https://github.com/assafmo/joincap">joincap</a> – Command-line utility for merging multiple pcap files together.</li>
<li><a href="https://jujucharms.com/">Juju</a> – Cloud-agnostic service deployment and orchestration – supports EC2, Azure, Openstack, MAAS and more.</li>
<li><a href="https://github.com/jeffail/leaps">Leaps</a> – Pair programming service using Operational Transforms.</li>
<li><a href="https://github.com/yunabe/lgo">lgo</a> – Interactive Go programming with Jupyter. It supports code completion, code inspection and 100% Go compatibility.</li>
<li><a href="https://limetext.github.io/">limetext</a> – Lime Text is a powerful and elegant text editor primarily developed in Go that aims to be a Free and open-source software successor to Sublime Text.</li>
<li><a href="https://github.com/visualfc/liteide">LiteIDE</a> – LiteIDE is a simple, open source, cross-platform Go IDE.</li>
<li><a href="https://github.com/quii/mockingjay-server">mockingjay</a> – Fake HTTP servers and consumer driven contracts from one configuration file. You can also make the server randomly misbehave to help do more realistic performance tests.</li>
<li><a href="https://github.com/mehrdadrad/mylg">myLG</a> – Command Line Network Diagnostic tool written in Go.</li>
<li><a href="https://github.com/unix4fun/naclpipe">naclpipe</a> – Simple NaCL EC25519 based crypto pipe tool written in Go.</li>
<li><a href="https://github.com/fogleman/nes">nes</a> – Nintendo Entertainment System (NES) emulator written in Go.</li>
<li><a href="https://github.com/gulien/orbit">Orbit</a> – A simple tool for running commands and generating files from templates.</li>
<li><a href="https://github.com/pointlander/peg">peg</a> – Peg, Parsing Expression Grammar, is an implementation of a Packrat parser generator.</li>
<li><a href="https://github.com/restic/restic">restic</a> – De-duplicating backup program.</li>
<li><a href="https://github.com/boyter/scc">scc</a> – Sloc Cloc and Code, a very fast accurate code counter with complexity calculations and COCOMO estimates.</li>
<li><a href="https://github.com/chrislusf/seaweedfs">Seaweed File System</a> – Fast, Simple and Scalable Distributed File System with O(1) disk seek.</li>
<li><a href="https://github.com/msoap/shell2http">shell2http</a> – Executing shell commands via http server (for prototyping or remote control).</li>
<li><a href="https://github.com/intelsdi-x/snap">snap</a> – Powerful telemetry framework.</li>
<li><a href="https://github.com/lucasgomide/snitch">Snitch</a> – Simple way to notify your team and many tools when someone has deployed any application via Tsuru.</li>
<li><a href="https://github.com/pressly/sup">Stack Up</a> – Stack Up, a super simple deployment tool – just Unix – think of it like ‘make’ for a network of servers.</li>
<li><a href="https://syncthing.net/">syncthing</a> – Open, decentralized file synchronization tool and protocol.</li>
<li><a href="https://github.com/mehrdadrad/tcpprobe">tcpprobe</a> – TCP tool for network performance and path monitoring, including socket statistics.</li>
<li><a href="https://github.com/crazcalm/term-quiz">term-quiz</a> – Quizzes for your terminal.</li>
<li><a href="https://github.com/shopify/toxiproxy">toxiproxy</a> – Proxy to simulate network and system conditions for automated tests.</li>
<li><a href="https://tsuru.io/">tsuru</a> – Extensible and open source Platform as a Service software.</li>
<li><a href="https://github.com/lingrino/vaku">vaku</a> – CLI &amp; API for folder-based functions in Vault like copy, move, and search.</li>
<li><a href="https://github.com/VerizonDigital/vflow">vFlow</a> – High-performance, scalable and reliable IPFIX, sFlow and Netflow collector.</li>
<li><a href="https://github.com/wellington/wellington">wellington</a> – Sass project management tool, extends the language with sprite functions (like Compass).</li>
<li><a href="https://github.com/get-woke/woke">woke</a> – Detect non-inclusive language in your source code.</li>
</ul>
<h2 id="资源">资源</h2>
<blockquote>
<p>到哪里寻找最新的 Go 库</p>
</blockquote>
<h3 id="基准测试">基准测试</h3>
<ul>
<li><a href="https://github.com/davecheney/autobench">autobench</a> – Framework to compare the performance between different Go versions.</li>
<li><a href="https://github.com/mrLSD/go-benchmark-app">go-benchmark-app</a> – Powerful HTTP-benchmark tool mixed with Аb, Wrk, Siege tools. Gathering statistics and various parameters for benchmarks and comparison results.</li>
<li><a href="https://github.com/tylertreat/go-benchmarks">go-benchmarks</a> – Few miscellaneous Go microbenchmarks. Compare some language features to alternative approaches.</li>
<li><a href="https://github.com/julienschmidt/go-http-routing-benchmark">go-http-routing-benchmark</a> – Go HTTP request router benchmark and comparison.</li>
<li><a href="https://github.com/zerosnake0/go-json-benchmark">go-json-benchmark</a> – Go JSON benchmark.</li>
<li><a href="https://github.com/smallnest/go-web-framework-benchmark">go-web-framework-benchmark</a> – Go web framework benchmark.</li>
<li><a href="https://github.com/alecthomas/go_serialization_benchmarks">go_serialization_benchmarks</a> – Benchmarks of Go serialization methods.</li>
<li><a href="https://github.com/PuerkitoBio/gocostmodel">gocostmodel</a> – Benchmarks of common basic operations for the Go language.</li>
<li><a href="https://github.com/tyler-smith/golang-sql-benchmark">golang-sql-benchmark</a> – Collection of benchmarks for popular Go database/SQL utilities.</li>
<li><a href="https://github.com/feyeleanor/GoSpeed">gospeed</a> – Go micro-benchmarks for calculating the speed of language constructs.</li>
<li><a href="https://github.com/jimrobinson/kvbench">kvbench</a> – Key/Value database benchmark.</li>
<li><a href="https://github.com/atemerev/skynet">skynet</a> – Skynet 1M threads microbenchmark.</li>
<li><a href="https://github.com/fawick/speedtest-resize">speedtest-resize</a> – Compare various Image resize algorithms for the Go language.</li>
</ul>
<h3 id="会议活动">会议活动</h3>
<ul>
<li><a href="http://www.capitalgolang.com/">Capital Go</a> – Washington, D.C., USA.</li>
<li><a href="http://www.dotgo.eu/">dotGo</a> – Paris, France.</li>
<li><a href="http://gocon.connpass.com/">GoCon</a> – Tokyo, Japan.</li>
<li><a href="https://www.godays.io/">GoDays</a> – Berlin, Germany.</li>
<li><a href="http://golab.io/">GoLab</a> – Florence, Italy.</li>
<li><a href="http://golanguk.com/">GolangUK</a> – London, UK.</li>
<li><a href="http://gopherchina.org/">GopherChina</a> – Shanghai, China.</li>
<li><a href="http://www.gophercon.com/">GopherCon</a> – Denver, USA.</li>
<li><a href="https://gophercon.com.au/">GopherCon Australia</a> – Sydney, Australia.</li>
<li><a href="https://gopherconbr.org/">GopherCon Brazil</a> – Florianópolis, BR.</li>
<li><a href="https://gophercon.is/">GopherCon Europe</a> – Berlin, Germany.</li>
<li><a href="https://www.gophercon.in/">GopherCon India</a> – Pune, India.</li>
<li><a href="https://www.gophercon.org.il/">GopherCon Israel</a> – Tel Aviv, Israel.</li>
<li><a href="https://www.gophercon-russia.ru/">GopherCon Russia</a> – Moscow, Russia.</li>
<li><a href="https://gophercon.sg/">GopherCon Singapore</a> – Mapletree Business City, Singapore.</li>
<li><a href="https://gophercon.vn/">GopherCon Vietnam</a> – Ho Chi Minh City, Vietnam.</li>
<li><a href="http://gothamgo.com/">GothamGo</a> – New York City, USA.</li>
<li><a href="https://goway.io/">GoWayFest</a> – Minsk, Belarus.</li>
</ul>
<h3 id="电子书">电子书</h3>
<ul>
<li><a href="https://leanpub.com/GoNotebook/read">A Go Developer’s Notebook</a></li>
<li><a href="http://www.golang-book.com/">An Introduction to Programming in Go</a></li>
<li><a href="https://www.gitbook.com/book/astaxie/build-web-application-with-golang/details">Build Web Application with Golang</a></li>
<li><a href="https://www.gitbook.com/book/codegangsta/building-web-apps-with-go/details">Building Web Apps With Go</a></li>
<li><a href="https://bitfieldconsulting.com/books">For the Love of Go</a> – A series of introductory books for Go beginners.</li>
<li><a href="https://go101.org/">Go 101</a> – A book focusing on Go syntax/semantics and all kinds of details.</li>
<li><a href="http://golangbootcamp.com/">Go Bootcamp</a></li>
<li><a href="https://github.com/thedevsir/gosuccinctly">Go Succinctly</a> – in Persian.</li>
<li><a href="https://github.com/dariubs/GoBooks">GoBooks</a> – A curated list of Go books.</li>
<li><a href="https://www.digitalocean.com/community/books/how-to-code-in-go-ebook">How To Code in Go eBook</a> – A 600 page introduction to Go aimed at first time developers.</li>
<li><a href="https://www.miek.nl/downloads/Go/Learning-Go-latest.pdf">Learning Go</a></li>
<li><a href="https://jan.newmarch.name/go/">Network Programming With Go</a></li>
<li><a href="https://blasrodri.github.io/spaceship-go-gh-pages/">Spaceship Go A Journey to the Standard Library</a></li>
<li><a href="http://www.gopl.io/">The Go Programming Language</a></li>
<li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example">The Golang Standard Library by Example (Chinese)</a></li>
<li><a href="https://github.com/thewhitetulip/web-dev-golang-anti-textbook/">Web Application with Go the Anti-Textbook</a></li>
<li><a href="https://compilerbook.com/">Writing A Compiler In Go</a></li>
<li><a href="https://interpreterbook.com/">Writing An Interpreter In Go</a></li>
</ul>
<h3 id="gophers">Gophers</h3>
<ul>
<li><a href="https://github.com/MariaLetta/free-gophers-pack">Free Gophers Pack</a> – Gopher graphics pack by Maria Letta with illustrations and emotional characters in vector and raster.</li>
<li><a href="https://github.com/keygx/Go-gopher-Vector">Go-gopher-Vector</a> – Go gopher Vector Data [.ai, .svg].</li>
<li><a href="https://github.com/GolangUA/gopher-logos">gopher-logos</a> – adorable gopher logos.</li>
<li><a href="https://github.com/tenntenn/gopher-stickers">gopher-stickers</a></li>
<li><a href="https://github.com/golang-samples/gopher-vector">gopher-vector</a></li>
<li><a href="https://github.com/shalakhin/gophericons">gophericons</a></li>
<li><a href="https://github.com/matryer/gopherize.me">gopherize.me</a> – Gopherize yourself.</li>
<li><a href="https://github.com/ashleymcnamara/gophers">gophers</a> – Gopher artworks by Ashley McNamara.</li>
<li><a href="https://github.com/egonelbre/gophers">gophers</a> – Free gophers.</li>
<li><a href="https://github.com/rogeralsing/gophers">gophers</a> – random gopher graphics.</li>
<li><a href="https://github.com/sillecelik/go-gopher">gophers</a> – Gopher amigurumi toy pattern.</li>
</ul>
<h3 id="线下聚会">线下聚会</h3>
<ul>
<li><a href="https://www.meetup.com/Basel-Go-Meetup/">Basel Go Meetup</a></li>
<li><a href="https://www.meetup.com/Belfast-Gophers/">Belfast Gophers</a></li>
<li><a href="https://www.meetup.com/golang-users-berlin/">Berlin Golang</a></li>
<li><a href="https://www.meetup.com/Brisbane-Golang-Meetup/">Brisbane Gophers</a></li>
<li><a href="https://www.meetup.com/Canberra-Gophers/">Canberra Gophers</a></li>
<li><a href="https://www.meetup.com/golanguagenewyork/">Go Language NYC</a></li>
<li><a href="https://www.meetup.com/Go-London-User-Group/">Go London User Group</a></li>
<li><a href="https://www.meetup.com/Go-Remote-Meetup/">Go Remote Meetup</a></li>
<li><a href="https://www.meetup.com/go-toronto/">Go Toronto</a></li>
<li><a href="https://www.meetup.com/Go-Users-Group-Atlanta/">Go User Group Atlanta</a></li>
<li><a href="https://www.meetup.com/GoBandung/">GoBandung</a></li>
<li><a href="https://www.meetup.com/gobridge/">GoBridge, San Francisco, CA</a></li>
<li><a href="https://www.meetup.com/GoCracow/">GoCracow – Krakow, Poland</a></li>
<li><a href="https://www.meetup.com/GoJakarta/">GoJakarta</a></li>
<li><a href="https://www.meetup.com/golang-amsterdam/">Golang Amsterdam</a></li>
<li><a href="https://www.meetup.com/Golang-Argentina/">Golang Argentina</a></li>
<li><a href="https://www.meetup.com/BaltimoreGolang/">Golang Baltimore, MD</a></li>
<li><a href="https://www.meetup.com/Golang-Bangalore/">Golang Bangalore</a></li>
<li><a href="https://www.meetup.com/go-belo-horizonte/">Golang Belo Horizonte – Brazil</a></li>
<li><a href="https://www.meetup.com/bostongo/">Golang Boston</a></li>
<li><a href="https://www.meetup.com/Golang-Bulgaria/">Golang Bulgaria</a></li>
<li><a href="https://www.meetup.com/Cardiff-Go-Meetup/">Golang Cardiff, UK</a></li>
<li><a href="https://www.meetup.com/Go-Cph/">Golang Copenhagen</a></li>
<li><a href="https://www.meetup.com/GolangCWB/">Golang Curitiba – Brazil</a></li>
<li><a href="https://www.meetup.com/Golang-DC/">Golang DC, Arlington, VA</a></li>
<li><a href="https://www.meetup.com/golang-dorset/">Golang Dorset, UK</a></li>
<li><a href="https://www.meetup.com/Golang-Estonia/">Golang Estonia</a></li>
<li><a href="https://www.meetup.com/Gurgaon-Go-Meetup/">Golang Gurgaon, India</a></li>
<li><a href="https://www.meetup.com/Go-User-Group-Hamburg/">Golang Hamburg – Germany</a></li>
<li><a href="https://www.meetup.com/Go-Israel/">Golang Israel</a></li>
<li><a href="https://www.meetup.com/Joinville-Go-Meetup/">Golang Joinville – Brazil</a></li>
<li><a href="https://www.meetup.com/GDG-Golang-Korea/">Golang Korea</a></li>
<li><a href="https://www.meetup.com/Golang-Peru/">Golang Lima – Peru</a></li>
<li><a href="https://www.meetup.com/Golang-Lyon/">Golang Lyon</a></li>
<li><a href="https://www.meetup.com/fr-FR/Golang-Marseille/">Golang Marseille</a></li>
<li><a href="https://www.meetup.com/golang-mel/">Golang Melbourne</a></li>
<li><a href="https://www.meetup.com/Golang-Mountain-View/">Golang Mountain View</a></li>
<li><a href="https://www.meetup.com/nycgolang/">Golang New York</a></li>
<li><a href="https://www.meetup.com/en-AU/Golang-North-East/">Golang North East</a></li>
<li><a href="https://www.meetup.com/Golang-Paris/">Golang Paris</a></li>
<li><a href="https://www.meetup.com/Golang-Pune/">Golang Pune</a></li>
<li><a href="https://www.meetup.com/golangsg/">Golang Singapore</a></li>
<li><a href="https://www.meetup.com/Go-Stockholm/">Golang Stockholm</a></li>
<li><a href="https://www.meetup.com/golang-syd/">Golang Sydney, AU</a></li>
<li><a href="https://www.meetup.com/golangbr/">Golang São Paulo – Brazil</a></li>
<li><a href="https://www.meetup.com/golang-taipei-meetup/">Golang Taipei</a></li>
<li><a href="https://kommunity.com/goturkiye">Golang Turkey</a></li>
<li><a href="https://www.meetup.com/golangvan/">Golang Vancouver, BC</a></li>
<li><a href="https://www.meetup.com/viennago/">Golang Vienna, Austria</a></li>
<li><a href="https://www.meetup.com/GolangKazan/">Golang Казань</a></li>
<li><a href="https://www.meetup.com/Golang-Moscow/">Golang Москва</a></li>
<li><a href="https://www.meetup.com/Golang-Peter/">Golang Питер</a></li>
<li><a href="https://www.meetup.com/golangsf">GoSF – San Francisco, CA</a></li>
<li><a href="https://www.meetup.com/Istanbul-Golang/">Istanbul Golang</a></li>
<li><a href="https://www.meetup.com/golang/">Seattle Go Programmers</a></li>
<li><a href="https://www.meetup.com/uagolang/">Ukrainian Golang User Groups</a></li>
<li><a href="https://www.meetup.com/utahgophers/">Utah Go User Group</a></li>
<li><a href="https://www.meetup.com/Women-Who-Go/">Women Who Go – San Francisco, CA</a></li>
</ul>
<h3 id="代码风格">代码风格</h3>
<ul>
<li><a href="https://github.com/bahlo/go-styleguide">bahlo/go-styleguide</a></li>
<li><a href="https://github.com/cockroachdb/cockroach/blob/master/docs/style.md">CockroachDB</a></li>
<li><a href="https://docs.gitlab.com/ee/development/go_guide/">GitLab</a></li>
<li><a href="https://github.com/hyperledger/fabric/blob/release-1.4/docs/source/style-guides/go-style.rst">Hyperledger</a></li>
<li><a href="https://github.com/boramalper/magnetico/wiki/magnetico-Design-Specification">Magnetico</a></li>
<li><a href="https://about.sourcegraph.com/handbook/engineering/go_style_guide">Sourcegraph</a></li>
<li><a href="https://thanos.io/tip/contributing/coding-style-guide.md/">Thanos</a></li>
<li><a href="https://github.com/uber-go/guide/blob/master/style.md">Uber</a></li>
</ul>
<h3 id="社交媒体">社交媒体</h3>
<h4 id="twitter">Twitter</h4>
<ul>
<li><a href="https://twitter.com/golang">@golang</a></li>
<li><a href="https://twitter.com/golang_news">@golang_news</a></li>
<li><a href="https://twitter.com/golangch">@golangch</a></li>
<li><a href="https://twitter.com/golangflow">@golangflow</a></li>
<li><a href="https://twitter.com/golangweekly">@golangweekly</a></li>
</ul>
<h4 id="reddit">Reddit</h4>
<ul>
<li><a href="https://www.reddit.com/r/golang/">r/golang</a></li>
</ul>
<h3 id="网站">网站</h3>
<ul>
<li><a href="https://go.libhunt.com/">Awesome Go @LibHunt</a> – Your go-to Go Toolbox.</li>
<li><a href="https://github.com/lukasz-madon/awesome-remote-job">Awesome Remote Job</a> – Curated list of awesome remote jobs. A lot of them are looking for Go hackers.</li>
<li><a href="https://github.com/bayandin/awesome-awesomeness">awesome-awesomeness</a> – List of other amazingly awesome lists.</li>
<li><a href="https://www.codingame.com/">CodinGame</a> – Learn Go by solving interactive tasks using small games as practical examples.</li>
<li><a href="http://blog.golang.org/">Go Blog</a> – The official Go blog.</li>
<li><a href="http://golang-challenge.org/">Go Challenge</a> – Learn Go by solving problems and getting feedback from Go experts.</li>
<li><a href="https://www.youtube.com/watch?v=nvoIPQYdx9g&amp;list=PLEcwzBXTPUE_YQR7R0BRtHBYJ0LN3Y0i3">Go Code Club</a> – A group of Gophers read and discuss a different Go project every week.</li>
<li><a href="https://hashnode.com/n/go">Go Community on Hashnode</a> – Community of Gophers on Hashnode.</li>
<li><a href="https://forum.golangbridge.org/">Go Forum</a> – Forum to discuss Go.</li>
<li><a href="https://www.goin5minutes.com/">Go In 5 Minutes</a> – 5 minute screencasts focused on getting one thing done.</li>
<li><a href="https://github.com/golang/go/wiki/Projects">Go Projects</a> – List of projects on the Go community wiki.</li>
<li><a href="https://goreportcard.com/">Go Report Card</a> – A report card for your Go package.</li>
<li><a href="https://go.dev/">go.dev</a> – A hub for Go developers.</li>
<li><a href="https://github.com/ninedraft/gocryforhelp">gocryforhelp</a> – Collection of Go projects that needs help. Good place to start your open-source way in Go.</li>
<li><a href="https://godoc.org/">godoc.org</a> – Documentation for open source Go packages.</li>
<li><a href="https://golangjob.xyz/">Golang Developer Jobs</a> – Developer Jobs exclusivly for Golang related Roles.</li>
<li><a href="https://golangflow.io/">Golang Flow</a> – Post Updates, News, Packages and more.</li>
<li><a href="https://golangnews.com/">Golang News</a> – Links and news about Go programming.</li>
<li><a href="https://golangresources.com/">Golang Resources</a> – A curation of the best articles, exercises, talks and videos to learn Go.</li>
<li><a href="https://github.com/mholt/golang-graphics">golang-graphics</a> – Collection of Go images, graphics, and art.</li>
<li><a href="https://groups.google.com/forum/#!forum/golang-nuts">golang-nuts</a> – Go mailing list.</li>
<li><a href="https://plus.google.com/communities/114112804251407510571">Google Plus Community</a> – The Google+ community for #golang enthusiasts.</li>
<li><a href="https://invite.slack.golangbridge.org/">Gopher Community Chat</a> – Join Our New Slack Community For Gophers (<a href="https://blog.gopheracademy.com/gophers-slack-community/">Understand how it came</a>).</li>
<li><a href="https://gophercises.com/">Gophercises</a> – Free coding exercises for budding gophers.</li>
<li><a href="https://gowalker.org/">gowalker.org</a> – Go Project API documentation.</li>
<li><a href="https://m-zajac.github.io/json2go">json2go</a> – Advanced JSON to Go struct conversion – online tool.</li>
<li><a href="https://www.youtube.com/c/justforfunc">justforfunc</a> – Youtube channel dedicated to Go programming language tips and tricks, hosted by Francesc Campoy <a href="https://twitter.com/francesc">@francesc</a>.</li>
<li><a href="https://lille-gophers.loscrackitos.codes/">Lille Gophers</a> – Golang talks community in Lille, France (<a href="https://twitter.com/LilleGophers">@LilleGophers</a>).</li>
<li><a href="https://madewithgolang.com/?ref=awesome-go">Made with Golang</a></li>
<li><a href="https://www.reddit.com/r/golang">r/Golang</a> – News about Go.</li>
<li><a href="https://studygolang.com/">studygolang</a> – The community of studygolang in China.</li>
<li><a href="https://github.com/trending?l=go">Trending Go repositories on GitHub today</a> – Good place to find new Go libraries.</li>
<li><a href="https://tutorialedge.net/course/golang/">TutorialEdge – Golang</a></li>
</ul>
<h4 id="教程">教程</h4>
<ul>
<li><a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/">50 Shades of Go</a> – Traps, Gotchas, and Common Mistakes for New Golang Devs.</li>
<li><a href="https://snipcart.com/blog/golang-ecommerce-ponzu-cms-demo?utm_term=golang-ecommerce-ponzu-cms-demo">A Guide to Golang E-Commerce</a> – Building a Golang site for e-commerce (demo included).</li>
<li><a href="http://tour.golang.org/">A Tour of Go</a> – Interactive tour of Go.</li>
<li><a href="https://github.com/astaxie/build-web-application-with-golang">Build web application with Golang</a> – Golang ebook intro how to build a web app with golang.</li>
<li><a href="https://semaphoreci.com/community/tutorials/building-and-testing-a-rest-api-in-go-with-gorilla-mux-and-postgresql">Building and Testing a REST API in Go with Gorilla Mux and PostgreSQL</a> – We’ll write an API with the help of the powerful Gorilla Mux.</li>
<li><a href="https://semaphoreci.com/community/tutorials/building-go-web-applications-and-microservices-using-gin">Building Go Web Applications and Microservices Using Gin</a> – Get familiar with Gin and find out how it can help you reduce boilerplate code and build a request handling pipeline.</li>
<li><a href="https://medium.com/@rocketlaunchr.cloud/caching-slow-database-queries-1085d308a0c9">Caching Slow Database Queries</a> – How to cache slow database queries.</li>
<li><a href="https://medium.com/@rocketlaunchr.cloud/canceling-mysql-in-go-827ed8f83b30">Canceling MySQL</a> – How to cancel MySQL queries.</li>
<li><a href="https://github.com/shubhamzanwar/design-patterns">Design Patterns in Go</a> – Collection of programming design patterns implemented in Go.</li>
<li><a href="https://github.com/miguelmota/ethereum-development-with-go-book">Ethereum Development with Go</a> – A little e-book on Ethereum Development with Go.</li>
<li><a href="http://gameswithgo.org/">Games With Go</a> – A video series teaching programming and game development.</li>
<li><a href="https://gobyexample.com/">Go By Example</a> – Hands-on introduction to Go using annotated example programs.</li>
<li><a href="https://github.com/a8m/go-lang-cheat-sheet">Go Cheat Sheet</a> – Go’s reference card.</li>
<li><a href="http://go-database-sql.org/">Go database/sql tutorial</a> – Introduction to database/sql.</li>
<li><a href="https://codeplayground.app/">Go Playground for iOS</a> – Interactively edit &amp; play Go snippets on your mobile device.</li>
<li><a href="https://tutorialedge.net/golang/go-webassembly-tutorial/">Go WebAssembly Tutorial – Building a Simple Calculator</a></li>
<li><a href="https://github.com/tmrts/go-patterns">go-patterns</a> – Curated list of Go design patterns, recipes and idioms.</li>
<li><a href="https://github.com/bnkamalesh/goapp">goapp</a> – An opinionated guideline to structure &amp; develop a Go web application/service.</li>
<li><a href="https://github.com/miguelmota/golang-for-nodejs-developers">Golang for Node.js Developers</a> – Examples of Golang compared to Node.js for learning.</li>
<li><a href="https://golangbot.com/learn-golang-series/">Golangbot</a> – Tutorials to get started with programming in Go.</li>
<li><a href="https://golangcode.com/">GolangCode</a> – Collection of code snippets and tutorials to help tackle every day issues.</li>
<li><a href="https://gophersnippets.com/">GopherSnippets</a> – Code snippets with tests and testable examples for the Go programming language.</li>
<li><a href="https://hackr.io/tutorials/learn-golang">Hackr.io</a> – Learn Go from the best online golang tutorials submitted &amp; voted by the golang programming community.</li>
<li><a href="https://medium.com/@rocketlaunchr.cloud/how-to-benchmark-dbq-vs-sqlx-vs-gorm-e814caacecb5">How to Benchmark: dbq vs sqlx vs GORM</a> – Learn how to benchmark in Go. As a case-study, we will benchmark dbq, sqlx and GORM.</li>
<li><a href="https://semaphoreci.com/community/tutorials/how-to-deploy-a-go-web-application-with-docker">How To Deploy a Go Web Application with Docker</a> – Learn how to use Docker for Go development and how to build production Docker images.</li>
<li><a href="https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go">How to Use Godog for Behavior-driven Development in Go</a> – Get started with Godog — a Behavior-driven development framework for building and testing Go applications.</li>
<li><a href="https://github.com/quii/learn-go-with-tests">Learn Go with TDD</a> – Learn Go with test-driven development.</li>
<li><a href="https://milapneupane.com.np/2019/07/06/learning-golang-from-zero-to-hero/">Learning Golang – From zero to hero</a> – Getting started with golang for beginner.</li>
<li><a href="https://www.youtube.com/packagemain">package main</a> – YouTube channel about Programming in Go.</li>
<li><a href="https://www.coursera.org/specializations/google-golang">Programming with Google Go</a> – Coursera Specialization to learn about Go from scratch.</li>
<li><a href="https://medium.com/@martinolsansky/webassembly-with-golang-is-fun-b243c0e34f02">The world’s easiest introduction to WebAssembly with Golang</a></li>
<li><a href="https://github.com/mkaz/working-with-go">Working with Go</a> – Intro to go for experienced programmers.</li>
<li><a href="http://yourbasic.org/golang">Your basic Go</a> – Huge collection of tutorials and how to’s.</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[win10 laradock 配置]]></title>
        <id>https://bluegrasses.github.io/post/win10-laradock-pei-zhi/</id>
        <link href="https://bluegrasses.github.io/post/win10-laradock-pei-zhi/">
        </link>
        <updated>2021-03-02T01:45:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="快速上手">快速上手</h2>
<ol>
<li>将laradock项目代码克隆到本地:</li>
</ol>
<pre><code>git clone https://github.com/Laradock/laradock.git
</code></pre>
<ol start="2">
<li>进入laradock目录 将env-example 重命名为 .env:</li>
</ol>
<pre><code>cp env-example .env
</code></pre>
<ol start="3">
<li>.env 配置修改</li>
</ol>
<pre><code>//解决国内访问网络超时的问题
CHANGE_SOURCE=true
//设置composer的阿里云镜像
WORKSPACE_COMPOSER_REPO_PACKAGIST= https://mirrors.aliyun.com/composer/
//配置mysql的属性
</code></pre>
<ol start="4">
<li>配置nginx站点 (可选)<br>
<code>laradock\nginx\sites</code><br>
将laravel.conf.example 复制一份,重命名为shop.conf</li>
</ol>
<pre><code>//配置shop.conf配置路径
 root E:/codes/php/larademo/public;
</code></pre>
<ol start="5">
<li>安装</li>
</ol>
<pre><code>docker-compose up -d nginx mysql redis
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[larachina03学习笔记]]></title>
        <id>https://bluegrasses.github.io/post/larachina03-xue-xi-bi-ji/</id>
        <link href="https://bluegrasses.github.io/post/larachina03-xue-xi-bi-ji/">
        </link>
        <updated>2020-11-01T23:10:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="杂项问题">杂项问题</h2>
<h3 id="postman-启动空白修复">postman 启动空白修复</h3>
<blockquote>
<p>解决方法:</p>
<p>环境变量-&gt;添加系统变量(添加POSTMAN_DISABLE_GPU = true)</p>
</blockquote>
<h3 id="cerbot-部署https">cerbot 部署https</h3>
<blockquote>
<p>利用宝塔更方便点</p>
</blockquote>
<h3 id="宝塔远程连接数据库">宝塔远程连接数据库</h3>
<p>1.数据库权限设为所有人或指定ip</p>
<p>2.宝塔安全中放行3306端口</p>
<h2 id="restful设计原则">RESTful设计原则</h2>
<h3 id="常用动词">常用动词</h3>
<ul>
<li>
<p>GET：读取（Read）</p>
</li>
<li>
<p>POST：新建（Create）</p>
</li>
<li>
<p>PUT：更新（Update）</p>
</li>
<li>
<p>PATCH：更新（Update），通常是部分更新</p>
</li>
<li>
<p>DELETE：删除（Delete）</p>
</li>
</ul>
<blockquote>
<p>根据 HTTP 规范，动词一律大写</p>
</blockquote>
<h3 id="版本控制">版本控制</h3>
<p><strong>两种情况:</strong></p>
<p>第一种情况</p>
<p><code>https://api.larabbs.com/v1</code></p>
<p><code>https://api.larabbs.com/v2</code></p>
<p>第二种情况</p>
<p><code>https://api.larabbs.com/ Accept: application/prs.larabbs.v1+json</code></p>
<p><code>https://api.larabbs.com/ Accept: application/prs.larabbs.v1+json</code></p>
<h3 id="路由命名">路由命名</h3>
<p>两个关键词: 复数 命名不要有动词</p>
<p><code>POST https://api.larabbs.com/topic</code></p>
<p><code>GET https://api.larabbs.com/topics/1</code></p>
<p><code>POST https://api.larabbs.com/topics/1/comments</code></p>
<p><code>DELETE https://api.larabbs.com/topics/1/comments/10</code></p>
<h3 id="资源过滤">资源过滤</h3>
<pre><code>?state=closed: 不同状态的资源
?page=2&amp;per_page=100：访问第几页数据，每页多少条。
?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序
</code></pre>
<h3 id="状态码">状态码</h3>
<p>HTTP状态码就是一个三位数, 分成五个类别</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>1xx</td>
<td>相关信息</td>
</tr>
<tr>
<td>2xx</td>
<td>操作成功</td>
</tr>
<tr>
<td>3xx</td>
<td>重定向</td>
</tr>
<tr>
<td>4xx</td>
<td>客户端错误</td>
</tr>
<tr>
<td>5xx</td>
<td>服务器错误</td>
</tr>
</tbody>
</table>
<blockquote>
<p>200 表示操作成功,但是不同的方法可以返回更精确的状态码</p>
</blockquote>
<pre><code class="language-php">GET: 200 OK
POST: 201 Created
PUT: 200 OK
PATCH: 200 OK
DELETE: 204 No Content
</code></pre>
<pre><code>//2xx
200 OK - 对成功的 GET、PUT、PATCH 或 DELETE 操作进行
响应。也可以被用在不创建新资源的 POST 操作上
201 Created - 对创建新资源的 POST 操作进行响应。应该带
着指向新资源地址的 Location 头
202 Accepted - 服务器接受了请求，但是还未处理，响应中应
该包含相应的指示信息，告诉客户端该去哪里查询关于本次请
求的信息
204 No Content - 对不会返回响应体的成功请求进行响应（比
如 DELETE 请求）
//3xx
304 Not Modified - HTTP缓存header生效的时候用
// 4xx
400 Bad Request - 请求异常，比如请求中的body无法解析
401 Unauthorized - 没有进行认证或者认证非法
403 Forbidden - 服务器已经理解请求，但是拒绝执行它
404 Not Found - 请求一个不存在的资源
405 Method Not Allowed - 所请求的 HTTP 方法不允许当前认证用户访问
410 Gone - 表示当前请求的资源不再可用。当调用老版本 API的时候很有用
415 Unsupported Media Type - 如果请求中的内容类型是错误的
422 Unprocessable Entity - 用来表示校验错误
429 Too Many Requests - 由于请求频次达到上限而被拒绝访问
//5xx
5xx 状态码表示服务端错误. 一般来说,API不会向用户透露服务器的详细信息,所以只要两个状态码就够了
500 Internal Server Error：客户端请求有效，服务器处理时发生了意外。
503 Service Unavailable：服务器无法处理请求，一般用于网站维护状态。
</code></pre>
<h3 id="数据响应格式">数据响应格式</h3>
<h3 id="调用频率限制">调用频率限制</h3>
<p>为了防止服务器被攻击，减少服务器压力，需要对接口进行合适的限流控制，需要在响应头信息中加入合适的信息，告知客户端当前的限流情况</p>
<pre><code>X-RateLimit-Limit :100 最大访问次数
X-RateLimit-Remaining :93 剩余的访问次数
X-RateLimit-Reset :1513784506 到该时间点，访问次数会重置
为 X-RateLimit-Limit
</code></pre>
<h3 id="接口关联">接口关联</h3>
<blockquote>
<p>做接口的思路与我们做网页应用不同，网站中处理验证码，通常是存入 session，注册的时候验证用户输入的验证码与 session 中的验证码是否相同。但是接口是无状态，相互独立的，处理这种相互关联，有先后调用顺序的接口时，常常是第一个接口返回一个随机的 key，利用这个 key 去调用第二个接口。</p>
</blockquote>
<h2 id="dingoapi">dingo/api</h2>
<p>组件名:<code>dingo/api</code></p>
<h3 id="常用配置">常用配置</h3>
<pre><code class="language-php">#有三个配置项  x 本地开发的或私有环境 prs 提供给公司app,单页面等 vnd 对外发布的,开放给所有用户
API_STANDARDS_TREE=prs
#项目简称
APISUBTYPE=larabbs
#项目前缀或子域名, www.larabbs.com/api
API_PREFIX=api
#api.larabbs.com
API_DOMAIN=api.larabbs.com   
API_DEBUG=true
API_VERSION=v1
#严格模式
APISTRICT=false
</code></pre>
<h4 id="访问不同版本的接口方法">访问不同版本的接口方法</h4>
<p>访问 v1 版本<br>
Accept: application/prs.larabbs.v1+json<br>
访问 v2 版本<br>
Accept: application/prs.larabbs.v2+json</p>
<h3 id="api认证">API认证</h3>
<h3 id="include机制">include机制</h3>
<blockquote>
<p>场景: 获取帖子的作者和栏目信息</p>
</blockquote>
<h4 id="步骤">步骤</h4>
<ol>
<li>在transformer中定义方法</li>
</ol>
<pre><code class="language-php">       //
       protected $availableIncludes=['user','category'];
       //Topic模型中必须有user()方法
       public function includeUser(Topic $topic){
           return $this-&gt;item($topic-&gt;user,new UserTransformer());
       }
</code></pre>
<h4 id="定义">定义</h4>
<pre><code class="language-php">class TopicTransformer extends TransformerAbstract
{
    protected $availableIncludes=['user','category'];

    public function transform(Topic $topic)
    {
		.......
    }

    public function includeUser(Topic $topic){
        return $this-&gt;item($topic-&gt;user,new UserTransformer());
    }

    public function includeCategory(Topic $topic){
        return $this-&gt;item($topic-&gt;category,new CategoryTransformer());
    }
}
</code></pre>
<h4 id="使用">使用:</h4>
<figure data-type="image" tabindex="1"><img src="assets%5C1562034971827.png" alt="1562034971827" loading="lazy"></figure>
<p>调用多个include 将参数写成: xxx.com/api/topics?include=user,category</p>
<p>遇到复杂的嵌套关系可以手动关闭dingo的预加载</p>
<p>app(\Dingo\Api\Transformer\Factory::class)-&gt;disableEagerLoading();</p>
<h4 id="include嵌套">include嵌套</h4>
<p><code>user.roles</code></p>
<figure data-type="image" tabindex="2"><img src="assets%5C1562141101676.png" alt="1562141101676" loading="lazy"></figure>
<h2 id="短信发送">短信发送</h2>
<p>组件 : <code>overtrue/easy-sms</code></p>
<h3 id="easy-sms-组件封装">easy-sms 组件封装</h3>
<h4 id="1创建config文件">1.创建config文件</h4>
<p>config/easysms.php</p>
<pre><code class="language-php">return [
    // HTTP 请求的超时时间（秒）
    'timeout' =&gt; 5.0,
    // 默认发送配置
    'default' =&gt; [
        // 网关调用策略，默认：顺序调用
        'strategy' =&gt; \Overtrue\EasySms\Strategies\OrderStrategy::class,
        // 默认可用的发送网关
        'gateways' =&gt; [
            'yunpian'
        ],
    ],
    // 可用的网关配置
    'gateways' =&gt; [
        'errorlog' =&gt; [
            'file' =&gt; '/tmp/easy-sms.log',
        ],
        'yunpian' =&gt; [
            'api_key' =&gt; '04d7a301137c06e0dde555b0216e7cfe',
        ],
    ],
];
</code></pre>
<h4 id="2添加服务提供者">2.添加服务提供者</h4>
<p>app/providers/EasySmsServiceProvider.php</p>
<pre><code class="language-php">public function boot()
{
    $this-&gt;app-&gt;singleton(EasySms::class,function($app){
        return new EasySms(config('easysms'));
    });
    //设置别名
    $this-&gt;app-&gt;alias(EasySms::class,'easysms');
}
</code></pre>
<blockquote>
<p>在 config/app.php 的provides函数中注册服务提供者</p>
</blockquote>
<h4 id="3发送简单代码">3.发送简单代码</h4>
<pre><code class="language-php">$sms = app('easysms');
try{
$sms-&gt;send(15548551950, [
//这里必须和短信模板严格匹配
'content'  =&gt; '【杨晓光】你的验证码是12343。如非本人操作请忽略',
]);
}catch (\Overtrue\EasySms\Exceptions\NoGatewayAvailableException $e){
$message=$e-&gt;getException('yunpian')-&gt;getMessage();
dd($message);
}
</code></pre>
<h3 id="短信发送涉及知识点">短信发送涉及知识点</h3>
<blockquote>
<p>str_pad()</p>
<p>random_int()</p>
<p>hash_equals() 字符串比较,防止时序攻击</p>
</blockquote>
<h2 id="接口验证码">接口验证码</h2>
<p>插件名称: <code>gregwar/captcha</code></p>
<h3 id="简单实用案例">简单实用案例</h3>
<pre><code class="language-php">//生成验证码
$builder=new CaptchaBuilder();
$captcha=$builder-&gt;build();
//生成图片显示地址
$captch-&gt;inline();
//获取图片验证码的值
$captch-&gt;getPhrase();
</code></pre>
<h2 id="oauth登录">OAUTH登录</h2>
<h3 id="oauth20基础">OAUTH2.0基础</h3>
<h4 id="授权模式">授权模式</h4>
<p>参考文章:<a href="https://learnku.com/articles/20082">oaut图解</a></p>
<ol>
<li>授权码模式</li>
<li>简化模式</li>
<li>密码模式</li>
<li>客户端模式</li>
</ol>
<h3 id="socialite-providers">Socialite Providers</h3>
<p>插件: <a href="https://socialiteproviders.netlify.com/">Socialite Providers     </a></p>
<p>插件扩展: https://socialiteproviders.netlify.com/about.html</p>
<h4 id="登录的两种方式">登录的两种方式</h4>
<ol>
<li><strong>客户端保存accessToken</strong></li>
</ol>
<pre><code class="language-php">$accessToken = 'ACCESS_TOKEN';
$openID = 'OPEN_ID';
$driver = Socialite::driver('weixin');
$driver-&gt;setOpenId($openID);
$oauthUser = $driver-&gt;userFromToken($accessToken);
</code></pre>
<ol start="2">
<li><strong>客户端只获取授权码(code)</strong></li>
</ol>
<blockquote>
<p>这种方式是推荐的安全做法, 客户端不保存app_secrect ,获取到code之后交给服务器换取access_token以及取用用户信息.</p>
</blockquote>
<p>config/services.php</p>
<pre><code class="language-php">'weixin' =&gt; [
    'client_id' =&gt; env('WEIXIN_KEY'),
    'client_secret' =&gt; env('WEIXIN_SECRET'),
    'redirect' =&gt; env('WENXIN_REBACK_URL'),
]
</code></pre>
<pre><code class="language-php">$code = 'CODE';
$driver = Socialite::driver('weixin');
$response = $driver-&gt;getAccessTokenResponse($code);
//微信需要传递openid
$driver-&gt;setOpenId($response['openid']);
$oauthUser = $driver-&gt;userFromToken($response['access_token']);
</code></pre>
<h4 id="oauth注册的两种情况">oauth注册的两种情况</h4>
<ol>
<li>
<p>用户第一次使用微信登录，根据微信的数据，在 项目中创 建一个用户，返回该用户的登录凭证</p>
</li>
<li>
<p>用户已经使用过微信登录，则找到数据库中对应的用户，返回 该用户的登录凭证</p>
</li>
</ol>
<pre><code class="language-php">   路由: $api-&gt;post('socials/{social_type}/authorizations', &quot;AuthorizationsController@weiXinLogin&quot;)-&gt;name('api.socials.authorizations.store');
   public function weiXinLogin($type, AuthorizationsRequest $request)
   {
       if (!in_array($type, ['weixin'])) {
           return $this-&gt;response-&gt;errorBadRequest();
       }
       $driver = \Socialite::driver($type);
       try {
           /*如果传递是code*/
           if ($code = $request-&gt;code) {
               $response = $driver-&gt;getAccessTokenResponse($code);
               $token = array_get($response, 'access_token');
           } else {
               $token = $request-&gt;access_token;
               if ($type == 'weixin') {
                   $driver-&gt;setOpenId($request-&gt;openid);
               }
           }
           $oauthUser = $driver-&gt;userFromToken($token);
       } catch (\Exception $e) {
           return $this-&gt;response-&gt;errorUnauthorized('参数错误');
       }
       /*根据获取的用户信息,去数据库中查找,如果存在则将查询结果返回,否则新建数据并返回*/
       switch ($type) {
           case 'weixin':
               $unionid = $oauthUser-&gt;offsetExists('unionid') ? $oauthUser-&gt;offsetGet('unionid') : null;
               if ($unionid) {
                   /*如果有unionid则用unionid查询,否则用openid查询*/
                   $user = User::where('weixin_unionid', $unionid)-&gt;first();
               } else {
                   $user = User::where('weixin_openid', $oauthUser-&gt;getId())-&gt;first();
               }
               if (!$user) {
                   $user = User::create([
                       'name' =&gt; $oauthUser-&gt;getNickname(),
                       'avatar' =&gt; $oauthUser-&gt;getAvatar(),
                       'wenxin_opeinid' =&gt; $oauthUser-&gt;getId(),
                       'weixin_unionid' =&gt; $unionid,
                   ]);
               }
               break;
       }
       //这里临时先返回id值
       $token = \Auth::guard('api')-&gt;fromUser($user);
       return $this-&gt;authResult($token)-&gt;setStatusCode(200);
   }
</code></pre>
<h4 id="微信的openid和unionid">微信的openid和unionid</h4>
<p>那么如何来分辨用户是否已存在，就需要一个用户的唯一标识。任何 一个第三方平台，返回的用户信息都会有一个唯一标 识， socialite  已经为我们封装好了，直接使用  $oauthUser&gt;getId()  即可获取，对于微信来说，这个唯一标识叫做 openid .</p>
<p>如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程 序），可通过 unionid 来区分用户的唯一性，因为只要是同一个微 信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程 序），用户的 unionid 是唯一的。换句话说，同一用户，对同一个 微信开放平台下的不同应用，unionid 是相同的。</p>
<h3 id="采坑记录">采坑记录</h3>
<h4 id="获取用户信息错误">获取用户信息错误</h4>
<p>错误提示:</p>
<p><code>GuzzleHttp/Exception/RequestException with message 'cURL error 60: SSL certificate problem: unable to get local issuer certificate (see http://curl.haxx.se/libcurl/c/libcurl-errors.html)'</code></p>
<p>问题解决:</p>
<p>估计和本地的ssl证书有关系,远程的暂未测试</p>
<pre><code class="language-php">1. Download the latest cacert.pem from https://curl.haxx.se/ca/cacert.pem
2. Add the following line to php.ini:
curl.cainfo=&quot;/path/to/downloaded/cacert.pem&quot;
</code></pre>
<h2 id="jwt">JWT</h2>
<h3 id="项目入门">项目入门</h3>
<p><code>tymondesigns/jwt-auth</code></p>
<p>项目文档: <a href="https://jwt-auth.readthedocs.io/en/develop/">https://jwt-auth.readthedocs.io/en/develop/</a></p>
<h3 id="部署和配置">部署和配置</h3>
<p>配置项jwt.php</p>
<pre><code class="language-php">//生成的密匙
'secret' =&gt; env('JWT_SECRET'),
//token过期时间
'ttl' =&gt; env('JWT_TTL', 60),
//刷新过期时间,刷新过期时间一般比token时间长,在刷新过期时间,即使token过期,任然可以获取一个新的token,不需要重新登录                                         
 'refresh_ttl' =&gt; env('JWT_REFRESH_TTL', 20160),
</code></pre>
<p>配置config/auth.php</p>
<pre><code class="language-php">guards' =&gt; [ 
    'api' =&gt; [ 
        'driver' =&gt; 'jwt', 
        'provider' =&gt; 'users', 
    ], 
],
</code></pre>
<p>配置config/api.php</p>
<pre><code class="language-php">'auth' =&gt; [ 
    'jwt' =&gt; 'Dingo\Api\Auth\Provider\JWT', 
], 
</code></pre>
<p>配置user模型</p>
<pre><code class="language-php">class User extends Authenticatable implements JWTSubject 
 
    public function getJWTIdentifier() 
    { 
        return $this-&gt;getKey(); 
    } 
 
    public function getJWTCustomClaims() 
    { 
        return [];
    }
</code></pre>
<h3 id="常用方法">常用方法</h3>
<h4 id="token生成">token生成</h4>
<pre><code class="language-php">//基于账号密码生成token
$credentials=request(['email','password']);
auth('api')-&gt;attempt($credentials);
//基于用户模型生成token
$user=User::first();
auth('api')-&gt;fromUser($user);
//基于users模型中的主键id
auth('api')-&gt;tokenById(1);
</code></pre>
<h4 id="token解析">token解析</h4>
<pre><code class="language-php">//把请求发送过来的直接解析到对象
JWTAuth::parseToken();
//获取token中的user信息
auth('api')-&gt;user();
//获取token,如果token被设置则返回,否则返回false
auth('api')-&gt;getToken();
</code></pre>
<h4 id="token控制">token控制</h4>
<pre><code class="language-php">//更新token
$token=auth('api')-&gt;refresh();
//让一个token无效
auth('api')-&gt;invalidate();
//检验token的有效性
auth('api')-&gt;check();

</code></pre>
<h4 id="token其他方法">token其他方法</h4>
<pre><code class="language-php">//设置荷载
$token=auth('api')-&gt;claims(['foo'=&gt;'bar'])-&gt;attempt($credentials);
//重写有效时间
auth('api')-&gt;setTTL(7200)-&gt;attempt($credentials);
//验证账号是否正确
auth('api')-&gt;validate($credentials);
</code></pre>
<h3 id="使用案例">使用案例</h3>
<ol>
<li>composer 安装</li>
</ol>
<pre><code class="language-php">composer require tymon/jwt-auth 1.*@rc
</code></pre>
<blockquote>
<p>通过该命令安装的可能为0.5.*版本,执行composer update命令进行升级版本或者直接指定版本号</p>
</blockquote>
<ol start="2">
<li>生成密匙</li>
</ol>
<p><code>php artisan jwt:secret</code></p>
<ol start="3">
<li>修改config/auth.php</li>
</ol>
<pre><code class="language-php">'guards' =&gt; [
    'api' =&gt; [
        'driver' =&gt; 'jwt',
        'provider' =&gt; 'users',
    ],
]
</code></pre>
<ol start="4">
<li>修改 config/api.php</li>
</ol>
<pre><code class="language-php">'auth' =&gt; [
    'jwt'=&gt;'Dingo\Api\Auth\Provider\JWT',
],
</code></pre>
<ol start="5">
<li>修改user.php模型</li>
</ol>
<p>让user.php 实现use Tymon\JWTAuth\Contracts\JWTSubject;</p>
<pre><code class="language-php">class User extends Authenticatable implements JWTSubject
{
        //这里返回了User的id
    public function getJWTIdentifier()
    {
        return $this-&gt;getKey();
    }

    //这里是我们需要额外在jwt中增加的自定义内容
    public function getJWTCustomClaims()
    {
        return [];
    }
}
</code></pre>
<ol start="6">
<li>注册provide和alias</li>
</ol>
<blockquote>
<p>config/app.php</p>
</blockquote>
<pre><code>   'aliases'=&gt;[
       'JWTAuth'=&gt;'Tymon\JWTAuth\Facades\JWTAuth',
       'JWTFactory'=&gt;'Tymon\JWTAuth\Facades\JWTFactory'
   ]
</code></pre>
<blockquote>
<p>如果你不适用这两个Facade,你可以使用辅助函数auth()</p>
</blockquote>
<p>auth辅助函数与jwt扩展</p>
<ol start="7">
<li>jwt的几种常用操作<br>
路由</li>
</ol>
<pre><code>   //登录
   Route::post('login','AuthController@login');
   //注销token
   Route::delete('logout','AuthController@logout');
   //刷新token
   Route::put('refresh','AuthController@refresh');
   //获取信息
   Route::post('me','AuthController@me');
</code></pre>
<p>控制器</p>
<pre><code class="language-php">   public function store(AuthRequest $request)
   {
       //传入两个参数username,password.这里username 可能有是邮箱或者电话,需要判断一下
       $username = $request-&gt;username;
       filter_var($username, FILTER_VALIDATE_EMAIL) ? $credentials['email'] = $username : $credentials['phone'] = $username;
       $credentials['password'] = $request-&gt;password;
       $token = \Auth::guard('api')-&gt;attempt($credentials);
       if (!$token) {
           return $this-&gt;response-&gt;errorUnauthorized('用户名密码不正确');
       }
       //这里定义一个通用的返回信息函数
       return $this-&gt;authResult($token)-&gt;setStatusCode(200);
   }
   
   /**微信oauth 登录
        * @param $type 路由中的第三方登录类型参数,如weixin
        * @param AuthorizationsRequest $request
        */
   public function weiXinLogin($type, AuthorizationsRequest $request)
   {
       if (!in_array($type, ['weixin'])) {
           return $this-&gt;response-&gt;errorBadRequest();
       }
       $driver = \Socialite::driver($type);
       try {
           /*如果传递是code*/
           if ($code = $request-&gt;code) {
               $response = $driver-&gt;getAccessTokenResponse($code);
               $token = array_get($response, 'access_token');
           } else {
               $token = $request-&gt;access_token;
               if ($type == 'weixin') {
                   $driver-&gt;setOpenId($request-&gt;openid);
               }
           }
           $oauthUser = $driver-&gt;userFromToken($token);
       } catch (\Exception $e) {
           return $this-&gt;response-&gt;errorUnauthorized('参数错误');
       }
       /*根据获取的用户信息,去数据库中查找,如果存在则将查询结果返回,否则新建数据并返回*/
       switch ($type) {
           case 'weixin':
               $unionid = $oauthUser-&gt;offsetExists('unionid') ? $oauthUser-&gt;offsetGet('unionid') : null;
               if ($unionid) {
                   /*如果有unionid则用unionid查询,否则用openid查询*/
                   $user = User::where('weixin_unionid', $unionid)-&gt;first();
               } else {
                   $user = User::where('weixin_openid', $oauthUser-&gt;getId())-&gt;first();
               }
               if (!$user) {
                   $user = User::create([
                       'name' =&gt; $oauthUser-&gt;getNickname(),
                       'avatar' =&gt; $oauthUser-&gt;getAvatar(),
                       'wenxin_opeinid' =&gt; $oauthUser-&gt;getId(),
                       'weixin_unionid' =&gt; $unionid,
                   ]);
               }
               break;
       }
       //这里临时先返回id值
       $token = \Auth::guard('api')-&gt;fromUser($user);
       return $this-&gt;authResult($token)-&gt;setStatusCode(200);
   }
   
   public function refresh()
   {
       $token=\Auth::guard('api')-&gt;refresh();
       return $this-&gt;authResult($token)-&gt;setStatusCode(200);
   }
   
   public function destroy()
   {
       \Auth::guard('api')-&gt;logout();
       //noContent 返回的状态码 204
       return $this-&gt;response-&gt;noContent();
   }
   
   protected function authResult($token)
   {
       return $this-&gt;response-&gt;array([
           'access_token' =&gt; $token,
           'token_type' =&gt; 'Bearer',
           'expires_in' =&gt; \Auth::guard('api')-&gt;factory()-&gt;getTTL() * 60
       ]);
   }
</code></pre>
<blockquote>
<p>refresh() token 刷新 destroy 销毁 都需要携带 Authorization:Bear  {token}</p>
</blockquote>
<h2 id="transformers">Transformers</h2>
<blockquote>
<p>通过转化器, 你可以将对象转化为数组, 并强制转化整型和布尔类型, 包括分页结果和嵌套关联.</p>
</blockquote>
<h3 id="fractal">Fractal</h3>
<p>Dingo API 底层使用 <a href="https://github.com/thephpleague/fractal">Fractal</a> 作为默认的转化层</p>
<p>Fractal 的意义在原始数据和输出数据中间搞一个墙('barrier'), 这样的话即使内部结构改变了也不会影响到用户</p>
<h4 id="资源分类">资源分类:</h4>
<ul>
<li><code>League\Fractal\Resource\Item</code>：单个资源</li>
<li><code>League\Fractal\Resource\Collection</code>：资源集合</li>
</ul>
<h4 id="简单案例">简单案例</h4>
<pre><code class="language-php">Route::get('/fractal/resource/collection', function () {
    $tasks = \App\Task::all();
    $resource = new \League\Fractal\Resource\Collection($tasks, function (\App\Task $task) {
        return [
            'id' =&gt; $task-&gt;id,
            'text' =&gt; $task-&gt;text,
            'is_completed' =&gt; $task-&gt;is_completed ? 'yes' : 'no'
        ];
    });
    //Manager,主要管理要将数据格式化为哪一种格式
    $fractal = new \League\Fractal\Manager();
    return $fractal-&gt;createData($resource)-&gt;toJson();
});
</code></pre>
<h4 id="三种数据结构">三种数据结构</h4>
<p><code>ArraySerializer</code>、<code>DataArraySerializer</code>、<code>JsonApiSerializer</code>三种序列化器</p>
<ol>
<li><code>ArraySerializer</code></li>
</ol>
<pre><code class="language-php">Route::get('/fractal/serializers', function () {
    $task = \App\Task::findOrFail(1);
    $resource = new \League\Fractal\Resource\Item($task, function (\App\Task $task) {
        return [
            'id' =&gt; $task-&gt;id,
            'text' =&gt; $task-&gt;text,
            'is_completed' =&gt; $task-&gt;is_completed ? 'yes' : 'no'
        ];
    });
    $fractal = new \League\Fractal\Manager();
    $fractal-&gt;setSerializer(new \League\Fractal\Serializer\ArraySerializer());
    return $fractal-&gt;createData($resource)-&gt;toJson();
});
</code></pre>
<figure data-type="image" tabindex="3"><img src="assets/1558154981808.png" alt="1558154981808" loading="lazy"></figure>
<ol start="2">
<li>
<p><code>DataArraySerializer</code></p>
<blockquote>
<p>DataArraySerializer 是Fractal默然的数据输出格式,与ArraySerializer相比,多出了一层data包裹</p>
</blockquote>
</li>
</ol>
<pre><code class="language-php">$fractal-&gt;setSerializer(new \League\Fractal\Serializer\DataArraySerializer());
</code></pre>
<figure data-type="image" tabindex="4"><img src="assets/1558155166061.png" alt="1558155166061" loading="lazy"></figure>
<ol start="3">
<li>
<p><code>JsonApiSerializer</code></p>
<pre><code class="language-php">$fractal-&gt;setSerializer(new \League\Fractal\Serializer\JsonApiSerializer());
</code></pre>
<figure data-type="image" tabindex="5"><img src="assets/1558155367779.png" alt="1558155367779" loading="lazy"></figure>
</li>
</ol>
<h4 id="转换器">转换器</h4>
<blockquote>
<p>转化器类必须继承自 <code>League\Fractal\TransformerAbstract</code> 基类，并且至少实现 <code>transform()</code> 方法。我们在代码任务项目中创建一个保存在 <code>app/Transformers</code> 目录下的转化器类 <code>TaskTransformer</code>，并初始化代码如下</p>
</blockquote>
<pre><code class="language-php">&lt;?php
namespace App\Transformers;
use App\Task;
use League\Fractal\TransformerAbstract;

class TaskTransformer extends TransformerAbstract
{
    public function transform(Task $task)
    {
        return [
            'id' =&gt; $task-&gt;id,
            'text' =&gt; $task-&gt;text,
            //需要注意一些敏感信息,如用户手机,微信的union_id等,我们可以使用另外的字段返回
            'phone'=&gt;$task-&gt;phone?true:false,
            'completed' =&gt; $task-&gt;is_completed ? 'yes' : 'no',
            'link' =&gt; route('tasks.show', ['id' =&gt; $task-&gt;id])
        ];
    }
}
</code></pre>
<p>这样一来，我们就可以改写之前的资源转化代码如下：</p>
<pre><code class="language-php">// 获取单个资源
$task = \App\Task::findOrFail(1);
$resource = new \League\Fractal\Resource\Item($task, new \App\Transformers\TaskTransformer());

// 获取资源集合
$tasks = \App\Task::all();
$resources = new \League\Fractal\Resource\Collection($tasks, new \App\Transformers\TaskTransformer());
</code></pre>
<p><strong>关联模型数据</strong></p>
<p>除此之外，我们还可以在模型字段之外，引入额外的数据，比如关联模型：</p>
<pre><code>&lt;?php

namespace App\Transformers;

use App\Task;
use League\Fractal\TransformerAbstract;

class TaskTransformer extends TransformerAbstract
{
    protected $availableIncludes = ['user'];

    public function transform(Task $task)
    {
        return [
            'id' =&gt; $task-&gt;id,
            'text' =&gt; $task-&gt;text,
            'completed' =&gt; $task-&gt;is_completed ? 'yes' : 'no',
            'link' =&gt; route('tasks.show', ['id' =&gt; $task-&gt;id])
        ];
    }

    public function includeUser(Task $task)
    {
        $user = $task-&gt;user;
        return $this-&gt;item($user, new UserTransformer());
    }
}
</code></pre>
<p>由于在上述代码中引入了新的转化器类 <code>UserTransformer</code>，所以需要创建它：</p>
<pre><code>&lt;?php

namespace App\Transformers;

use App\User;
use League\Fractal\TransformerAbstract;

class UserTransformer extends TransformerAbstract
{
    public function transform(User $user)
    {
        return [
            'id' =&gt; $user-&gt;id,
            'name' =&gt; $user-&gt;name
        ];
    }
}
</code></pre>
<p>然后修改返回响应数据代码如下，通过 <code>parseIncludes</code> 方法引入要包含的额外字段：</p>
<pre><code>return $fractal-&gt;parseIncludes('user')-&gt;createData($resource)-&gt;toJson();
</code></pre>
<p>这样一来，就可以在返回的响应数据中看到 <code>user</code> 字段了：</p>
<figure data-type="image" tabindex="6"><img src="assets/546fc78b6e238ab7558082109660f566.jpg" alt="img" loading="lazy"></figure>
<h3 id="数据格式切换组件">数据格式切换组件</h3>
<h4 id="名称-liyu001989dingo-serializer-switch">名称: <a href="https://github.com/liyu001989">liyu001989</a>/<strong>dingo-serializer-switch</strong></h4>
<blockquote>
<p>参考一下该组件,做laravel的扩展组件</p>
</blockquote>
<h4 id="使用-2">使用</h4>
<pre><code class="language-php">//routes/api.php
$api-&gt;version('v1',['middleware'=&gt;'serialize:array'])
</code></pre>
<h2 id="http基础">HTTP基础</h2>
<h3 id="http-提交数据的两种方式">http 提交数据的两种方式</h3>
<p>application/x-www-form-urlencoded(默认值)<br>
multipart/form-data</p>
<p>需要明确的是，只有当 POST 配合  multipart/form-data  时才能正<br>
确传输文件。</p>
<h2 id="帖子数据">帖子数据</h2>
<h3 id="修改话题">修改话题</h3>
<pre><code class="language-php">//修改话题
$api-&gt;patch('topics/{topic}','TopicsController@update')-&gt;name('api.topics.update');
</code></pre>
<blockquote>
<p>这里需要注意的是由于路由交给DingoApi来处理了,所以调至路由模型绑定出了问题.所以模型绑定的中间件没有注册上,需要手动增加bindings中间件</p>
</blockquote>
<pre><code class="language-php">$api-&gt;version('v1', [
    'namespace' =&gt; 'App\Http\Controllers\Api',
    //这里增加bindings
    'middleware' =&gt; ['serializer:array','bindings']
])
</code></pre>
<h4 id="dingoapi手动处理异常">dingoApi手动处理异常</h4>
<pre><code class="language-php">//app/Providers/AppServiceProvider.php
</code></pre>
<pre><code class="language-php">public function register()
{
    \API::error(function (\Illuminate\Auth\Access\AuthorizationException $exception) {
        abort(403, $exception-&gt;getMessage());
    });
    \API::error(function  (\Symfony\Component\HttpKernel\Exception\NotFoundHttpException  $exception)  {
        throw  new  \Symfony\Component\HttpKernel\Exception\HttpException(404,  '404 Not Found');
    });
}
</code></pre>
<h3 id="日志查询组件">日志查询组件</h3>
<p><code>laravel-query-logger</code></p>
<h4 id="安装">安装</h4>
<pre><code class="language-php">composer require overtrue/laravel-query-logger --dev
</code></pre>
<blockquote>
<p>只有当APP_DEBUG为true 时才能使用</p>
</blockquote>
<h2 id="消息接口">消息接口</h2>
<h2 id="本地化">本地化</h2>
<h3 id="思路1">思路1:</h3>
<p>增加自定义code码</p>
<pre><code class="language-php">use Symfony\Component\HttpKernel\Exception\HttpException;

class Controller extends BaseController
{
    //引入dingo的部分方法
    use Helpers;
	//自定义异常处理
    public function errorResponse($statusCode,$message=null,$code=0)
    {
        throw new HttpException($statusCode,$message,null,[],$code);
    }
}
</code></pre>
<h3 id="思路2">思路2:</h3>
<blockquote>
<p>利用HTTP的Accept-language 头信息</p>
<p>Accept-Language zh-CN	简体中文</p>
<p>Accept-Language en 英文</p>
</blockquote>
<h4 id="步骤-2">步骤:</h4>
<ol>
<li><strong>创建编辑中间件changeLocale</strong></li>
</ol>
<pre><code class="language-php">class ChangeLocale
{
    public function handle($request, Closure $next)
    {
        $language=$request-&gt;header('accept-language');
        if($language){
            \App::setLocale($language);
        }
        return $next($request);
    }
}
</code></pre>
<ol start="2">
<li>
<p><strong>注册中间件</strong></p>
<p><code>app/Http/Kernel.php</code></p>
</li>
</ol>
<pre><code class="language-php">'change-locale'=&gt;\App\Http\Middleware\ChangeLocale::class,
</code></pre>
<ol start="3">
<li><strong>路由设置中间件</strong></li>
</ol>
<pre><code class="language-php">$api-&gt;version('v1', [
    'namespace' =&gt; 'App\Http\Controllers\Api',
    'middleware' =&gt; ['serializer:array','bindings','change-locale']
]
</code></pre>
<ol start="4">
<li>使用案例</li>
</ol>
<pre><code class="language-php">if (!$token = \Auth::guard('api')-&gt;attempt($credentials)) {
	return $this-&gt;response-&gt;errorUnauthorized(trans('auth.failed'));
}
</code></pre>
<h2 id="api测试和文档">API测试和文档</h2>
<h3 id="phpunit-测试">phpunit 测试</h3>
<h4 id="windows下安装">windows下安装</h4>
<blockquote>
<p>虽然laravel框架内置了phpunit,但是不能使用,直接在项目中输入phpunit 会显示 command not found</p>
</blockquote>
<ol>
<li>
<p>删除vendor 文件夹,然后重新composer update</p>
</li>
<li>
<p>输入以下命令引入phpunit包</p>
<pre><code class="language-php">$ composer global require phpunit/phpunit
</code></pre>
<p><code>omposer global remove phpunit/phpunit</code> phpunit包的删除命令</p>
</li>
<li>
<p>配置环境变量</p>
<p>phpunit命令的存放目录: D:\wamp64\www\question_bank\vendor\bin</p>
</li>
</ol>
<h4 id="单元测试">单元测试</h4>
<ol>
<li>创建测试文件</li>
</ol>
<pre><code class="language-php">php artisan make:test TopicApiTest
</code></pre>
<p>该命令会在tests/Feature目录中创建TopicApiTest.php文件</p>
<ol start="2">
<li>测试发布话题</li>
</ol>
<pre><code class="language-php">       //setUp方法在测试开始前执行,先创建一个用户
   public function setUp(): void
       {
           parent::setUp(); // TODO: Change the autogenerated stub
           $this-&gt;user = factory(User::class)-&gt;create();
       }
   
       public function testStoreTopic()
       {
           $data = ['category_id' =&gt; 1, 'body' =&gt; 'test body', 'title' =&gt; 'test title'];
           $token=\Auth::guard('api')-&gt;fromUser($this-&gt;user);
           //$this-&gt;json可以方便的模拟各种http请求,第一个参数:请求的方法,第二个参数:请求地址,第三个参数:请求参数,第四个参数:请求header,利用withHeaders方法也可以
           $response=$this-&gt;withHeaders(['Authorization'=&gt;'Bearer'.$token])-&gt;json('POST','/api/topics',$data);
   
           $assertData = [
               'category_id' =&gt; 1,
               'user_id' =&gt; $this-&gt;user-&gt;id,
               'title' =&gt; 'test title',
               'body' =&gt; clean('test body', 'user_topic_body')
           ];
           //通过assertStatus,断言响应结果为201，通过assertJsonFragment,断言响应结果包含assertData数据。
           $response-&gt;assertStatus(201)-&gt;assertJsonFragment($assertData);
       }
</code></pre>
<ol start="3">
<li>
<p>执行测试</p>
<pre><code class="language-php">$ phpunit
</code></pre>
</li>
</ol>
<h3 id="第三方黑盒测试-postman">第三方黑盒测试 [postman]</h3>
<ol>
<li>
<p>导出导入collections和环境变量</p>
</li>
<li>
<p>编写测试用例</p>
</li>
</ol>
<figure data-type="image" tabindex="7"><img src="E:%5CNutCloud%5C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Claravel%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%5Cassets%5C1562227821519.png" alt="1562227821519" loading="lazy"></figure>
<ol start="3">
<li>批量测试</li>
</ol>
<h3 id="api-文档">api 文档</h3>
<p><a href="https://apizza.net/">https://apizza.net</a></p>
<h2 id="passport使用">passport使用</h2>
<h3 id="安装和设置">安装和设置</h3>
<p>1.composer 安装</p>
<pre><code class="language-php">composer require laravel/passport
</code></pre>
<p>2.生成数据表<br>
<code>migrate</code></p>
<ol start="3">
<li>创建加密秘匙</li>
</ol>
<pre><code class="language-php">php artisan passport:keys
</code></pre>
<ol start="4">
<li>创建客户端</li>
</ol>
<pre><code class="language-php">php artisan passport:client --password --name='larabbs-ios'
</code></pre>
<h3 id="passport调试">passport调试</h3>
<h4 id="1注册路由">1.注册路由</h4>
<p>app/Providers/AuthServiceProvider.php</p>
<pre><code class="language-php">    public function boot()
    {
        //Passport的路由
        Passport::routes();
        //access_token过期时间
        Passport::tokensExpireIn(Carbon::now()-&gt;addDays(15));
        //refreshTokens 刷星过期时间
        Passport::refreshTokensExpireIn(Carbon::now()-&gt;addDays(30));
</code></pre>
<h4 id="2-获取访问令牌">2. 获取访问令牌</h4>
<p><img src="assets/20190705164343875_11189.png" alt="" loading="lazy"><br>
<strong>参数列表</strong><br>
grant_type —— 密码模式固定为    password  ；<br>
client_id —— 通过    passport:client   创建的客户端  id  ；<br>
client_secret —— 通过    passport:client   创建的客户端  secret  ；<br>
username —— 登录的用户名，数据库中任意用户邮箱；<br>
password —— 用户密码；<br>
scope —— 作用域，可填写    *   或者为空；<br>
<strong>获取的信息</strong><br>
token_type —— 令牌类型；<br>
expires_in—— 多长时间后过期；<br>
access_token —— 访问令牌；<br>
refresh_token —— 刷新令牌；<br>
<img src="assets/20190705164603055_29633.png" alt="" width="593" loading="lazy"></p>
<h4 id="获取登录用户信息">获取登录用户信息</h4>
<p>1.修改user模型 添加  Laravel\Passport\HasApiTokens   Trait<br>
2.修改auth配置,将api guard的driver由jwt 修改为passport<br>
3.增加一个PassportDingoProvider,因为DingoApi没有做passport的适配.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[larachina02 学习笔记]]></title>
        <id>https://bluegrasses.github.io/post/larachina02-xue-xi-bi-ji/</id>
        <link href="https://bluegrasses.github.io/post/larachina02-xue-xi-bi-ji/">
        </link>
        <updated>2020-11-01T23:08:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="汇总知识">汇总知识</h2>
<h3 id="模型关联括号">模型关联括号</h3>
<p>模型关联什么时候加括号，什么时候不加括号 ?</p>
<blockquote>
<p>加括号是关系, 不加是对象或者对象集合</p>
</blockquote>
<h2 id="第二章-舞台布置">第二章: 舞台布置</h2>
<h3 id="字体图标">字体图标</h3>
<p><a href="https://www.npmjs.com/package/@fortawesome/fontawesome-free">@fortawesome/fontawesome-free</a></p>
<h4 id="载入样式">载入样式</h4>
<p>resources/sass/app.scss</p>
<pre><code class="language-php">// Fontawesome
@import '~@fortawesome/fontawesome-free/scss/fontawesome';
@import '~@fortawesome/fontawesome-free/scss/regular';
@import '~@fortawesome/fontawesome-free/scss/solid';
@import '~@fortawesome/fontawesome-free/scss/brands';
</code></pre>
<h2 id="第三章-用户中心">第三章: 用户中心</h2>
<h3 id="guest使用">@guest使用</h3>
<pre><code class="language-html">@guest
&lt;li&gt;登录&lt;/li&gt;
&lt;li&gt;注册&lt;/li&gt;
@else
个人中心
编辑资料
@endguest
</code></pre>
<h3 id="验证码">验证码</h3>
<p><code>mewebstudio/captcha</code></p>
<blockquote>
<p>In Windows, you'll need to include the GD2 DLL <code>php_gd2.dll</code> in php.ini. And you also need include <code>php_fileinfo.dll</code>and <code>php_mbstring.dll</code> to fit the requirements of <code>mews/captcha</code>'s dependencies.</p>
</blockquote>
<p>基本使用</p>
<pre><code class="language-html">&lt;img src=&quot;{{captcha_src('flat')}}&quot;&gt;
</code></pre>
<h3 id="邮箱验证">邮箱验证</h3>
<ol>
<li>修改user模型</li>
</ol>
<pre><code class="language-php">use Illuminate\Auth\MustVerifyEmail as MustVerifyEmailTrait;
use Illuminate\Contracts\Auth\MustVerifyEmail as MustVerifyEmailContract;
class User extends Authenticatable implements MustVerifyEmailContract
{
	use Notifiable, MustVerifyEmailTrait;
</code></pre>
<ol start="2">
<li>
<p>强制用户认证</p>
<p>(1) 建立中间件</p>
</li>
</ol>
<pre><code class="language-php">// app\Http\Middleware\EnsureEmailIsVerified.php
class EnsureEmailIsVerified
{
    public function handle($request, Closure $next)
    {
        // 三个判断：
        // 1. 如果用户已经登录
        // 2. 并且还未认证 Email
        // 3. 并且访问的不是 email 验证相关 URL 或者退出的 URL。

        if($request-&gt;user()&amp;&amp;!$request-&gt;user()-&gt;hasVerifiedEmail()&amp;&amp;!$request-&gt;is('email/*','logout')){
            //判断是不是json响应
            return  $request-&gt;expectsJson()?abort(403,'Your email address is not verified.'):redirect()-&gt;route('verification.notice');
        }
        return $next($request);
    }
}
</code></pre>
<p>(2) 注册中间件</p>
<pre><code class="language-php">// app/Http/Kernel.php
    protected $middlewareGroups = [
    'web' =&gt; [
        \App\Http\Middleware\EncryptCookies::class,
        \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
        \Illuminate\Session\Middleware\StartSession::class,
        //注意需要在startSession中间件之后
        \App\Http\Middleware\EnsureEmailIsVerified::class, 
</code></pre>
<h3 id="事件和监听器基本流程">事件和监听器基本流程</h3>
<blockquote>
<p>应用场景:邮箱认证后的消息提示</p>
</blockquote>
<h4 id="存放目录">存放目录</h4>
<p>事件类存放在app/Events</p>
<p>事件类的监听器存放在app/Listeners中.</p>
<h4 id="注册事件和监听器">注册事件和监听器</h4>
<p><code>EventServiceProvider</code></p>
<pre><code class="language-php">protect $listen=[
  'App\Events\OrderShipped' =&gt; [
          'App\Listeners\SendShipmentNotification',
      ],
]
</code></pre>
<h4 id="生成事件监听器">生成事件&amp;监听器</h4>
<pre><code class="language-php">php artisan event:generate
</code></pre>
<h4 id="定义事件和监听器">定义事件和监听器</h4>
<p><code>定义事件</code></p>
<pre><code class="language-php">namespace App\Events;
use App\Order;
use Illuminate\Queue\SerializesModels;
class OrderShipped
{
    use SerializesModels;
    public $order;
    public function __construct(Order $order)
    {
        $this-&gt;order = $order;
    }
}
</code></pre>
<p><code>定义监听器</code></p>
<pre><code class="language-php">namespace App\Listeners;
use App\Events\OrderShipped;
class SendShipmentNotification
{
    public function __construct()
    {
    }
    /**
     * 处理事件。
     * @param  \App\Events\OrderShipped  $event
     * @return void
     */
    public function handle(OrderShipped $event)
    {
        // 使用 $event-&gt;order 来访问 order …
    }
}
</code></pre>
<h4 id="分发事件">分发事件</h4>
<pre><code class="language-php">class OrderController extends Controller
{
    /**
     * 将传递过来的订单发货。
     * @param  int  $orderId
     * @return Response
     */
    public function ship($orderId)
    {
        $order = Order::findOrFail($orderId);
        // 订单发货逻辑…
        event(new OrderShipped($order));
    }
}
</code></pre>
<h3 id="密码重置提示">密码重置提示</h3>
<p>涉及知识点 , trait方法重写</p>
<h2 id="第四章-用户中心">第四章: 用户中心</h2>
<h3 id="unique-验证规则">unique 验证规则</h3>
<blockquote>
<p>场景: 用户在编辑自身资料时, 如未修改唯一字段email, 提交时会报错email已存在. 需要在unique判断时排除自身</p>
</blockquote>
<pre><code class="language-php">//unique 第一个参数表名 第二参数字段名 第三个参数排除的数据
'email'=&gt;'requried|unique:users,eamil,'.\Auth::id()
</code></pre>
<h3 id="中文显示友好时间戳">中文显示友好时间戳</h3>
<p>基本操作</p>
<pre><code class="language-php">$user-&gt;created_at-&gt;diffForHumans()
</code></pre>
<blockquote>
<p>Carbon 是 php知名的时间和日期扩展,laravel 将其默认集成到框架中.diffForHumans()就是carbon对象提供的方法,默认情况下是英文的.</p>
</blockquote>
<p>修改为中文</p>
<pre><code class="language-php">app/Providers/AppServiceProvider.php
public function boot(){	
    \Carbon\Carbon::setLocale('zh');
}
</code></pre>
<h3 id="头像上传">头像上传</h3>
<h4 id="图片验证规则">图片验证规则</h4>
<pre><code class="language-php">'avatar'=&gt;'mimes:jpeg,bmp,png,gif|dimensions:min_width=208,min_heigth=208'
</code></pre>
<h4 id="裁剪图片">裁剪图片</h4>
<p>用户有时候会上传分辨率较大的图片,图片太大会拖慢页面的加载速度,所以接下来我们将对此进行优化.</p>
<p>插件名称: Intervention/image</p>
<p>https://github.com/Intervention/image</p>
<h3 id="个人资料编辑存在的问题">个人资料编辑存在的问题</h3>
<h4 id="1-游客限制">1. 游客限制</h4>
<p>解决方法: 中间件</p>
<pre><code class="language-php">public function __construct(){
    $this-&gt;middleware('auth');
}
</code></pre>
<h4 id="2修改别人的资料平行权限">2.修改别人的资料(平行权限)</h4>
<p>解决方法: 策略</p>
<p>(1) 生成策略,编写规则</p>
<p>(2) 注册策略</p>
<p>(3) 使用策略授权动作</p>
<h2 id="第五章-帖子列表">第五章 帖子列表</h2>
<p>建立模型同时建立数据迁移文件 -m 参数</p>
<pre><code class="language-php">php artisan make:model Models/Category -m
</code></pre>
<h3 id="初始化数据">初始化数据</h3>
<blockquote>
<p>用数据迁移来解决初始化数据,而不是使用模型工厂factory</p>
<p>用数据迁移来初始化数据</p>
<p>用模型工厂来生成测试数据</p>
</blockquote>
<p>解决方法: 数据迁移</p>
<p>我们定义的命名规范为seed_ (数据库名称) _data</p>
<pre><code class="language-php">php artisan make:migration seed_categories_data
</code></pre>
<p>数据迁移文件</p>
<pre><code class="language-php">public function up()
{
    $categories = [
        [
            'name' =&gt; '分享',
            'description' =&gt; '分享创造,分享发现',
        ],
        [
            'name' =&gt; '教程',
            'description' =&gt; '开发技巧,推荐扩展包等',
        ]
    ];
    //
    DB::table('categories')-&gt;insert($categories);
}

public function down()
{
    //
    DB::table('categories')-&gt;truncate();
}
</code></pre>
<h3 id="代码生成器">代码生成器</h3>
<p>laravel 项目开发规范</p>
<p>https://learnku.com/docs/laravel-specification/5.5</p>
<p>插件名称: <code>summerblue/generator</code></p>
<h4 id="使用案例">使用案例</h4>
<pre><code class="language-php">//schema 后面的参数是数据库的字段描述
php artisan make:scaffold Topic --schema=&quot;name:string:index,description:text:nullable,subscriber_count:integer:unsigned:default(0)&quot;
</code></pre>
<h4 id="生成的代码">生成的代码</h4>
<ol>
<li>生成数据库迁移文件</li>
<li>创建数据工厂文件 TopicFactory.php</li>
<li>创建数据填充文件 TopicTableSeeder.php</li>
<li>创建模型基类文件和数据模型 Model.php Topic.php</li>
<li>创建控制 TopicsController.php</li>
<li>创建表单请求的基类文件 Request.php 并创建TopicRequest.php验证类</li>
<li>创建模型时间监控器,并在AppServiceProvider中注册 TopicObserver</li>
<li>创建授权策略基类 Policy.php 同时创建话题授权类TopicPolicy.php，并在AuthServiceProvider 中注册</li>
<li>在web.php中更新路由, 新增Topics资源路由</li>
<li>新建符合资源控制器的三个话题视图文件,并存放于resources/views/topics 目录;</li>
<li>执行数据库迁移命令 artisan migrate</li>
<li>执行composer dump-autoload 来生成classmap</li>
</ol>
<h3 id="git-使用案例">git 使用案例</h3>
<pre><code class="language-php">//撤销所有文件修改操作
git checkout .
//删除文件,删除add还是commit,不确定?
//-f 强制清理文件的设置 -d 连文件夹也删除
git clean -f -d
</code></pre>
<h3 id="数据填充">数据填充</h3>
<blockquote>
<p>Faker 假数据生成库</p>
<p>fzaninotto/faker</p>
</blockquote>
<p>生成laravel 的时间戳</p>
<p>'create_at'=&gt;<span class='katex-error' title='ParseError: KaTeX parse error: Double superscript at position 15: faker-&gt;data.&#039; &#039;̲.'>faker-&gt;data.&#039; &#039;.</span>faker-&gt;time;</p>
<h4 id="数据填充的基本流程">数据填充的基本流程</h4>
<ol>
<li>
<p>数据模型 Topic.php</p>
</li>
<li>
<p>数据工厂 database/factories/UserFactory.php</p>
</li>
<li>
<p>数据填充 database/seeds/UsersTableSeeder.php</p>
</li>
<li>
<p>注册数据填充 database/seeds/DatabaseSeeder.php</p>
</li>
</ol>
<p>使用案例:</p>
<ol>
<li>建立模型工厂</li>
</ol>
<pre><code class="language-php">// 1. UserFactory.php
$factory-&gt;define(App\Models\User::class, function (Faker $faker) {
    $data_time=$faker-&gt;date.' '.$faker-&gt;time;
    return [
        'name' =&gt; $faker-&gt;name,
        'email' =&gt; $faker-&gt;unique()-&gt;safeEmail,
        'email_verified_at' =&gt; now(),
        'password' =&gt; bcrypt('welcome'), // secret
        'remember_token' =&gt; str_random(10),
        'userinfo'=&gt;$faker-&gt;sentence(),
        'created_at'=&gt;$data_time,
        'updated_at'=&gt;$data_time,
    ];
}); 
</code></pre>
<ol start="2">
<li>建立seeder</li>
</ol>
<pre><code class="language-php">// 2. UsersTableSeeder.php
    public function run()
    {
        //获取faker实例
        $faker=app(Faker\Generator::class);
        $avatars=[
'https://iocaffcdn.phphub.org/uploads/images/201710/14/1/xAuDMxteQy.png',
'https://iocaffcdn.phphub.org/uploads/images/201710/14/1/ZqM7iaP4CR.png',
'https://iocaffcdn.phphub.org/uploads/images/201710/14/1/NDnzMutoxX.png',
        ];
        //生成数据集合 times为生成数量 make生成
        $users=factory(\App\Models\User::class)-&gt;times(10)-&gt;make()-&gt;each(function($user,$index) use($faker,$avatars){
            //从头像中随机取出一个并赋值
            $user-&gt;avatar=$faker-&gt;randomElement($avatars);
        });
        //让隐藏字段可见, 并将数据集合转换为数值
        $user_array=$users-&gt;makeVisible(['password','remember_token'])-&gt;toArray();
        //插入到数据库中
        \App\Models\User::insert($user_array);

        //单独更新第一个用户的数据
        $user=\App\Models\User::find(1);
        $user-&gt;name='admin';
        $user-&gt;email='admin@126.com';
        $user-&gt;avatar='https://iocaffcdn.phphub.org/uploads/images/201710/14/1/ZqM7iaP4CR.png';
        $user-&gt;save();
    }
</code></pre>
<ol start="3">
<li>在DatabaseSeeder中注册seeder</li>
</ol>
<pre><code class="language-php">// DatabaseSeeder.php
use Illuminate\Database\Seeder;
class DatabaseSeeder extends Seeder
{
    public function run()
    {
        $this-&gt;call(UsersTableSeeder::class);
    }
}
</code></pre>
<ol start="4">
<li>
<p>执行填充</p>
<pre><code class="language-php">php artisan migrate:refresh --seed
</code></pre>
</li>
</ol>
<h3 id="懒加载">懒加载</h3>
<p>解决n+1 的问题</p>
<pre><code class="language-php">// n+1 产生的场景
&lt;ul class=&quot;media-list&quot;&gt;
@foreach($topics as $topic)
{{$topic-&gt;user-&gt;name}}
{{$topic-&gt;category-&gt;name}}
@endforeach
&lt;/ul&gt;

 解决:
//with 懒加载 in语句
$topics=Topic::with('user','category')-&gt;paginate();
执行sql 语句:
select * form `user` where `user`.`id` in (1,2,4,5,6);

</code></pre>
<h3 id="标题模板三元表达式">标题模板三元表达式</h3>
<pre><code class="language-php">@section('title', isset($category)?$category-&gt;name:'话题列表')
</code></pre>
<h3 id="导航栏-active-类设置">导航栏 active 类设置</h3>
<h4 id="插件名称">插件名称</h4>
<p><code>letrunghieu/active</code></p>
<pre><code class="language-php">composer require &quot;hieu-le/active:~3.5&quot;
</code></pre>
<h4 id="基础语法">基础语法</h4>
<ol>
<li>if_route() - 判断当前对应的路由是否是指定的路由；</li>
<li>if_route_param() - 判断当前的 url 有无指定的路由参数。</li>
<li>if_query() - 判断指定的 GET 变量是否符合设置的值；</li>
<li>if_uri() - 判断当前的 url 是否满足指定的 url；</li>
<li>if_route_pattern() - 判断当前的路由是否包含指定的字符；</li>
<li>if_uri_pattern() - 判断当前的 url 是否含有指定的字符；</li>
</ol>
<h4 id="使用案例-2">使用案例</h4>
<p>案例1 :</p>
<pre><code class="language-php+html">/**设置 激活类
 * @param $routerName 路由名称
 * @param $param 地址栏参数
 * @param $param_id 参数值(id)
 * @return string 成功返回类名active,否则为''.
 */
function set_active_class($routerName,$param,$param_id)
{
    return active_class((if_route($routerName)&amp;&amp;if_route_param($param,$param_id)));
}

使用:
&lt;li class=&quot;nav-item {{active_class(if_route('topics.index'))}}&quot;&gt;
    &lt;a class=&quot;nav-link&quot; href=&quot;{{route('topics.index')}}&quot;&gt;话题 &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&quot;nav-item {{set_active_class('categories.show','category',1)}}&quot;&gt;
    &lt;a class=&quot;nav-link&quot; href=&quot;{{route('categories.show',1)}}&quot;&gt;分享&lt;/a&gt;
&lt;/li&gt;
</code></pre>
<p>案例2 :</p>
<pre><code class="language-html">//if_query 判断参数order是否值为recent
&lt;li class=&quot;nav-item&quot;&gt;&lt;a class=&quot;nav-link {{active_class(!if_query('order','recent'))}}&quot; href=&quot;{{Request::url()}}?order=default&quot;&gt;最后回复&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;nav-item&quot;&gt;&lt;a class=&quot;nav-link {{active_class(if_query('order','recent'))}}&quot; href=&quot;{{Request::url()}}?order=recent&quot;&gt;最新发布&lt;/a&gt;&lt;/li&gt;


</code></pre>
<h3 id="模板include变量分配">模板include变量分配</h3>
<blockquote>
<p>场景: 用户中心的文章列表</p>
</blockquote>
<pre><code class="language-html">@include('user._topics',['topics'=&gt;$user-&gt;topics()-&gt;recent()-&gt;paginate(5)])
</code></pre>
<h2 id="第六章-帖子curd">第六章 帖子CURD</h2>
<h3 id="模型观察器处理摘要">模型观察器处理摘要</h3>
<h4 id="eloquent-事件">Eloquent 事件</h4>
<table>
<thead>
<tr>
<th>事件</th>
<th>触发时机</th>
</tr>
</thead>
<tbody>
<tr>
<td>creating</td>
<td>当一个新模型被初次保存将会触发</td>
</tr>
<tr>
<td>created</td>
<td>当一个新模型被初次保存将会触发</td>
</tr>
<tr>
<td>updated</td>
<td>如果一个模型已经存在于数据库且调用了save方法</td>
</tr>
<tr>
<td>updating</td>
<td>如果一个模型已经存在于数据库且调用了save方法</td>
</tr>
<tr>
<td>saving</td>
<td>保存到数据库后触发（插入/更新之后，无论插入还是更新都会触发）</td>
</tr>
<tr>
<td>saved</td>
<td>保存到数据库后触发（插入/更新之后，无论插入还是更新都会触发）</td>
</tr>
</tbody>
</table>
<h4 id="应用场景">应用场景</h4>
<blockquote>
<p>摘要根据文章内容自动生成</p>
</blockquote>
<pre><code class="language-php">//观察器
class TopicObserver
{

    public function saving(Topic $topic)
    {
        $topic-&gt;excerpt=make_excerpt($topic-&gt;body);
    }
}

//helpers.php 函数
/**
 * 生成摘要函数
 * @param $value  生成摘要的值
 * @param int $length  生成摘要的长度
 * @return string
 */
function make_excerpt($value,$length=200)
{
    $excerpt=trim(preg_replace('/\r\n|\r|\n+/','',strip_tags($value)));
    return str_limit($excerpt,$length);
}

/*注册观察器
app/Providers/EventServiceProvider.php
*/
public function boot()
{
    parent::boot();
    Topic::observe(TopicObserver::class);
}
</code></pre>
<h3 id="simditor-编辑器">Simditor 编辑器</h3>
<h4 id="安装">安装</h4>
<p>下载simditor压缩包</p>
<p>将下载的 simditor.css 放置于 resources/editor/css 文件夹，将 hotkeys.js , odule.js ,simditor.js , uploader.js 四个文件放置于 resources/editor/js 文件夹中</p>
<pre><code class="language-php">//复制目录到public目录
mix.js('resources/js/app.js', 'public/js')
.sass('resources/sass/app.scss', 'public/css')
.copyDirectory('resources/editor/js', 'public/js')
.copyDirectory('resources/editor/css', 'public/css')
</code></pre>
<h4 id="加载">加载</h4>
<pre><code class="language-javascript">@section('styles')
 &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;{{ asset('css/simditor.css') }}&quot;&gt;
@endsection

@section('scripts')
 &lt;script type=&quot;text/javascript&quot; src=&quot;{{ asset('js/module.js') }}&quot;&gt;&lt;/script&gt;
 &lt;script type=&quot;text/javascript&quot; src=&quot;{{ asset('js/hotkeys.js') }}&quot;&gt;&lt;/script&gt;
 &lt;script type=&quot;text/javascript&quot; src=&quot;{{ asset('js/uploader.js') }}&quot;&gt;&lt;/script&gt;
 &lt;script type=&quot;text/javascript&quot; src=&quot;{{ asset('js/simditor.js') }}&quot;&gt;&lt;/script&gt;
 &lt;script&gt;
 $(document).ready(function() {
 var editor = new Simditor({
     //#editor为textarea 的id值
 textarea: $('#editor'),
 });
 });
 &lt;/script&gt;
@endsection
</code></pre>
<h4 id="图片上传">图片上传</h4>
<pre><code class="language-JavaScript">//前台配置    
&lt;script&gt;
        $(document).ready(function () {
            var editor = new Simditor({
                textarea: $('#editor'),
                upload: {
                    url: '{{route('topics.upload_image')}}',
                    params: {_token: '{{csrf_token()}}'},
                    //服务器获取图片的键值
                    fileKey: 'upload_file',
                    //最多只能同时上传3张图片
                    connectionCount: 3,
                    leaveConfirm: '文件上传中,关闭此页面将取消上传'
                },
				//是否允许粘贴
                pasteImage:true,
            });
        });
    &lt;/script&gt;
</code></pre>
<h3 id="xss-安全漏洞">xss 安全漏洞</h3>
<p>HTMLPurifier</p>
<p>HTMLPurifier for Laravel(<a href="https://github.com/mewebstudio">mewebstudio</a>/Purifier)</p>
<p>插件名称 : mewebstudio/Purifier</p>
<p>插件地址 : https://github.com/mewebstudio/Purifier</p>
<h4 id="安装-2">安装</h4>
<pre><code class="language-php">composer require mews/purifier
</code></pre>
<p>发布配置文件</p>
<pre><code class="language-php">php artisan vendor:publish --provider=&quot;Mews\Purifier\PurifierServiceProvider&quot;
</code></pre>
<h4 id="配置">配置</h4>
<pre><code class="language-php">'user_topic_body' =&gt; [
    'HTML.Doctype' =&gt; 'XHTML 1.0 Transitional',
    'HTML.Allowed' =&gt; 'div,b,strong,i,em,u,a[href|title],ul,ol,li,p[style],br,span[style],img[width|height|alt|src]',
    'CSS.AllowedProperties' =&gt; 'font,font-size,font-weight,font-style,font-family,text-decoration,padding-left,color,background-color,text-align',
    'AutoFormat.AutoParagraph' =&gt; true,
    'AutoFormat.RemoveEmpty' =&gt; true,
],
</code></pre>
<h4 id="使用">使用</h4>
<pre><code class="language-php">//user_topic_body 是上面配置项设置的键名
$topic-&gt;body=clean($topic-&gt;body,'user_topic_body');
</code></pre>
<h4 id="xss-注入测试">xss 注入测试</h4>
<blockquote>
<p>富文本器可以对部分安全进行转义,但是提交内容并不一定通过浏览器进行, 下面是通过谷歌浏览器控制台进行的一个简单的注入案例</p>
</blockquote>
<p>在谷歌浏览器控制台 console中键入下面代码:</p>
<p>//注意网址 token需要替换成自己的</p>
<p><strong>token 如何查看:</strong></p>
<p>查看网页源代码:</p>
<figure data-type="image" tabindex="1"><img src="assets/1553565430564.png" alt="1553565430564" loading="lazy"></figure>
<pre><code class="language-php">fetch(&quot;http://larachina02.com/topics&quot;, {&quot;headers&quot;:{&quot;content-type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;upgrade-insecure-requests&quot;:&quot;1&quot;},&quot;body&quot;:&quot;_token=RiqfIdepmYfymLBuvh5dEJxQI1vO3vrgGYdCb2gv&amp;title=dangerous%20content+&amp;category_id=2&amp;body=%3Cscript%3Ealert%28%27%E5%AD%98%E5%9C%A8%20XSS%20%E5%AE%89%E5%85%A8%E5%A8%81%E8%83%81%EF%BC%81%27%29%3C%2Fscript%3E&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;mode&quot;:&quot;cors&quot;});
</code></pre>
<p>上面代码会自动插入一片注入文章,点开该文章会有弹窗</p>
<h3 id="seo-友好的url">seo 友好的url</h3>
<blockquote>
<p>释义的 URL 有助于搜索引擎优化（SEO），本章节我们将开发自动生成 SEO 友好 URL 的功能。当用户提交发布话题的<br>
表单时，程序将调用 接口将话题标题翻译为英文，并储存于字段 slug 中。显示时候将 Slug 在 URL 中体现<br>
出来，假如话题标题为『Slug 翻译测试』的 URL 是：</p>
<p>http://larabbs.com/topics/119</p>
<p>加入 Slug 后 SEO 友好的链接为</p>
<p>http://larabbs.com/topics/119/slug-translation-test</p>
</blockquote>
<h4 id="安装的插件">安装的插件</h4>
<p><code>guzzlehttp/Guzzle</code></p>
<p>Guzzle库是一套强大的 PHP HTTP 请求套件，我们使用 Guzzle 的 HTTP 客户端来请求 接口。</p>
<p><code>overtrue\PinYin</code></p>
<p>PinYin是安正超开发的，基于cc-cedict 词典的中文转拼音工具，是一套优质的汉字转拼音解决方案。我们使用<br>
PinYin 来作为翻译的后备计划，当百度翻译 API 不可用时，程序会自动使用 PinYin 汉字转拼音方案来生成 Slug。</p>
<h4 id="注册百度翻译开放平台">注册百度翻译开放平台</h4>
<p>http://api.fanyi.baidu.com/api/trans/product/index</p>
<h4 id="翻译调用">翻译调用</h4>
<pre><code class="language-php">class TopicObserver
{

    public function saving(Topic $topic)
    {
        //入库时自动过滤
        $topic-&gt;body=clean($topic-&gt;body,'user_topic_body');
        //自动生成摘录
        $topic-&gt;excerpt=make_excerpt($topic-&gt;body);
        //seo 如slug字段无内容,即使使用翻译器对title进行翻译
        if(!$topic-&gt;slug){
            $topic-&gt;slug=app(SlugTranslateHandler::class)-&gt;translate($topic-&gt;title);
        }
    }
}
</code></pre>
<h3 id="laravel队列">laravel队列</h3>
<h4 id="队列步骤">队列步骤</h4>
<ol>
<li>配置队列安装驱动包</li>
<li>生成失败任务表</li>
<li>生成任务类</li>
<li>编辑任务类业务</li>
<li>任务分发</li>
<li>启动队列监控</li>
</ol>
<p><code>详细步骤</code></p>
<p>1.配置队列</p>
<blockquote>
<p>在使用之前必须安装redis软件</p>
</blockquote>
<p>安装redis队列驱动包</p>
<pre><code class="language-php">composer require &quot;predis/predis&quot;
</code></pre>
<p>.env</p>
<pre><code class="language-php">QUEUE_CONNECTION=redis
</code></pre>
<pre><code class="language-php">//redis配置
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379
</code></pre>
<p>2.生成对列表</p>
<p>失败任务</p>
<p>有时候队列中的任务会失败。Laravel 内置了一个方便的方式来指定任务重试的最大次数。当任务超出这个重试次数后，它就会被插入到 failed_jobs 数据表里面。</p>
<pre><code class="language-php">//生成failed_jobs表
php artisan queue:failed-table
</code></pre>
<p>3.生成任务类</p>
<pre><code class="language-php">php artisan make:job TranslateSlug
</code></pre>
<p>4.修改任务类</p>
<blockquote>
<p>该类实现了 Illuminate\Contracts\Queue\ShouldQueue 接口，该接口表明 Laravel 应该将该任务添加到后台的任务队<br>
列中，而不是同步执行。</p>
<p>引入了 SerializesModels trait，Eloquent 模型会被优雅的序列化和反序列化。</p>
<p>handle 方法会在队列任务执行时被调用。</p>
<p>任务中要避免使用 Eloquent 模型接口调用，如： create() ,<br>
update() , save() 等操作。否则会陷入调用死循环--模型监控器分发任务，任务触发模型监控器，模型监控器再次分发任务，任务再次触发模型监控器.... 死循环。在这种情况下，使用 DB 类直接对数据库进行操作即可。</p>
</blockquote>
<p>5.任务分发</p>
<pre><code class="language-php">dispatch(new xxxjob($topic));
</code></pre>
<p>6.启动队列系统</p>
<p>php artisan queue:listen</p>
<h4 id="队列监控-horizon">队列监控 Horizon</h4>
<pre><code class="language-php">composer require laravel/horizon
</code></pre>
<blockquote>
<p>需要ext-pcntl 支持</p>
</blockquote>
<p><code>php artisan vendor:publish --provider=&quot;Laravel\Horizon\HorizonServiceProvide&quot;</code></p>
<h4 id="线上部署须知">线上部署须知</h4>
<ol>
<li>使用 Supervisor 进程工具进行管理，配置和使用请参照文档进行配置；</li>
<li>每一次部署代码时，需 artisan horizon:terminate 然后再 artisan horizon 重新加载代码。</li>
</ol>
<h2 id="第七章-帖子回复">第七章 帖子回复</h2>
<h3 id="tabs页面处理">tabs页面处理</h3>
<blockquote>
<p>基于 letrunghieu/active 插件</p>
</blockquote>
<h4 id="1active-类控制">1.active 类控制</h4>
<pre><code class="language-html">//href 传递一个tab参数,用于标志某个tabs
&lt;li class=&quot;nav-item&quot;&gt;
    &lt;a class=&quot;nav-link  bg-transparent {{active_class(if_query('tab',null))}}&quot; href=&quot;{{route('users.show',$user-&gt;id)}}&quot;&gt;Ta的话题&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&quot;nav-item&quot;&gt;
    &lt;a class=&quot;nav-link {{active_class(if_query('tab','replies'))}}&quot; href=&quot;{{route('users.show',[$user-&gt;id,'tab'=&gt;'replies'])}}&quot;&gt;Ta的回复&lt;/a&gt;
&lt;/li&gt;
</code></pre>
<h4 id="2页面载入配置">2.页面载入配置</h4>
<pre><code class="language-php">@if(if_query('tab','replies'))
    {{--显示用户评论页--}}
    @include('ucenter.user._replies',['replies'=&gt;$user-&gt;reply()-&gt;with('topic')-&gt;recent()-&gt;paginate(5)])
@else
    {{--显示用户文章页--}}
    @include('ucenter.user._topics',['topics'=&gt;$user-&gt;topics()-&gt;recent()-&gt;paginate(5)])
@endif
</code></pre>
<h3 id="回复话题">回复话题</h3>
<pre><code class="language-html">//视条件加载子模板
@includeWhen($boolen,'view.name',['some'=&gt;'data'])
</code></pre>
<p>回复话题 ,回复数的增加 ReplyObserver 观察器</p>
<blockquote>
<p>比较严谨的做法是创建成功后计算本话题下评论总数, 然后在对其reply_count字段进行赋值。</p>
</blockquote>
<pre><code class="language-php">class ReplyObserver
{
     public function created(Reply $reply)
     {
         $reply-&gt;topic-&gt;reply_count = $reply-&gt;topic-&gt;replies-&gt;count();
         $reply-&gt;topic-&gt;save();
     }
}
</code></pre>
<h3 id="laravel-消息通知">laravel 消息通知</h3>
<h4 id="数据库通知知识">数据库通知知识</h4>
<ul>
<li>
<p>访问通知</p>
<p><code>$user-&gt;notifications</code></p>
</li>
<li>
<p>访问未读通知</p>
<p><code>$user-&gt;unreadNotifications</code></p>
</li>
<li>
<p>标记通知为已读</p>
<p><code>$user-&gt;markAsRead()</code></p>
</li>
<li>
<p>通知删除</p>
<p><code>$user-&gt;notifications()-&gt;delete();</code></p>
</li>
<li>
<p>获取data数据(json)</p>
<p><code>$notification-&gt;data['user_id']</code></p>
</li>
</ul>
<h4 id="通知频道">通知频道 :</h4>
<p>通知传播的途径, laravel自带的有数据库、邮件、短信以及slack</p>
<h4 id="数据库通知频道">数据库通知频道</h4>
<ol>
<li>
<p>创建表格</p>
<pre><code class="language-php">php artisan notifications:table

php artisan migrate
</code></pre>
</li>
</ol>
<p>我们还需要在users表里新增notification_count字段,用来追踪用户有多少未读通知,如果未读通知大于零的话,就在显示提醒</p>
<pre><code class="language-php">php artisan make:migration add_notification_count_to_users_table --table=users
</code></pre>
<ol start="2">
<li>
<p>生成通知类</p>
<pre><code class="language-php">php artisan make:notification RepliedNotice
</code></pre>
<pre><code class="language-php">&lt;?php
namespace App\Notifications;
use Illuminate\Bus\Queueable;
use Illuminate\Notifications\Notification;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use App\Models\Reply;
class RepliedNotice extends Notification
{
 use Queueable;
 public $reply;
 public function __construct(Reply $reply)
 {
 	// 注入回复实体，方便 toDatabase 方法中的使用
 	$this-&gt;reply = $reply;
 }
 public function via($notifiable)
 {
 	// 开启通知的频道
	 return ['database'];
 }
 public function toDatabase($notifiable)
 {
     $topic = $this-&gt;reply-&gt;topic;
     $link = $topic-&gt;link(['#reply' . $this-&gt;reply-&gt;id]);
     // 存入数据库里的数据
     return [
         'reply_id' =&gt; $this-&gt;reply-&gt;id,
         'reply_content' =&gt; $this-&gt;reply-&gt;content,
         'user_id' =&gt; $this-&gt;reply-&gt;user-&gt;id,
         'user_name' =&gt; $this-&gt;reply-&gt;user-&gt;name,
         'user_avatar' =&gt; $this-&gt;reply-&gt;user-&gt;avatar,
         'topic_link' =&gt; $link,
         'topic_id' =&gt; $topic-&gt;id,
         'topic_title' =&gt; $topic-&gt;title,
     ];
 }
}
</code></pre>
<blockquote>
<p>每个通知类都有个 via() 方法，它决定了通知在哪个频道上发送。我们写上 database 数据库来作为通知频道。<br>
因为使用数据库通知频道，我们需要定义 toDatabase() 。这个方法接收 $notifiable 实例参数并返回一个普通的<br>
PHP 数组。这个返回的数组将被转成 JSON 格式并存储到通知数据表的 data 字段中。</p>
</blockquote>
</li>
<li>
<p>通知执行流程</p>
</li>
</ol>
<figure data-type="image" tabindex="2"><img src="assets/1552309644161.png" alt="1552309644161" loading="lazy"></figure>
<ol start="4">
<li>通知阅读流程</li>
</ol>
<figure data-type="image" tabindex="3"><img src="assets/1552477894134.png" alt="1552477894134" loading="lazy"></figure>
<h4 id="邮件通知">邮件通知</h4>
<p>// app\Notifications\RepiedNotice.php 通知类</p>
<pre><code class="language-php">Class RepiedNotice extends Notification
{
    public function __construct(Repied $reply)
    {
        $this-&gt;reply=$reply;
    }
    
    public function via($notifiable)
    {
        return ['databse','mail'];
    }
    
    public function toMail($notifiable)
    {
        $url=$this-&gt;reply-&gt;topic-link(['#reply',$this-&gt;reply-&gt;id]);
        return (new MailMessage)-&gt;subject('邮件标题')-&gt;line('你的话题有新回复')-&gt;action('查看回复',$url);
    }
}
</code></pre>
<h4 id="消息邮件加入队列">消息邮件加入队列</h4>
<p>我们可以通过对通知类添加 ShouldQueue 接口和 Queueable trait 把通知加入队列。它们两个在使用<br>
make:notification 命令来生成通知文件时就已经被导入，我们只需添加到通知类接口即可。</p>
<p>修改 TopicReplied.php 文件，将以下这一行：</p>
<pre><code class="language-php">class TopicReplied extends Notification
</code></pre>
<p>改为：</p>
<pre><code class="language-php">class TopicReplied extends Notification implements ShouldQueue
</code></pre>
<p>Laravel 会检测 ShouldQueue 接口并自动将通知的发送放入队列中，所以我们不需要做其他修改。</p>
<h2 id="第八章-用户权限">第八章 用户权限</h2>
<h3 id="权限扩展包permission">权限扩展包permission</h3>
<p><code>spatie/laravel-permission</code></p>
<h4 id="使用规范">使用规范</h4>
<p>user模型加载HasRoles trait</p>
<pre><code class="language-php">use Spatie\Permission\Traits\HasRoles;
class User extends Authenticatable implements MustVerifyEmailContract
{
 use HasRoles;
}
</code></pre>
<p>权限定义规范我们统一只用_分割法</p>
<table>
<thead>
<tr>
<th>权限</th>
<th>命名</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容管理</td>
<td>manage_contents</td>
<td></td>
</tr>
<tr>
<td>用户管理</td>
<td>manage_users</td>
<td></td>
</tr>
<tr>
<td>站点设置</td>
<td>edit_settings</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="站点权限部署">站点权限部署</h4>
<p><strong>策略过滤器</strong></p>
<blockquote>
<p>代码生成器所生成的策略授权,都会统一集成App\Policies\Policy基类,这样我们只需要在基类的before()方法里做下角色权限判断即可坐拥到所有的授权类</p>
</blockquote>
<pre><code class="language-php">public function before($user, $ability)
{
    if($user-&gt;can('manage_contens')){
        return true;
    }
}
</code></pre>
<h4 id="gates-说明">Gates 说明</h4>
<p>授权操作主要有两种方式:gates和策略.</p>
<p>Gates大部分应用在模型和资源没有关系的地方,比如查看管理员的面板.与之相反, 策略应该在特定的模型或者资源中使用.</p>
<p>Horizon 访问权限的设置</p>
<blockquote>
<p>下面代码只有角色为Founder的才能访问horizon面板</p>
</blockquote>
<p>AuthServiceProvider.php</p>
<pre><code class="language-php">    public function boot()
    {
        $this-&gt;registerPolicies();
        //Horizon 访问权限设置
        \Horizon::auth(function ($request) {
            // 是否是站长,这里需要先判断是否登录
            if(!\Auth::check()) return false;
            return \Auth::user()-&gt;hasRole('Founder');
        });
    }
</code></pre>
<h3 id="管理后台包">管理后台包</h3>
<p><code>summerblue/administrator</code></p>
<h4 id="laravel58采坑安装">laravel5.8采坑安装</h4>
<p>https://learnku.com/laravel/t/18675</p>
<blockquote>
<p>错误信息: In AdministratorServiceProvider.php line 48:</p>
<p>Call to undefined method Illuminate\Events\Dispatcher::fire()</p>
<p>解决方法: 搜索AdministratorServiceProvier.php文件按照下面修改fire()方法为dispatch();</p>
<p><a href="https://github.com/latifasaee">@latifasaee</a> In short, when you see an error like this with Laravel 5.8, the call</p>
<pre><code>Call to undefined method Illuminate\Events\Dispatcher::fire() 
</code></pre>
<p>needs to be changed to</p>
<pre><code>Call to undefined method Illuminate\Events\Dispatcher::dispatch() 
</code></pre>
<p>In versions prior to Laravel 5.7, this method classname was <code>fire</code> but with Laravel 5.8, it is now <code>dispatch</code></p>
</blockquote>
<h3 id="用户切换工具sudo-su">用户切换工具sudo-su</h3>
<ol>
<li>
<p>安装插件</p>
<p><code>viacreative/sudo-su</code></p>
</li>
<li>
<p>修改配置文件</p>
<pre><code class="language-php">config/sudosu.php
    //域名后缀限制
'allowed_tlds' =&gt; ['dev', 'local','com'],  
'user_model' =&gt; App\Models\User::class
</code></pre>
</li>
<li>
<p>模板植入</p>
<pre><code class="language-php">//resources/views/layouts/app.blade.php
@if (config('app.debug'))
    @include('sudosu::user-selector')
@endif
</code></pre>
</li>
</ol>
<h3 id="管理后台包-2">管理后台包</h3>
<p>插件: <code>summerblue/administrator</code></p>
<p>创建必要的文件夹</p>
<p>Administrator 会检测<code>model_config_path</code>和 <code>settings_config_path</code>目录是否能正常访问,所以我们需要先新建目录</p>
<pre><code class="language-php">$ mkdir -p config/administrator/settings
$ touch config/administrator/settings/.gitkeep
</code></pre>
<p>在空文件夹中放置 .gitkeep 保证了 Git 会将此文件夹纳入版本控制器中。</p>
<p>bug解决</p>
<p><code>Administrator: 在 administrator.php 的配置中你必须提供一个有效的 'home_page' 参数</code></p>
<p>解决:</p>
<p>https://github.com/summerblue/administrator-demo/blob/master/config/administrator/users.php</p>
<p>将users.php复制到config/administrator/目录下</p>
<p>修改use App\User 为use App\Models\User;</p>
<p>配置文章</p>
<p>https://learnku.com/laravel/t/2407/use-laravel-administrator-to-quickly-generate-data-model-administrator-tutorial</p>
<h2 id="第九章-杂项">第九章 杂项</h2>
<h3 id="边栏活跃用户">边栏活跃用户</h3>
<h4 id="新建artisan-命令">新建artisan 命令</h4>
<pre><code class="language-php">php artisan make:command CalculateActiveUser --command=larabbs:calculate-active-user
</code></pre>
<p>参数<code>--command</code>是指定artisan调用的命令,一般情况下,我们推介为命令加上命名空间,如本项目的<code>larabbs</code></p>
<h4 id="计划任务">计划任务</h4>
<blockquote>
<p>laravel 的计划任务执行思路</p>
<ol>
<li>
<p>在系统的crontab中 先执行schedule:run 命令</p>
</li>
<li>
<p>在app/Console/Kernel.php的schedule方法中定义相关命令</p>
</li>
</ol>
</blockquote>
<p><strong>1.系统cron定义laravel 计划任务命令</strong></p>
<p>修改系统的Cron计划任务配置信息,运行以下命令</p>
<pre><code class="language-php">$ export EDITOR=vi &amp;&amp; crontab -e
</code></pre>
<p>复制下面的这一行</p>
<pre><code class="language-php">* * * * * php /home/vagrant/Code/larabbs/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1
</code></pre>
<p>2.在<code>app/Console/Kernel.php</code>文件的<code>schedule</code>方法中定义</p>
<pre><code class="language-php">protected function schedule(Schedule $schedule)
 {
 // 一小时执行一次『活跃用户』数据生成的命令
 $schedule-&gt;command('larabbs:calculate-active-user')-&gt;hourly();
 }
</code></pre>
<p>系统的Cron已经设定好了,现在Cron软件将会每分钟调用一次laravel命令调度器,当<code>achedule:run</code>命令执行时,laravel会评估你的计划任务并运行预定任务.</p>
<h3 id="热门文章">热门文章</h3>
<p><code>Cache::remember()</code></p>
<pre><code class="language-php">class Link extends Model
{
    protected $fillable = ['title', 'link'];
    public $cache_key = 'larabbs_links';
    protected $cache_expire_in_minutes = 1440;
    public function getLinkCache()
    {
// 尝试从缓存中取出 cache_key 对应的数据。如果能取到，便直接返回数据。
// 否则运行匿名函数中的代码来取出活跃用户数据，返回的同时做了缓存。
        return \Cache::remember($this-&gt;cache_key, $this-&gt;cache_expire_in_minutes, function(){
            return $this-&gt;all();
        });
    }
}
</code></pre>
<p><code>Cache::forget()</code></p>
<h3 id="避免数据损坏">避免数据损坏</h3>
<blockquote>
<p>我们删除了用户,却没有删除用户发布的话题,此部分话题变成了遗留数据. 话题列表中渲染到这些遗留数据时,因为不存在作者,却取作者的avatar头像属性,故报错.</p>
</blockquote>
<p>处理办法,实现关联数据的删除.</p>
<h4 id="两种处理机制">两种处理机制:</h4>
<ol>
<li>代码监听器 —— 利用 的 deleted 事件连带删除，好处是灵活、扩展性强，不受底层数据库约束，坏处当删除时不添加监听器，就会出现漏删；</li>
<li>外键约束 —— 利用 MySQL 自带的外键约束功能，好处是数据一致性强，基本上不会出现漏删，坏处是有些数据库不支持，如 SQLite。</li>
</ol>
<h4 id="添加外检约束">添加外检约束</h4>
<blockquote>
<p>这里的外键约束，数据库引擎一定要是 InnoDB 类型的。MyISAM 类型不支持外键约束</p>
</blockquote>
<p>1.当用户删除时,删除其发布的话题;</p>
<p>2.当用户删除时,删除其发布的回复;</p>
<p>3.当话题删除时,删除其所属的回复;</p>
<blockquote>
<p>on update和on delete后面可以跟的词语有四个<br>
no action ， set null ， set default ，cascade<br>
no action 表示 不做任何操作，<br>
set null 表示在外键表中将相应字段设置为null<br>
set default 表示设置为默认值<br>
cascade 表示级联操作，就是说，如果主键表中被参考字段更新，外键表中也更新，主键表中的记录被删除，外键表中改行也相应删除</p>
</blockquote>
<pre><code class="language-php">public function up()
    {

        Schema::table('topics',function(Blueprint $table){
            $table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('users')-&gt;onDelete('cascade');
        });

        Schema::table('replies',function(Blueprint $table){
            $table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('users')-&gt;onDelete('cascade');
            $table-&gt;foreign('topic_id')-&gt;references('id')-&gt;on('topics')-&gt;onDelete('cascade');
        });
}
</code></pre>
<h3 id="用户最后登录时间">用户最后登录时间</h3>
<p>数据库题外话:</p>
<blockquote>
<p>然而，在数据库中操作中，『写入』对数据库造成的压力，要远比『读取』压力高得多。想要准确地跟踪用户的最后活跃时间，就必须在用户每一次请求服务器时都做记录，我们使用的主数据是 MySQL，也就是说每当用户访问一个页面，我们都将 MySQL 数据库里的 users 表写入数据。当我们有很多用户频繁访问站点时，这将会是数据库的一笔巨大开销。<br>
我们可以使用 Redis 来记录用户的访问时间，Redis 运行在机器的内存上，读写效率都极快。不过为了保证数据的完整性，我们需要定期将 Redis 数据同步到数据库中，否则一旦 Redis 出问题或者执行了 Redis 清理操作，用户的『最后活跃时间』将会丢失</p>
</blockquote>
<hr>
<h4 id="基本思路">基本思路</h4>
<p><code>基本思路如下</code>：</p>
<ol>
<li>记录 - 通过中间件过滤用户所有请求，记录用户访问时间到 Redis 按日期区分的哈希表；</li>
<li>同步 - 新建命令，计划任务每天运行一次此命令，将昨日哈希表里的数据同步到数据库中，并删除；</li>
<li>读取 - 优先读取当日哈希表里 Redis 里的数据，无数据则使用数据库中的值。</li>
</ol>
<h4 id="前置中间件和后置中间件">前置中间件和后置中间件</h4>
<blockquote>
<p>前置中间件是应用初始化完成以后立刻执行，此时控制器路由还未分配、控制器还未执行、视图还未渲染。后置中间件是即将离开应用的响应，此时控制器已将渲染好的视图返回，我们可以在后置中间件里修改响应。</p>
</blockquote>
<ol>
<li>创建中间件</li>
</ol>
<pre><code class="language-php">php artisan make:middleware RecordLastActived
</code></pre>
<ol start="2">
<li>
<p>注册中间件:在app/Http/Kernel.php类中对中间件进行注册</p>
</li>
<li>
<p>书写中间件</p>
<pre><code class="language-php">class RecordLastActivedTime
{
public function handle($request, Closure $next)
    {
        //如果是登录用户的话
        if(\Auth::check()){
            //    记录最后登录时间
            \Auth::user()-&gt;recordLastActivedAt();
        }
        return $next($request);
    }
}
</code></pre>
</li>
</ol>
<h3 id="总结-缓存操作">总结: 缓存操作</h3>
<h4 id="常用缓存操作">常用缓存操作</h4>
<pre><code class="language-php">//取出缓存,如果不存在则执行function闭包函数中的内容
Cache::remember(key,expired,function(){	
​	return .....
})
//将数据放入缓存中
Cache::put(key,value,expired);
//清除缓存值
Cache::forget(key);
    
</code></pre>
<h4 id="redis-操作">redis 操作</h4>
<pre><code class="language-第php">//$hash 表名, $filed 字段名,$value 字段值
Redis::hset($hash,$field,$value);
</code></pre>
<h2 id="第十章-附注">第十章 附注</h2>
<h3 id="删除按钮policy-优化">删除按钮policy 优化</h3>
<blockquote>
<p>解决文章评论列表删除按钮显示的policy判断,处理方法,在数据分配的时候讲相关模型懒加载.</p>
</blockquote>
<pre><code class="language-php">@include('topics._reply_list',['replies'=&gt;$topic-&gt;reply()-&gt;with('user','topic')-&gt;get()])
</code></pre>
<p>模板中代码</p>
<pre><code class="language-php">@if(count($replies)&gt;0)
    &lt;ul class=&quot;list-group&quot;&gt;
    @foreach($replies as $reply)
    &lt;li class=&quot;list-group-item&quot;&gt;
    &lt;div&gt;{{$reply-&gt;user-&gt;name}}
&lt;i class=&quot;far fa-clock&quot;&gt;&lt;/i&gt; {{$reply-&gt;created_at-&gt;diffForHumans()}}
&lt;/div&gt;
    &lt;div&gt;{{$reply-&gt;content}}&lt;/div&gt;
{{--@can('delete',$reply)--}}
&lt;div class=&quot;text-right&quot;&gt;
    &lt;form action=&quot;{{route('replies.destroy',$reply-&gt;id)}}&quot; method=&quot;post&quot;&gt;
    @csrf
{{method_field('delete')}}
&lt;button type=&quot;submit&quot; class=&quot;btn btn-outline-secondary&quot;&gt;删除&lt;/button&gt;
    &lt;/form&gt;
    &lt;/div&gt;
{{--@endcan--}}
&lt;/li&gt;
    @endforeach
    &lt;/ul&gt;
    @endif

</code></pre>
<h3 id="bootstrap4-flex弹性布局">bootstrap4 flex(弹性)布局</h3>
<pre><code class="language-php">.ml-md-auto 产生效果右对齐,垂直居中
</code></pre>
<h3 id="电子邮箱设置注意">电子邮箱设置注意</h3>
<blockquote>
<p>需要配置, 否则可能出错</p>
<p>MAIL_FROM_ADDRESS=9175020@qq.com<br>
MAIL_FROM_NAME=larabbs</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[转载] Go语言 结构体常见tag]]></title>
        <id>https://bluegrasses.github.io/post/zhuan-zai-go-yu-yan-jie-gou-ti-chang-jian-tag/</id>
        <link href="https://bluegrasses.github.io/post/zhuan-zai-go-yu-yan-jie-gou-ti-chang-jian-tag/">
        </link>
        <updated>2020-11-01T22:07:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是tag">什么是tag</h2>
<p>Tag是结构体中某个字段别名, 可以定义多个, 空格分隔</p>
<pre><code class="language-go">type Student struct {
    Name string `ak:&quot;av&quot; bk:&quot;bv&quot; ck:&quot;cv&quot;`
}
</code></pre>
<p>使用空格来区分多个tag,所以格式要尤为注意</p>
<h2 id="tag的作用">tag的作用</h2>
<p>tag相当于该字段的一个属性标签, 在Go语言中, 一些包通过tag来做相应的判断</p>
<p>举个例子, 比如我们有一个结构体</p>
<pre><code class="language-go">type Student struct {
    Name string
}
</code></pre>
<p>然后我们将一个该结构体实例化一个 s1</p>
<pre><code class="language-go">s1 := Student{
        Name: &quot;s1&quot;,
    }
</code></pre>
<p>再将 s1 序列化</p>
<pre><code class="language-go">v, err := json.Marshal(s1) // json.Marshal方法,json序列化,返回值和报错信息
if err != nil { // 不为nil代表报错
    fmt.Println(err)
}
fmt.Println(string(v)) // []byte转string, json
</code></pre>
<p>此时 string(v) 为</p>
<pre><code class="language-go">{
  &quot;Name&quot;: &quot;s1&quot;  
}
</code></pre>
<p>因为在 Go 语言中, 结构体字段要想为外部所用就必须首字母大写, 但是如果这个 s1 是返回给前端的, 那每个字段都首字母大写就很怪, 此时我们可以给 Student 加tag解决</p>
<p>结构体修改为</p>
<pre><code class="language-go">type Student struct {
    Name string`json:&quot;name&quot;`
}
</code></pre>
<p>序列化时, 会自己找到名为 json 的tag, 根据值来进行json后的赋值</p>
<p>因此 string(v) 为</p>
<pre><code class="language-go">{
  &quot;name&quot;: &quot;s1&quot;  
}
</code></pre>
<h2 id="常用tag记录">常用tag记录</h2>
<h3 id="json">json</h3>
<p>json序列化或反序列化时字段的名称</p>
<h3 id="db">db</h3>
<p>sqlx模块中对应的数据库字段名</p>
<h3 id="form">form</h3>
<p>gin框架中对应的前端的数据字段名</p>
<h3 id="binding">binding</h3>
<p>搭配 form 使用, 默认如果没查找到结构体中的某个字段则不报错值为空, binding为 required 代表没找到返回错误给前端</p>
<p>作者： ChnMig</p>
<p>出处：https://www.cnblogs.com/chnmig/p/1132390.html</p>
<p>版权：本作品采用「<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">署名-非商业性使用-相同方式共享 4.0 国际</a>」许可协议进行许可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[# {go} cobra ]]></title>
        <id>https://bluegrasses.github.io/post/cobra/</id>
        <link href="https://bluegrasses.github.io/post/cobra/">
        </link>
        <updated>2020-10-10T10:19:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="部署和安装">部署和安装</h2>
<h3 id="安装与导入">安装与导入</h3>
<ul>
<li>安装</li>
</ul>
<pre><code class="language-go">go get -u github.com/spf13/cobra
</code></pre>
<ul>
<li>导入</li>
</ul>
<pre><code class="language-go">import &quot;github.com/spf13/cobra&quot;
</code></pre>
<h4 id="使用cobra生成器">使用cobra生成器</h4>
<p>windows系统下使用：</p>
<pre><code class="language-go">go get github.com/spf13/cobra/cobra
</code></pre>
<p>或者在文件夹<code>github.com/spf13/cobra/cobra</code>下使用<code>go install</code>在<code>$GOPATH/bin</code>路径下生成<code>cobra.exe</code>可执行命令。</p>
<blockquote>
<p>windows 需要把bin目录加入到环境变量中, 重启生效</p>
</blockquote>
<h3 id="使用入门">使用入门</h3>
<h4 id="脚手架方式初始化">脚手架方式初始化</h4>
<pre><code class="language-go">//cli 为gomodule的包名
cobra init  --pkg-name=cli
</code></pre>
<h4 id="添加子命令">添加子命令</h4>
<ul>
<li>脚手架添加子命令</li>
</ul>
<pre><code>cobra add version
</code></pre>
<ul>
<li>代码实现</li>
</ul>
<pre><code class="language-go">//version.go
func init(){
    //rootCmd为根节点
	rootCmd.AddCommand(versionCmd)
}

&gt; go run main.go version
</code></pre>
<h4 id="添加二级子命令">添加二级子命令</h4>
<pre><code class="language-go">//help.go help 为version 的二级命令
var helpCmd=&amp;cobra.Comand{}
func init(){
	versionCmd.AddCommand(helpCmd)
}

&gt; go run main.go version help
</code></pre>
<h4 id="使用flags参数">使用Flags(参数)</h4>
<p><code>Flags提供了修饰符来控制动作命令的操作</code></p>
<ul>
<li>
<p>Persistent Flags：全局性flag, 可用于它所分配的命令以及该命令下的每个命令。在根上分配标志作为全局flag。</p>
</li>
<li>
<p>Local Flags：局部性flag,在本args分配一个标志，该标志仅适用于该特定命令。</p>
</li>
<li>
<p>Required flags：必选flag，flag默认是可选的。如果希望命令在未设置flag时报告错误，请将其标记为required。</p>
</li>
</ul>
<pre><code class="language-go">//version.go
var versionCmd = &amp;cobra.Command{
	Use:   &quot;version&quot;,
	Short: &quot;A brief description of your command&quot;,
	Long: `A longer description`,
	Run: func(cmd *cobra.Command, args []string) {
        //获取参数值
		str, _ := cmd.Flags().GetString(&quot;gfoo&quot;)
		fmt.Printf(&quot;the param vale is %s\n&quot;, str)
		fmt.Println(&quot;version  1.0.0 for cli&quot;)
	},
}
func init() {
	rootCmd.AddCommand(versionCmd)
	//定义Flags 提供了修饰符来控制动作命令的操作,StringP支持简写
	versionCmd.PersistentFlags().String(&quot;gfoo&quot;, &quot;gfoo&quot;, &quot;A help for global_foo&quot;)
	versionCmd.Flags().StringP(&quot;lfoo&quot;, &quot;f&quot;, &quot;&quot;, &quot;a help for local_foo&quot;)
    
}
</code></pre>
<h5 id="获取参数值的其他方法">获取参数值的其他方法</h5>
<pre><code class="language-go">var str string
var wordCmd = &amp;cobra.Command{
	Use:   &quot;version&quot;,
	Short: &quot;A brief description of your command&quot;,
	Long: `A longer description`,
	Run: func(cmd *cobra.Command, args []string) {
		//业务逻辑
	},
}
func init() {
	rootCmd.AddCommand(versionCmd)
	//直接将参数值读取到一个提前申明的变量中
	wordCmd.Flags().StringVarP(&amp;str, &quot;str&quot;, &quot;s&quot;, &quot;&quot;, &quot;请输入单词内容&quot;)
    
}
</code></pre>
<h4 id="args参数约束和检查">Args参数约束和检查</h4>
<pre><code class="language-go">//version.go Run:下面
	Args: func(cmd *cobra.Command, args []string) error {
		if len(args) &lt; 1 {
			return errors.New(&quot;requires at least one arg&quot;)
		}
		return nil
	},
//上面代码可以简写为
	Args: cobra.MinimumNArgs(1),
//version 命令不加参数会报错
&gt; go run main.go version 
</code></pre>
<h4 id="help">help</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[{go} 数据结构和算法-基础篇]]></title>
        <id>https://bluegrasses.github.io/post/go-shu-ju-jie-gou-he-suan-fa-ji-chu-pian/</id>
        <link href="https://bluegrasses.github.io/post/go-shu-ju-jie-gou-he-suan-fa-ji-chu-pian/">
        </link>
        <updated>2020-09-23T12:56:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="数据结构">数据结构</h2>
<h3 id="栈-stack">栈 stack</h3>
<pre><code class="language-go">type Stack struct {
	items []int
}
//入栈
func (s *Stack) Push(data int) {
	s.items = append(s.items, data)
}
//出栈
func (s *Stack) Pop() int {
	l := len(s.items) - 1
	popData := s.items[l]
    //切片左包含,右不包含
	s.items = s.items[:l]
	return popData
}

func main() {
	myStack := Stack{}
	myStack.Push(1)
	myStack.Push(2)
	myStack.Push(3)
	myStack.Pop()
	fmt.Println(myStack)
}
</code></pre>
<h3 id="队列queue">队列queue</h3>
<pre><code class="language-go">type Queue struct {
	items []int
}
//入队
func (q *Queue) EnQueen(i int) {
	q.items = append(q.items, i)
}
//出队
func (q *Queue) DeQueen() int {
	UnQueen := q.items[0]
	q.items = q.items[1:]
	return UnQueen
}

func main() {
	myQueen := Queue{}
	myQueen.EnQueen(1)
	myQueen.EnQueen(2)
	myQueen.EnQueen(3)
	myQueen.DeQueen()
	fmt.Println(myQueen)
}
</code></pre>
<h3 id="二叉树">二叉树</h3>
<pre><code class="language-go">var count int

type Node struct {
	Key      int
	LeftSon  *Node
	RightSon *Node
}

//Insert tree中插入值
func (n *Node) Insert(i int) {
	//i&gt;节点值放到右侧,右侧如果没有节点直接放入,有的话递归进行
	if n.Key &lt; i {
		if n.RightSon == nil {
			n.RightSon = &amp;Node{Key: i}
		} else {
			n.RightSon.Insert(i)
		}
	} else if n.Key &gt; i {
		if n.LeftSon == nil {
			n.LeftSon = &amp;Node{Key: i}
		} else {
			n.LeftSon.Insert(i)
		}
	}
}

//Search 如果值正常返回true
func (n *Node) Search(i int) bool {
	count++
	//如果节点到底都没找到,返回false
    if n == nil {
		return false
	}
    //如果大于到右侧寻找,如果小于到左侧寻找,否则返回真(true),递归调用时注意return
	if n.Key &lt; i {
		return n.RightSon.Search(i)
	} else if n.Key &gt; i {
		return n.LeftSon.Search(i)
	}
	return true
}

func main() {
	myNode := &amp;Node{Key: 100}
	myNode.Insert(50)
	myNode.Insert(150)
	myNode.Insert(203)
	myNode.Insert(19)
	myNode.Insert(76)
	myNode.Insert(71)
	myNode.Insert(82)

	fmt.Println(myNode.Search(76))
	fmt.Println(count)
}
</code></pre>
<h3 id="trie-字典">trie (字典)</h3>
<figure data-type="image" tabindex="1"><img src="https://bluegrasses.github.io/post-images/1601039837814.png" alt="" loading="lazy"></figure>
<pre><code class="language-go">const size = 26

//定义一个单元
type Node struct {
	children [size]*Node
	//单词末尾 加isEnd标记
	isEnd bool
}

type Trie struct {
	root *Node
}

//InitTrie 初始化字典,复杂的初始化建议设立一个初始函数
func InitTrie() *Trie {
	result := &amp;Trie{root: &amp;Node{}}
	return result
}

//Insert 插入trie
func (t *Trie) Insert(w string) {
	wordLength := len(w)
	currentNode := t.root
	for i := 0; i &lt; wordLength; i++ {
		charIndex := w[i] - 'a'
		if currentNode.children[charIndex] == nil {
			currentNode.children[charIndex] = &amp;Node{}
		}
		currentNode = currentNode.children[charIndex]
	}
	currentNode.isEnd = true
}

//Search 查询 tries
func (t *Trie) Search(w string) bool {
	wordLength := len(w)
	currentNode := t.root
	for i := 0; i &lt; wordLength; i++ {
		charIndex := w[i] - 'a'
		if currentNode.children[charIndex] == nil {
			return false
		}
		currentNode = currentNode.children[charIndex]
	}
	if currentNode.isEnd == true {
		return true
	}
	return false
}

func main() {
	myTrie := InitTrie()
	myTrie.Insert(&quot;hello&quot;)
	fmt.Println(myTrie.Search(&quot;hello&quot;))
}
</code></pre>
<h3 id="linked-链表">linked 链表</h3>
<figure data-type="image" tabindex="2"><img src="https://bluegrasses.github.io/post-images/1601040093784.png" alt="" loading="lazy"></figure>
<pre><code class="language-go">//定义一个单元
type node struct {
	data int
	next *node
}

type linkedList struct {
	head   *node
	length int
}

//prepend 头部添加一个节点
func (l *linkedList) prepend(n *node) {
	second := l.head
	l.head = n
	l.head.next = second
	l.length++
}

//打印列表
func (l linkedList) printLinked() {
	current := l.head
	for i := 0; i &lt; l.length; i++ {
		fmt.Println(current.data)
		current = current.next
	}
}

//deleteWithValue 删除link制定数值
func (l *linkedList) deleteWithValue(i int) {
	//空link情况
	if l.length == 0 {
		return
	}
	//删除首节点情况
	if l.head.data == i {
		l.head = l.head.next
		l.length--
		return
	}
	current := l.head
	for current.next.data != i {
		current = current.next
		//没有匹配值的情况
		if current.next == nil {
			return
		}
	}
	current.next = current.next.next
	l.length--
}

func main() {
	node1 := &amp;node{data: 48}
	node2 := &amp;node{data: 16}
	node3 := &amp;node{data: 32}
	myLink := linkedList{}
	myLink.prepend(node1)
	myLink.prepend(node2)
	myLink.prepend(node3)
	myLink.printLinked()
	myLink.deleteWithValue(16)
	myLink.printLinked()
}

</code></pre>
<h3 id="hash">hash</h3>
<p>图解:<br>
<img src="https://bluegrasses.github.io/post-images/1601107673005.png" alt="" loading="lazy"><br>
代码:</p>
<pre><code class="language-go">//ArraySize hash数组长度
const ArraySize int = 7

//HashTable 哈希表struct结构体
type HashTable struct {
	//hash表长度
	array [ArraySize]*bucket
}

//bucket struct
type bucket struct {
	head *bucketNode
}

type bucketNode struct {
	key  string
	next *bucketNode
}

func (h *HashTable) Insert(key string) {
	index := hash(key)
	h.array[index].Insert(key)
}

func (h *HashTable) Search(key string) bool {
	index := hash(key)
	return h.array[index].Search(key)
}

func (h *HashTable) Delete(key string) {
	index := hash(key)
	h.array[index].Delete(key)
}

func (b *bucket) Insert(k string) {
	if !b.Search(k) {
		second := b.head
		b.head = &amp;bucketNode{key: k}
		b.head.next = second
	} else {
		fmt.Println(&quot;k&quot;, &quot;is exists&quot;)
	}

}

func (b *bucket) Search(key string) bool {
	current := b.head
	for current != nil {
		if current.key == key {
			return true
		}
		current = current.next
	}
	return false
}

func (b *bucket) Delete(key string) {
	if b.head.key == key {
		b.head = b.head.next
		return
	}
	current := b.head
	for current.next != nil {
		if current.next.key == key {
			current.next = current.next.next
			return
		}
		current = current.next
	}
}

//Init 初始化函数,注意init为go的系统关键字,先于系统main函数执行
func Init() *HashTable {
	obj := &amp;HashTable{}
	for i := range obj.array {
		obj.array[i] = &amp;bucket{}
	}
	return obj
}

func hash(key string) int {
	sum := 0
	for _, v := range key {
		sum += int(v)
	}
	return sum % ArraySize
}

func main() {
	ht := Init()
	list := []string{
		&quot;eric&quot;,
		&quot;kyle&quot;,
		&quot;stan&quot;,
		&quot;token&quot;,
	}
	for _, v := range list {
		ht.Insert(v)
	}
	ht.Search(&quot;token&quot;)
	ht.Delete(&quot;token&quot;)
	ht.Search(&quot;token&quot;)
}

</code></pre>
]]></content>
    </entry>
</feed>